<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PA &amp; CODING</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="https://jxch.github.io/atom.xml" rel="self"/>
  
  <link href="https://jxch.github.io/"/>
  <updated>2023-05-05T06:17:47.382Z</updated>
  <id>https://jxch.github.io/</id>
  
  <author>
    <name>钱不寒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML-特殊字符编码对照表</title>
    <link href="https://jxch.github.io/2023/05/05/coding/html-te-shu-zi-fu-bian-ma-dui-zhao-biao/"/>
    <id>https://jxch.github.io/2023/05/05/coding/html-te-shu-zi-fu-bian-ma-dui-zhao-biao/</id>
    <published>2023-05-05T05:57:12.000Z</published>
    <updated>2023-05-05T06:17:47.382Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>特殊符号</th><th>命名实体</th><th>十进制编码</th><th>特殊符号</th><th>命名实体</th><th>十进制编码</th><th>特殊符号</th><th>命名实体</th><th>十进制编码</th></tr></thead><tbody><tr><td>&amp;#913</td><td>&amp;Alpha;</td><td>&amp;#913;</td><td>Β</td><td>&amp;Beta;</td><td>&amp;#914;</td><td>Γ</td><td>&amp;Gamma;</td><td>&amp;#915;</td></tr><tr><td>Δ</td><td>&amp;Delta;</td><td>&amp;#916;</td><td>Ε</td><td>&amp;Epsilon;</td><td>&amp;#917;</td><td>Ζ</td><td>&amp;Zeta;</td><td>&amp;#918;</td></tr><tr><td>Η</td><td>&amp;Eta;</td><td>&amp;#919;</td><td>Θ</td><td>&amp;Theta;</td><td>&amp;#920;</td><td>Ι</td><td>&amp;Iota;</td><td>&amp;#921;</td></tr><tr><td>Κ</td><td>&amp;Kappa;</td><td>&amp;#922;</td><td>Λ</td><td>&amp;Lambda;</td><td>&amp;#923;</td><td>Μ</td><td>&amp;Mu;</td><td>&amp;#924;</td></tr><tr><td>Ν</td><td>&amp;Nu;</td><td>&amp;#925;</td><td>Ξ</td><td>&amp;Xi;</td><td>&amp;#926;</td><td>Ο</td><td>&amp;Omicron;</td><td>&amp;#927;</td></tr><tr><td>Π</td><td>&amp;Pi;</td><td>&amp;#928;</td><td>Ρ</td><td>&amp;Rho;</td><td>&amp;#929;</td><td>Σ</td><td>&amp;Sigma;</td><td>&amp;#931;</td></tr><tr><td>Τ</td><td>&amp;Tau;</td><td>&amp;#932;</td><td>Υ</td><td>&amp;Upsilon;</td><td>&amp;#933;</td><td>Φ</td><td>&amp;Phi;</td><td>&amp;#934;</td></tr><tr><td>Χ</td><td>&amp;Chi;</td><td>&amp;#935;</td><td>Ψ</td><td>&amp;Psi;</td><td>&amp;#936;</td><td>Ω</td><td>&amp;Omega;</td><td>&amp;#937;</td></tr><tr><td>α</td><td>&amp;alpha;</td><td>&amp;#945;</td><td>β</td><td>&amp;beta;</td><td>&amp;#946;</td><td>γ</td><td>&amp;gamma;</td><td>&amp;#947;</td></tr><tr><td>δ</td><td>&amp;delta;</td><td>&amp;#948;</td><td>ε</td><td>&amp;epsilon;</td><td>&amp;#949;</td><td>ζ</td><td>&amp;zeta;</td><td>&amp;#950;</td></tr><tr><td>η</td><td>&amp;eta;</td><td>&amp;#951;</td><td>θ</td><td>&amp;theta;</td><td>&amp;#952;</td><td>ι</td><td>&amp;iota;</td><td>&amp;#953;</td></tr><tr><td>κ</td><td>&amp;kappa;</td><td>&amp;#954;</td><td>λ</td><td>&amp;lambda;</td><td>&amp;#955;</td><td>μ</td><td>&amp;mu;</td><td>&amp;#956;</td></tr><tr><td>ν</td><td>&amp;nu;</td><td>&amp;#957;</td><td>ξ</td><td>&amp;xi;</td><td>&amp;#958;</td><td>ο</td><td>&amp;omicron;</td><td>&amp;#959;</td></tr><tr><td>π</td><td>&amp;pi;</td><td>&amp;#960;</td><td>ρ</td><td>&amp;rho;</td><td>&amp;#961;</td><td>ς</td><td>&amp;sigmaf;</td><td>&amp;#962;</td></tr><tr><td>σ</td><td>&amp;sigma;</td><td>&amp;#963;</td><td>τ</td><td>&amp;tau;</td><td>&amp;#964;</td><td>υ</td><td>&amp;upsilon;</td><td>&amp;#965;</td></tr><tr><td>φ</td><td>&amp;phi;</td><td>&amp;#966;</td><td>χ</td><td>&amp;chi;</td><td>&amp;#967;</td><td>ψ</td><td>&amp;psi;</td><td>&amp;#968;</td></tr><tr><td>ω</td><td>&amp;omega;</td><td>&amp;#969;</td><td>ϑ</td><td>&amp;thetasym;</td><td>&amp;#977;</td><td>ϒ</td><td>&amp;upsih;</td><td>&amp;#978;</td></tr><tr><td>ϖ</td><td>&amp;piv;</td><td>&amp;#982;</td><td>•</td><td>&amp;bull;</td><td>&amp;#8226;</td><td>…</td><td>&amp;hellip;</td><td>&amp;#8230;</td></tr><tr><td>′</td><td>&amp;prime;</td><td>&amp;#8242;</td><td>″</td><td>&amp;Prime;</td><td>&amp;#8243;</td><td>‾</td><td>&amp;oline;</td><td>&amp;#8254;</td></tr><tr><td>⁄</td><td>&amp;frasl;</td><td>&amp;#8260;</td><td>℘</td><td>&amp;weierp;</td><td>&amp;#8472;</td><td>ℑ</td><td>&amp;image;</td><td>&amp;#8465;</td></tr><tr><td>ℜ</td><td>&amp;real;</td><td>&amp;#8476;</td><td>™</td><td>&amp;trade;</td><td>&amp;#8482;</td><td>ℵ</td><td>&amp;alefsym;</td><td>&amp;#8501;</td></tr><tr><td>←</td><td>&amp;larr;</td><td>&amp;#8592;</td><td>↑</td><td>&amp;uarr;</td><td>&amp;#8593;</td><td>→</td><td>&amp;rarr;</td><td>&amp;#8594;</td></tr><tr><td>↓</td><td>&amp;darr;</td><td>&amp;#8595;</td><td>↔</td><td>&amp;harr;</td><td>&amp;#8596;</td><td>↵</td><td>&amp;crarr;</td><td>&amp;#8629;</td></tr><tr><td>⇐</td><td>&amp;lArr;</td><td>&amp;#8656;</td><td>⇑</td><td>&amp;uArr;</td><td>&amp;#8657;</td><td>⇒</td><td>&amp;rArr;</td><td>&amp;#8658;</td></tr><tr><td>⇓</td><td>&amp;dArr;</td><td>&amp;#8659;</td><td>⇔</td><td>&amp;hArr;</td><td>&amp;#8660;</td><td>∀</td><td>&amp;forall;</td><td>&amp;#8704;</td></tr><tr><td>∂</td><td>&amp;part;</td><td>&amp;#8706;</td><td>∃</td><td>&amp;exist;</td><td>&amp;#8707;</td><td>∅</td><td>&amp;empty;</td><td>&amp;#8709;</td></tr><tr><td>∇</td><td>&amp;nabla;</td><td>&amp;#8711;</td><td>∈</td><td>&amp;isin;</td><td>&amp;#8712;</td><td>∉</td><td>&amp;notin;</td><td>&amp;#8713;</td></tr><tr><td>∋</td><td>&amp;ni;</td><td>&amp;#8715;</td><td>∏</td><td>&amp;prod;</td><td>&amp;#8719;</td><td>∑</td><td>&amp;sum;</td><td>&amp;#8722;</td></tr><tr><td>−</td><td>&amp;minus;</td><td>&amp;#8722;</td><td>∗</td><td>&amp;lowast;</td><td>&amp;#8727;</td><td>√</td><td>&amp;radic;</td><td>&amp;#8730;</td></tr><tr><td>∝</td><td>&amp;prop;</td><td>&amp;#8733;</td><td>∞</td><td>&amp;infin;</td><td>&amp;#8734;</td><td>∠</td><td>&amp;ang;</td><td>&amp;#8736;</td></tr><tr><td>∧</td><td>&amp;and;</td><td>&amp;#8869;</td><td>∨</td><td>&amp;or;</td><td>&amp;#8870;</td><td>∩</td><td>&amp;cap;</td><td>&amp;#8745;</td></tr><tr><td>∪</td><td>&amp;cup;</td><td>&amp;#8746;</td><td>∫</td><td>&amp;int;</td><td>&amp;#8747;</td><td>∴</td><td>&amp;there4;</td><td>&amp;#8756;</td></tr><tr><td>∼</td><td>&amp;sim;</td><td>&amp;#8764;</td><td>≅</td><td>&amp;cong;</td><td>&amp;#8773;</td><td>≈</td><td>&amp;asymp;</td><td>&amp;#8773;</td></tr><tr><td>≠</td><td>&amp;ne;</td><td>&amp;#8800;</td><td>≡</td><td>&amp;equiv;</td><td>&amp;#8801;</td><td>≤</td><td>&amp;le;</td><td>&amp;#8804;</td></tr><tr><td>≥</td><td>&amp;ge;</td><td>&amp;#8805;</td><td>⊂</td><td>&amp;sub;</td><td>&amp;#8834;</td><td>⊃</td><td>&amp;sup;</td><td>&amp;#8835;</td></tr><tr><td>⊄</td><td>&amp;nsub;</td><td>&amp;#8836;</td><td>⊆</td><td>&amp;sube;</td><td>&amp;#8838;</td><td>⊇</td><td>&amp;supe;</td><td>&amp;#8839;</td></tr><tr><td>⊕</td><td>&amp;oplus;</td><td>&amp;#8853;</td><td>⊗</td><td>&amp;otimes;</td><td>&amp;#8855;</td><td>⊥</td><td>&amp;perp;</td><td>&amp;#8869;</td></tr><tr><td>⋅</td><td>&amp;sdot;</td><td>&amp;#8901;</td><td>⌈</td><td>&amp;lceil;</td><td>&amp;#8968;</td><td>⌉</td><td>&amp;rceil;</td><td>&amp;#8969;</td></tr><tr><td>⌊</td><td>&amp;lfloor;</td><td>&amp;#8970;</td><td>⌋</td><td>&amp;rfloor;</td><td>&amp;#8971;</td><td>◊</td><td>&amp;loz;</td><td>&amp;#9674;</td></tr><tr><td>♠</td><td>&amp;spades;</td><td>&amp;#9824;</td><td>♣</td><td>&amp;clubs;</td><td>&amp;#9827;</td><td>♥</td><td>&amp;hearts;</td><td>&amp;#9829;</td></tr><tr><td>♦</td><td>&amp;diams;</td><td>&amp;#9830;</td><td></td><td>&amp;nbsp;</td><td>&amp;#160;</td><td>¡</td><td>&amp;iexcl;</td><td>&amp;#161;</td></tr><tr><td>¢</td><td>&amp;cent;</td><td>&amp;#162;</td><td>£</td><td>&amp;pound;</td><td>&amp;#163;</td><td>¤</td><td>&amp;curren;</td><td>&amp;#164;</td></tr><tr><td>¥</td><td>&amp;yen;</td><td>&amp;#165;</td><td>¦</td><td>&amp;brvbar;</td><td>&amp;#166;</td><td>§</td><td>&amp;sect;</td><td>&amp;#167;</td></tr><tr><td>¨</td><td>&amp;uml;</td><td>&amp;#168;</td><td>©</td><td>&amp;copy;</td><td>&amp;#169;</td><td>ª</td><td>&amp;ordf;</td><td>&amp;#170;</td></tr><tr><td>«</td><td>&amp;laquo;</td><td>&amp;#171;</td><td>¬</td><td>&amp;not;</td><td>&amp;#172;</td><td></td><td>­&amp;shy;</td><td>&amp;#173;</td></tr><tr><td>®</td><td>&amp;reg;</td><td>&amp;#174;</td><td>¯</td><td>&amp;macr;</td><td>&amp;#175;</td><td>°</td><td>&amp;deg;</td><td>&amp;#176;</td></tr><tr><td>±</td><td>&amp;plusmn;</td><td>&amp;#177;</td><td>²</td><td>&amp;sup2;</td><td>&amp;#178;</td><td>³</td><td>&amp;sup3;</td><td>&amp;#179;</td></tr><tr><td>´</td><td>&amp;acute;</td><td>&amp;#180;</td><td>µ</td><td>&amp;micro;</td><td>&amp;#181;</td><td>"</td><td>&amp;quot;</td><td>&amp;#34;</td></tr><tr><td>&lt;</td><td>&amp;lt;</td><td>&amp;#60;</td><td>&gt;</td><td>&amp;gt;</td><td>&amp;#62;</td><td>’</td><td></td><td>&amp;#39;</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十进制编码&lt;/th&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十进制编码&lt;/th&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="HTML" scheme="https://jxch.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>市场分析-20230504-Brooks-S&amp;P Emini</title>
    <link href="https://jxch.github.io/2023/05/05/shi-chang-fen-xi/shi-chang-fen-xi-20230504-brooks-s-p-emini/"/>
    <id>https://jxch.github.io/2023/05/05/shi-chang-fen-xi/shi-chang-fen-xi-20230504-brooks-s-p-emini/</id>
    <published>2023-05-05T05:26:35.000Z</published>
    <updated>2023-05-05T05:36:04.917Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">Trading Update: Thursday May 4, 2023</font></p><h1><font color="green">S&amp;P Emini pre-open market analysis</font></h1><h2 id="font-color-red-Emini-daily-chart-font"><font color="red">Emini daily chart</font></h2><ul><li>The Emini formed a strong bear bar closing on its low yesterday.<ul><li><font color="gray">Emini 昨日收盘于低点形成了一个强大的熊市</font></li></ul></li><li>Bears want break below March 22nd high and test of April 26th low with close below the March 22nd high. This would close the breakout point and end the argument of a measured move from the March 13th low to the March 22nd high.<ul><li><font color="gray">空头希望跌破 3 月 22 日的高点，并测试 4 月 26 日的低点，收盘价低于 3 月 22 日的高点。这将关闭突破点并结束从 3 月 13 日低点到 3 月 22 日高点的谨慎移动的论点</font></li></ul></li><li>The next target for the bears is a test of the 4,000 big round number.<ul><li><font color="gray">空头的下一个目标是测试4,000大轮数</font></li></ul></li><li>The past two trading days increase the probability of the market going slightly lower, reaching the April 26th low.<ul><li><font color="gray">近两个交易日加大大盘小幅走低的概率，触及4月26日低点</font></li></ul></li><li>The bulls want the rally (Tuesday’s low to yesterday’s high) to disappoint the bears enough that the market will form a micro double bottom and rally back to the May 1st high.<ul><li><font color="gray">多头希望反弹（周二的低点到昨天的高点）足以让空头失望，市场将形成微双底并反弹至 5 月 1 日的高点</font></li></ul></li><li>There were bulls who bought the May 1st low and scaled in lower during Tuesday’s selloff. Those bulls were disappointed enough that many used the rally late Tuesday to Wednesday’s high to exit their trade breakeven, or with a small profit after their scale in traders. Most of those bulls probably bought more at the April 26th low.<ul><li><font color="gray">多头买入 5 月 1 日的低点，并在周二的抛售中走低。那些多头非常失望，以至于许多人利用周二晚些时候的反弹至周三的高点退出交易盈亏平衡，或者在交易员规模扩大后获利微薄。这些多头中的大多数可能在 4 月 26 日的低点买入更多</font></li></ul></li><li>There were bears who sold the April 26th low and were disappointed by last week’s rally. Most of those bears sold higher and were happy to buy back shorts at the April 26th low.<ul><li><font color="gray">有些空头卖出了 4 月 26 日的低点，并对上周的反弹感到失望。大多数空头卖得更高，并乐于在 4 月 26 日的低点买回空头</font></li></ul></li><li>The market has been in a tight trading range for over a month and is in breakout mode. While the bears have an argument for a test down below the March 22nd high, they need to get more signs of strength, such as solid bear closes.<ul><li><font color="gray">一个多月以来，市场一直处于窄幅交易区间，并处于突破模式。虽然空头有理由测试低于 3 月 22 日的高点，但他们需要获得更多的力量迹象，例如稳固的熊市收盘</font></li></ul></li><li>The bears are hopeful that the market is forming a double top (April 18th and May 1st) and will break below the neckline (April 26th) and fall for a measured move down, testing the March 24th low.<ul><li><font color="gray">空头希望市场正在形成双顶（4 月 18 日和 5 月 1 日）并将跌破颈线（4 月 26 日）并缓慢下跌，测试 3 月 24 日的低点</font></li></ul></li></ul><h2 id="font-color-red-Emini-5-minute-chart-and-what-to-expect-today-font"><font color="red">Emini 5-minute chart and what to expect today</font></h2><ul><li>Emini is down 20 points in the overnight Globex session.</li><li>The bear have gone sideways for most of the overnight Globex session.<ul><li><font color="gray">在隔夜 Globex 交易时段的大部分时间里，空头都横盘整理</font></li></ul></li><li>After the consecutive bear trend bars on the daily chart, the bulls want today to disappoint the bears and form a trading range bar or a bull bar.<ul><li><font color="gray">在日线图上连续出现熊市趋势柱后，多头希望今天令空头失望并形成交易区间柱或牛市柱</font></li></ul></li><li>Traders should assume the market will have a trading range open and going sideways for the first couple of hours. This means that most traders should consider not trading for the first 6-12 bars unless they are comfortable with limit orders.<ul><li><font color="gray">交易者应该假设市场将在前几个小时内打开交易区间并横盘整理。这意味着大多数交易者应该考虑不要交易前 6-12 根柱线，除非他们对限价订单感到满意</font></li></ul></li><li>Most traders should focus on catching the opening swing trade that typically begins before the end of the second hour.<ul><li><font color="gray">大多数交易者应专注于捕捉通常在第二个小时结束前开始的开盘摆动交易</font></li></ul></li><li>While the odds favor a trading range, if the market begins to form strong trend bars on the open, traders cannot be in denial and must trade the market like a trade.<ul><li><font color="gray">虽然可能性有利于交易区间，但如果市场在开盘时开始形成强劲的趋势柱，交易者不能否认，必须像交易一样交易市场</font></li></ul></li><li>Lastly, traders should pay close attention to yesterday’s low as it will likely be a magnet for most of the day.<ul><li><font color="gray">最后，交易者应密切关注昨天的低点，因为它可能会在一天中的大部分时间成为磁石</font></li></ul></li></ul><h2 id="font-color-red-Emini-intraday-market-update-font"><font color="red">Emini intraday market update</font></h2><ul><li>The Emini gapped down and formed a strong two-bar breakout on bars 2-3.<ul><li><font color="gray">Emini 向下跳空并在 2-3 柱上形成强劲的两柱突破</font></li></ul></li><li>The Bears got a second leg down to bar 12. However, the rally up to bar 20 was strong enough to market the market, likely in a trading range and not a bear trend.<ul><li><font color="gray">空头的第二条腿跌至 12 根柱线。然而，涨至 20 根柱子的涨势足以推销市场，可能处于交易区间而非熊市趋势</font></li></ul></li><li>While the bulls did an excellent job getting a rally up to bar 20 (8:10 AM PT), the selloff during the first hour lowered the probability of a bull trend day. This meant the odds favored a trading range day and mostly a sideways market.<ul><li><font color="gray">虽然多头在 20 号柱（太平洋时间上午 8 点 10 分）上表现出色，但第一个小时的抛售降低了牛市趋势日出现的可能性。这意味着赔率有利于交易区间日和主要是横盘市场</font></li></ul></li><li>The bears got a wedge bottom on bar 32 (9:10 AM PT)  and the bulls got two legs up to bar 44, testing the bar 20 high.<ul><li><font color="gray">空头在 32 号柱（太平洋时间上午 9 点 10 分）出现楔形底部，多头在 44 号柱上有两条腿，测试 20 号柱的高位</font></li></ul></li><li>As of bar 46 (10: 15 AM PT), the market is Always In Long. The bulls want to reach the day’s open and close above today’s open.<ul><li><font color="gray">截至第 46 条柱线（太平洋时间上午 10:15），市场总是多头。多头希望当天的开盘价和收盘价高于今天的开盘价</font></li></ul></li><li>The market will probably reach the open and begin to go sideways for a couple of hours and decide on closing above or below it. Even if the bulls can close above the open, today will likely not be a strong bull trend day. The open of the day is basically the high of the day and so far the day has a big tail below. This means a trading range day is most likely.<ul><li><font color="gray">市场可能会达到开盘价并开始横盘整理几个小时，然后决定收盘价高于或低于它。即使多头能够收于开盘价之上，今天也可能不会是一个强劲的牛市趋势日。当天的开盘价基本上是当天的高点，到目前为止，当天的下方有一个大尾巴。这意味着交易区间日最有可能</font></li></ul></li></ul><h2 id="font-color-red-Yesterday’s-Emini-setups-font"><font color="red">Yesterday’s Emini setups</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230504-SP500-Emini-5-Min-Buy-Climax-Then-Trading-Range-Then-Bear-Breakout-after-FOMC-768x432.png" alt="Emini 5 Min - Yesterday"></p><h2 id="font-color-green-Summary-of-today’s-S-P-Emini-price-action-font"><font color="green">Summary of today’s S&amp;P Emini price action</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230504-SP500-Emini-5-Min-Trading-Range-Day-after-Double-Top-and-Double-Bottom-768x432.png" alt="Emini 5 Min - Today"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Trading Update: Thursday May 4, 2023&lt;/font&gt;&lt;/p&gt;
&lt;h1&gt;&lt;font color=&quot;green&quot;&gt;S&amp;amp;P Emini pre-open market analysis&lt;/font&gt;&lt;/</summary>
      
    
    
    
    <category term="交易笔记" scheme="https://jxch.github.io/categories/%E4%BA%A4%E6%98%93%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="市场分析" scheme="https://jxch.github.io/tags/%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90/"/>
    
    <category term="Brooks-转载" scheme="https://jxch.github.io/tags/Brooks-%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-https配置</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/nginx-https-pei-zhi/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/nginx-https-pei-zhi/</id>
    <published>2023-05-05T05:14:15.000Z</published>
    <updated>2023-05-05T06:31:45.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境">环境</h2><p>需要 <code>http_ssl_module</code>，检查是否存在，一般自动装了<br>执行 <code>nginx -V</code> 查看输出的字符串中是否有 <code>--with-http_ssl_module</code></p><h2 id="conf">conf</h2><p>先生成证书: <a href="/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/" title="SSL-openssl生成crt证书">SSL-openssl生成crt证书</a></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server</span> <span class="token value attr-value">{</span><span class="token key attr-name">        listen</span> <span class="token value attr-value">      443 ssl;</span><span class="token key attr-name">        server_name</span> <span class="token value attr-value"> 192.168.52.132;</span><span class="token key attr-name">        ssl_certificate</span> <span class="token value attr-value">      /etc/nginx/conf.d/ssl/server.crt;</span><span class="token key attr-name">        ssl_certificate_key</span> <span class="token value attr-value">  /etc/nginx/conf.d/ssl/server_nopass.key;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，不要在https中去请求http，那样不会被允许，因为会降低安全性。<br>所以，用到了https，就得全升级成https。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;p&gt;需要 &lt;code&gt;http_ssl_module&lt;/code&gt;，检查是否存在，一般自动装了&lt;br&gt;
执行 &lt;code&gt;nginx -V&lt;/code&gt; 查看输出的字符串中是否有 &lt;code&gt;--with-http_ssl_module&lt;</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="Nginx" scheme="https://jxch.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SSL-openssl生成crt证书</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/</id>
    <published>2023-05-05T05:08:11.000Z</published>
    <updated>2023-05-05T05:08:46.584Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成 key</span>openssl genrsa <span class="token parameter variable">-des3</span> <span class="token parameter variable">-out</span> server.key <span class="token number">1024</span><span class="token comment"># 生成 csr</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr<span class="token comment"># 去除密码</span>openssl rsa <span class="token parameter variable">-in</span> server.key <span class="token parameter variable">-out</span> server_nopass.key<span class="token comment"># 生成证书</span>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-signkey</span> server_nopass.key <span class="token parameter variable">-out</span> server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 生成 key&lt;/span&gt;
openssl</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SSL" scheme="https://jxch.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-LBPH-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-lbph-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-lbph-matlab/</id>
    <published>2023-05-05T05:00:54.000Z</published>
    <updated>2023-05-05T05:03:22.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>LBPH，Local Binary Patterns Histograms，即LBP特征的统计直方图，LBPH将LBP特征与图像的空间信息结合在一起。这种表示方法由Ahonen等人在论文中提出，他们将LBP特征图像分成m个局部块，并提取每个局部块的直方图，然后将这些直方图依次连接在一起形成LBP特征的统计直方图，即LBPH。</p><p>一幅图像具体的计算LBPH的过程：</p><ol><li>计算图像的LBP特征图像。</li><li>将LBP特征图像进行分块，Opencv中默认将LBP特征图像分成8行8列64块区域</li><li>计算每块区域特征图像的直方图cell_LBPH，将直方图进行归一化，直方图大小为 <code>1*numPatterns</code></li><li>将上面计算的每块区域特征图像的直方图按分块的空间顺序依次排列成一行，形成LBP特征向量，大小为 <code>1*(numPatterns*64)</code></li><li>用机器学习的方法对LBP特征向量进行训练，用来检测和识别目标</li></ol><p>举例说明LBPH的维度：<br>采样点为8个，如果用的是原始的LBP或Extended LBP特征，其LBP特征值的模式为256种，则一幅图像的LBP特征向量维度为：<code>64*256=16384</code>维，而如果使用的UniformPatternLBP特征，其LBP值的模式为59种，其特征向量维度为：<code>64*59=3776</code>维，可以看出，使用等价模式特征，其特征向量的维度大大减少，这意味着使用机器学习方法进行学习的时间将大大减少，而性能上没有受到很大影响。</p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> result <span class="token operator">=</span> <span class="token function">getLBPH</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> numPatterns<span class="token punctuation">,</span> grid_x<span class="token punctuation">,</span> grid_y<span class="token punctuation">)</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    width <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>cols <span class="token operator">/</span> grid_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    height <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rows <span class="token operator">/</span> grid_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>grid_x <span class="token operator">*</span> grid_y<span class="token punctuation">,</span> numPatterns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>        resultRowIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>grid_x<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>grid_y<span class="token operator">-</span><span class="token number">1</span>            cell <span class="token operator">=</span> <span class="token function">img</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>height<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">*</span>width<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            hist_cell <span class="token operator">=</span> <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numPatterns<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">result</span><span class="token punctuation">(</span>resultRowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span>numPatterns<span class="token punctuation">)</span> <span class="token operator">=</span> hist_cell<span class="token punctuation">;</span>            resultRowIndex <span class="token operator">=</span> resultRowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    result <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span> grid_x<span class="token operator">*</span>grid_y<span class="token operator">*</span>numPatterns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> result <span class="token operator">=</span> <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> minValue<span class="token punctuation">,</span> maxValue<span class="token punctuation">,</span> normed<span class="token punctuation">)</span>    edges <span class="token operator">=</span> <span class="token punctuation">[</span>minValue minValue<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>maxValue maxValue<span class="token punctuation">]</span><span class="token punctuation">;</span>    hist <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> hist<span class="token punctuation">.</span>Values<span class="token punctuation">;</span>        <span class="token keyword">if</span> normed        result <span class="token operator">=</span> <span class="token function">mapminmax</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    result <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> maxValue<span class="token operator">-</span>minValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;LBPH，Local Binary Patterns Histograms，即LBP特征的统计直方图，LBPH将LBP特征与图像的空间信息结合在一起。这种表示方法由Ahonen等人在论文中提出，他们将LBP特征图像分成m个局部块，并提</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-MB-LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-mb-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-mb-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:55:09.000Z</published>
    <updated>2023-05-05T05:00:09.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>将图像分成一个个小块（Block），每个小块再分为一个个的小区域（类似于HOG中的cell），小区域内的灰度平均值作为当前小区域的灰度值，与周围小区域灰度进行比较形成LBP特征，生成的特征称为MB-LBP，Block大小为3*3，则小区域的大小为1，就是原始的LBP特征<br><img src="/static/IT/AI-Face/LBP-MB-1.png" alt="MB-LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getMultiScaleBlockLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> scale<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>       cellSize <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>scale <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>cellSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    im <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>offset<span class="token operator">:</span><span class="token punctuation">(</span>rows<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>offset<span class="token operator">:</span><span class="token punctuation">(</span>cols<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> m<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token operator">:</span>offset                <span class="token keyword">for</span> n<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token operator">:</span>offset                    temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token function">int16</span><span class="token punctuation">(</span><span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            temp <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token punctuation">(</span>cellSize <span class="token operator">*</span> cellSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       temp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span> <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment">%imshow(im)</span>    imglbp <span class="token operator">=</span> <span class="token function">getOriginLBPFeature</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-MB-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-MB-3.png" alt=""></p><p><img src="/static/IT/AI-Face/LBP-MB-4.png" alt="scale = 9 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;将图像分成一个个小块（Block），每个小块再分为一个个的小区域（类似于HOG中的cell），小区域内的灰度平均值作为当前小区域的灰度值，与周围小区域灰度进行比较形成LBP特征，生成的特征称为MB-LBP，Block大小为3*3，则小</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-Uniform Pattern LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-uniform-pattern-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-uniform-pattern-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:50:43.000Z</published>
    <updated>2023-05-05T04:53:13.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>Uniform Pattern，也被称为等价模式或均匀模式，由于一个LBP特征有多种不同的二进制形式，对于半径为R的圆形区域内含有P个采样点的LBP算子将会产生2P种模式。很显然，随着邻域集内采样点数的增加，二进制模式的种类是以指数形式增加的。例如：5×5邻域内20个采样点，有220＝1,048,576种二进制模式。这么多的二进制模式不利于纹理的提取、分类、识别及存取。例如，将LBP算子用于纹理分类或人脸识别时，常采用LBP模式的统计直方图来表达图像的信息，而较多的模式种类将使得数据量过大，且直方图过于稀疏。因此，需要对原始的LBP模式进行降维，使得数据量减少的情况下能最好的表示图像的信息。<br>为了解决二进制模式过多的问题，提高统计性，Ojala提出了采用一种“等价模式”(Uniform Pattern)来对LBP算子的模式种类进行降维。Ojala等认为，在实际图像中，绝大多数LBP模式最多只包含两次从1到0或从0到1的跳变。因此，Ojala将“等价模式”定义为：当某个LBP所对应的循环二进制数从0到1或从1到0最多有两次跳变时，该LBP所对应的二进制就称为一个等价模式类。如00000000(0次跳变)，00000111(只含一次从0到1的跳变)，10001111(先由1跳到0，再由0跳到1，共两次跳变)都是等价模式类。除等价模式类以外的模式都归为另一类，称为混合模式类，例如10010111(共四次跳变)。通过这样的改进，二进制模式的种类大大减少，而不会丢失任何信息。模式数量由原来的2P种减少为 P ( P-1)+2种，其中P表示邻域集内的采样点数。对于3×3邻域内8个采样点来说，二进制模式由原始的256种减少为58种，即：它把值分为59类，58个uniform pattern为一类，其它的所有值为第59类。这样直方图从原来的256维变成59维。这使得特征向量的维数更少，并且可以减少高频噪声带来的影响。<br>具体实现：采样点数目为8个，即LBP特征值有28种，共256个值，正好对应灰度图像的0-255，因此原始的LBP特征图像是一幅正常的灰度图像，而等价模式LBP特征，根据0-1跳变次数，将这256个LBP特征值分为了59类，从跳变次数上划分：跳变0次—2个，跳变1次—0个，跳变2次—56个，跳变3次—0个，跳变4次—140个，跳变5次—0个，跳变6次—56个，跳变7次—0个，跳变8次—2个。共9种跳变情况，将这256个值进行分配，跳变小于2次的为等价模式类，共58个，他们对应的值按照从小到大分别编码为1—58，即它们在LBP特征图像中的灰度值为1—58，而除了等价模式类之外的混合模式类被编码为0，即它们在LBP特征中的灰度值为0，因此等价模式LBP特征图像整体偏暗。</p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getUniformPatternLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%     LBP特征值对应图像灰度编码表，直接默认采样点为8位</span>    temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">255</span>        <span class="token keyword">if</span> <span class="token function">getHoptimes</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span>            <span class="token function">table</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>       <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token keyword">if</span> k <span class="token operator">==</span> neighbors<span class="token operator">-</span><span class="token number">1</span>                    <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> count <span class="token operator">=</span> <span class="token function">getHoptimes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    binaryCode <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">7</span>        i2 <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> i2 <span class="token operator">==</span> <span class="token number">0</span>            i2 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>               <span class="token keyword">if</span> <span class="token function">binaryCode</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">binaryCode</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>            count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-U-1.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-U-2.png" alt="radius=3, neighbors=8 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;Uniform Pattern，也被称为等价模式或均匀模式，由于一个LBP特征有多种不同的二进制形式，对于半径为R的圆形区域内含有P个采样点的LBP算子将会产生2P种模式。很显然，随着邻域集内采样点数的增加，二进制模式的种类是以指数形</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-旋转不变LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-xuan-zhuan-bu-bian-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-xuan-zhuan-bu-bian-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:46:09.000Z</published>
    <updated>2023-05-05T04:49:42.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>不断的旋转圆形邻域内的LBP特征，根据选择得到一系列的LBP特征值，从这些LBP特征值选择LBP特征值最小的作为中心像素点的LBP特征。</p><p><img src="/static/IT/AI-Face/LBP-R-1.jpg" alt="旋转不变 LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getRotationInvariantLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius            currentValue <span class="token operator">=</span> <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minValue <span class="token operator">=</span> currentValue<span class="token punctuation">;</span>            currentValue <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%          循环右移</span>            <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>neighbors                temp <span class="token operator">=</span> <span class="token function">circshift</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> minValue                    minValue <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> minValue<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-R-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-R-3.png" alt="radius=3, neighbors=8 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;不断的旋转圆形邻域内的LBP特征，根据选择得到一系列的LBP特征值，从这些LBP特征值选择LBP特征值最小的作为中心像素点的LBP特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/IT/AI-Face/LBP-R-1.jpg&quot;</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-圆形LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-xing-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-xing-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:36:48.000Z</published>
    <updated>2023-05-05T04:43:29.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>由于原始LBP特征使用的是固定邻域内的灰度值，因此当图像的尺度发生变化时，LBP 特征的编码将会发生错误，LBP 特征将不能正确的反映像素点周围的纹理信息，因此研究人员对其进行了改进。基本的 LBP 算子的最大缺陷在于它只覆盖了一个固定半径范围内的小区域，这显然不能满足不同尺寸和频率纹理的需要。为了适应不同尺度的纹理特征，并达到灰度和旋转不变性的要求，Ojala 等对 LBP 算子进行了改进，将 <code>3×3</code> 邻域扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的 LBP 算子允许在半径为 R 的圆形邻域内有任意多个像素点。从而得到了诸如半径为 R 的圆形区域内含有 P 个采样点的 LBP 算子：</p><p><img src="/static/IT/AI-Face/LBP-C-1.jpg" alt="圆形 LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getCircularLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-C-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-C-3.png" alt="radius=3, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-4.png" alt="radius=2, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-5.png" alt="radius=1, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-6.png" alt="radius=2, neighbors=4 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;由于原始LBP特征使用的是固定邻域内的灰度值，因此当图像的尺度发生变化时，LBP 特征的编码将会发生错误，LBP 特征将不能正确的反映像素点周围的纹理信息，因此研究人员对其进行了改进。基本的 LBP 算子的最大缺陷在于它只覆盖了一个固</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-原始LBP特征计算-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-shi-lbp-te-zheng-ji-suan-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-shi-lbp-te-zheng-ji-suan-matlab/</id>
    <published>2023-05-05T04:29:15.000Z</published>
    <updated>2023-05-05T04:34:56.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LBP-原理">LBP 原理</h2><p>原始的 LBP 算子定义在像素 <code>3*3</code> 的邻域内，以邻域中心像素为阈值，相邻的8个像素的灰度值与邻域中心的像素值进行比较，若周围像素大于中心像素值，则该像素点的位置被标记为 1，否则为 0。这样，<code>3*3</code> 邻域内的 8 个点经过比较可产生8位二进制数，将这 8 位二进制数依次排列形成一个二进制数字，这个二进制数字就是中心像素的 LBP 值，LBP 值共有 28 种可能，因此 LBP 值有 256 种。中心像素的 LBP 值反映了该像素周围区域的纹理信息。<br>备注：计算 LBP 特征的图像必须是灰度图，如果是彩色图，需要先转换成灰度图。</p><p><img src="/static/IT/AI-Face/LBP-1.jpg" alt="LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">OriginLBP</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>rows<span class="token operator">-</span><span class="token number">2</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>cols<span class="token operator">-</span><span class="token number">2</span>            center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> lbpCode<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>     <span class="token function">imshow</span><span class="token punctuation">(</span>imglbp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> flag <span class="token operator">=</span> <span class="token function">compareCenter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">imgG</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span> center         flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>           flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-3.png" alt="效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LBP-原理&quot;&gt;LBP 原理&lt;/h2&gt;
&lt;p&gt;原始的 LBP 算子定义在像素 &lt;code&gt;3*3&lt;/code&gt; 的邻域内，以邻域中心像素为阈值，相邻的8个像素的灰度值与邻域中心的像素值进行比较，若周围像素大于中心像素值，则该像素点的位置被标记为 1，否则为 0。这</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-TCP</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-tcp/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-tcp/</id>
    <published>2023-05-05T03:24:48.000Z</published>
    <updated>2023-05-05T04:18:53.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-最主要的特点">TCP 最主要的特点</h2><ul><li>TCP 是面向连接的运输层协议。</li><li>每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（<strong>一对一</strong>）。</li><li>TCP 提供<strong>可靠交付</strong>的服务。</li><li>TCP 提供<strong>全双工通信</strong>。</li><li><strong>面向字节流</strong>。</li></ul><p>TCP 面向流的概念 ：<br><img src="/static/IT/network/TCP-1.png" alt="TCP 面向流"></p><p>应当注意 ：</p><ul><li>TCP 连接是一条虚连接而不是一条真正的物理连接。</li><li>TCP 对应用进程一次把多长的报文发送到TCP 的缓存中是不关心的。</li><li><strong>TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）。</strong></li><li>TCP 可把太长的数据块划分短一些再传送。</li><li>TCP 也可等待积累有足够多的字节后再构成报文段发送出去。</li></ul><p>TCP 的连接 ：</p><ul><li>TCP 把连接作为最基本的抽象。</li><li>每一条 TCP 连接有两个端点。</li><li>TCP 连接的端点不是主机，不是主机的IP 地址，不是应用进程，也不是运输层的协议端口。<strong>TCP连接的端点叫做套接字(socket)或插口。</strong></li><li><strong>端口号拼接到(contatenated with) IP 地址即构成了套接字。</strong></li></ul><p>套接字 (socket)  ：<br><strong>套接字 socket = (IP地址: 端口号)</strong><br><strong>每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定</strong>。即：<br><strong>TCP 连接 ::= {socket1, socket2} = {(IP1: port1), (IP2: port2)}</strong></p><p><em>同一个名词 socket有多种不同的意思  ：</em></p><ul><li><em>应用编程接口 API 称为 socket API, 简称为 socket。</em></li><li><em>socket API 中使用的一个函数名也叫作 socket。</em></li><li><em>调用socket函数的端点称为 socket。</em></li><li><em>调用socket函数时其返回值称为socket描述符，可简称为socket。</em></li><li><em>在操作系统内核中连网协议的 Berkeley 实现，称为socket 实现。</em></li></ul><hr><h2 id="可靠传输的工作原理">可靠传输的工作原理</h2><h3 id="停止等待协议">停止等待协议</h3><p><img src="/static/IT/network/TCP-2.png" alt="停止等待协议"></p><ul><li>在发送完一个分组后，必须暂时保留已发送的分组的副本。</li><li>分组和确认分组都必须进行编号。</li><li>超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些。</li></ul><p><strong>确认丢失和确认迟到 ：</strong><br><img src="/static/IT/network/TCP-3.png" alt="确认丢失和确认迟到"></p><p>可靠通信的实现 ：使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。 这种可靠传输协议常称为自动重传请求ARQ (Automatic Repeat reQuest)。ARQ 表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组 。</p><p><strong>停止等待协议的优点是简单，但缺点是信道利用率太低。</strong><br><img src="/static/IT/network/TCP-4.png" alt="信道利用率太低"></p><p>U = T<sub>D</sub> / (T<sub>D</sub> + RTT + T<sub>A</sub>)</p><h3 id="流水线传输">流水线传输</h3><p>发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。 由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。<br><img src="/static/IT/network/TCP-5.png" alt="流水线传输"></p><p><strong>连续 ARQ 协议</strong> ：<br><img src="/static/IT/network/TCP-6.png" alt="连续 ARQ 协议"></p><p><strong>累积确认 :</strong><br>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是<strong>对按序到达的最后一个分组发送确认</strong>，这样就表示：到这个分组为止的所有分组都已正确收到了。</p><ul><li>优点是：容易实现，即使确认丢失也不必重传。</li><li>缺点是：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li></ul><p>Go-back-N（<strong>回退</strong> N）:<br>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。 这就叫做 Go-back-N（回退 N），<strong>表示需要再退回来重传已发送过的 N 个分组。可见当通信线路质量不好时，连续 ARQ 协议会带来负面的影响。</strong></p><p>TCP 可靠通信的具体实现 :</p><ul><li><strong>TCP 连接的每一端都必须设有两个窗口：发送窗口和接收窗口。</strong></li><li>TCP 的可靠传输机制用字节的序号进行控制。<strong>TCP 所有的确认都是基于序号而不是基于报文段。</strong></li><li><strong>TCP 两端的四个窗口经常处于动态变化之中。</strong></li><li>TCP连接的往返时间 <strong>RTT</strong> 也不是固定不变的**。需要使用特定的算法估算**较为合理的重传时间。</li></ul><hr><h2 id="TCP-报文段的首部格式">TCP 报文段的首部格式</h2><p><img src="/static/IT/network/TCP-7.png" alt="TCP 报文段的首部格式"></p><ul><li>源端口和目的端口字段——各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</li><li>序号字段——占 4 字节。TCP 连接中传送的<strong>数据流中的每一个字节都编上一个序号</strong>。序号字段的值则指的是<strong>本报文段所发送的数据的第一个字节的序号</strong>。</li><li>确认号字段——占 4 字节，是<strong>期望收到对方的下一报文段的数据的第一个字节的序号。</strong></li><li>数据偏移（即<strong>首部长度</strong>）——占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的<strong>单位是 32 位字（以 4 字节为计算单位）。</strong></li><li>保留字段——占 6 位，保留为今后使用，但<strong>目前应置为 0</strong>。</li><li><strong>6个控制位，用来说明本报文段的性质</strong>。<ul><li>紧急 URG —— 当 URG = 1 时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于<strong>高优先级的数据</strong>)。</li><li>确认 ACK —— 只有<strong>当 ACK = 1 时确认号字段才有效。当 ACK = 0 时，确认号无效。</strong></li><li>推送 PSH (PuSH) —— 接收 TCP 收到 PSH = 1 的报文段，就<strong>尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。</strong></li><li>复位 RST (ReSeT) —— 当 RST = 1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须<strong>释放连接，然后再重新建立运输连接</strong>。</li><li>同步 SYN —— 同步 SYN = 1 表示这是一个<strong>连接请求或连接接受</strong>报文。</li><li>终止 FIN (FINis) —— 用来<strong>释放一个连接</strong>。FIN = 1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。</li></ul></li><li>窗口字段（<strong>发送方的接收窗口</strong>） —— 占 2 字节，用来<strong>让对方设置发送窗口的依据</strong>，单位为字节。</li><li>检验和 —— 占 2 字节。<strong>检验和字段检验的范围包括首部和数据这两部分</strong>。<strong>在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。</strong></li><li>紧急指针字段 —— 占 16 位，<strong>指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面，只有URG=1时该项才有意义）。</strong></li><li>选项字段——<strong>长度可变</strong>。<ul><li>最大报文段长度MSS——TCP最初只规定了一种选项，即最大报文段长度MSS(Maximum Segment Size)，<strong>仅指TCP 报文段中的数据字段的最大长度</strong>。</li><li>窗口扩大选项 ——占 3 字节，其中有一个字节表示移位值 S。新的窗口值等于TCP 首部中的<strong>窗口位数增大到(16 + S)</strong>，相当于把窗口值向左移动 S 位后获得实际的窗口大小。</li><li>时间戳选项——占10 字节，其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节）。 <strong>计算RTT和防止序号绕回</strong>。</li><li>选择确认选项——在后面的<strong>选择确认 SACK</strong>介绍。</li></ul></li><li>填充字段 —— 这是<strong>为了使整个首部长度是 4 字节的整数倍</strong>。</li></ul><hr><h2 id="TCP-可靠传输的实现">TCP 可靠传输的实现</h2><p><strong>以字节为单位的滑动窗口</strong></p><p>A向B发送数据：</p><ul><li><strong>根据 B 给出的窗口值A 构造出自己的发送窗口。<em>TCP 标准强烈不赞成发送窗口前沿向后收缩</em>。</strong><br><img src="/static/IT/network/TCP-8.png" alt=""></li><li>A 发送了 11 个字节的数据<br><img src="/static/IT/network/TCP-9.png" alt=""><ul><li>P3 – P1 = A 的发送窗口（又称为通知窗口）</li><li>P2 – P1 = 已发送但尚未收到确认的字节数</li><li>P3 – P2 = 允许发送但尚未发送的字节数（又称为可用窗口）</li></ul></li><li>A 收到新的确认号，发送窗口向前滑动<br><img src="/static/IT/network/TCP-10.png" alt=""></li><li>A 的发送窗口内的序号都已用完，但还没有再收到确认，必须停止发送。<br><img src="/static/IT/network/TCP-11.png" alt=""></li></ul><p>发送缓存 ：<br><img src="/static/IT/network/TCP-12.png" alt="发送缓存"><br>接收缓存 ：<br><img src="/static/IT/network/TCP-13.png" alt="接收缓存"></p><p>发送缓存与接收缓存的作用 ：</p><ul><li>发送缓存用来暂时存放：<ul><li><strong>发送应用程序传送给发送方 TCP 准备发送的数据；</strong></li><li><strong>TCP 已发送出但尚未收到确认的数据。</strong></li></ul></li><li>接收缓存用来暂时存放：<ul><li><strong>按序到达的、但尚未被接收应用程序读取的数据；</strong></li><li><strong>不按序到达的数据。</strong></li></ul></li></ul><p>需要强调三点 ：</p><ul><li><strong>A 的发送窗口并不总是和 B 的接收窗口一样大</strong>（因为有一定的时间滞后）。</li><li><strong>TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</strong></li><li>TCP 要求<strong>接收方必须有累积确认的功能，这样可以减小传输开销</strong>。</li></ul><hr><h2 id="超时重传时间的选择">超时重传时间的选择</h2><p>重传机制是 TCP 中最重要和最复杂的问题之一。<strong>TCP 每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段。</strong></p><h3 id="加权平均往返时间">加权平均往返时间</h3><p>TCP 保留了 RTT 的一个加权平均往返时间 RTT<sub>s</sub>（这又称为平滑的往返时间）。<br><strong>第一次测量到 RTT 样本时，RTT<sub>s</sub> 值就取为所测量到的 RTT 样本值</strong>。以后每测量到一个新的 RTT 样本，就按下式重新计算一次 RTT<sub>s</sub>：<br><strong>新的 RTT<sub>s</sub> = (1 - a) * (旧的 RTT<sub>s</sub>)  + a * (新的 RTT 样本)</strong><br>式中，0 ≤ a &lt; 1。若 <strong>a 很接近于零，表示 RTT 值更新较慢。若选择 a 接近于 1，则表示 RTT 值更新较快。</strong><br>RFC 2988 推荐的 a 值为 <strong>1/8</strong>，即 0.125。</p><h3 id="超时重传时间">超时重传时间</h3><p><strong>超时重传时间 RTO (RetransmissionTime-Out)</strong>: RTO 应略大于上面得出的加权平均往返时间 RTT<sub>s</sub>。 RFC 2988 建议使用下式计算 RTO：<br><strong>RTO = RTT<sub>s</sub> + 4 * RTT<sub>D</sub></strong><br>RTT<sub>D</sub> 是 RTT 的偏差的加权平均值。<br>RFC 2988 建议这样计算 RTT<sub>D</sub>。第一次测量时，<strong>RTT<sub>D</sub> 值取为测量到的 RTT 样本值的一半</strong>。在以后的测量中，则使用下式计算加权平均的 RTT<sub>D</sub>：<br><strong>新的 RTT<sub>D</sub> = (1 - β) * (旧的RTT<sub>D</sub>)  + β * | RTT<sub>S</sub> - 新的 RTT 样本|</strong>          <br>β是个小于 1 的系数，其推荐值是 <strong>1/4</strong>，即 0.25。</p><p>往返时间的测量相当复杂 ：TCP 报文段 1 没有收到确认。重传（即报文段 2）后，收到了确认报文段 ACK。如何判定此确认报文段是对原来的报文段 1 的确认，还是对重传的报文段 2 的确认？<br><img src="/static/IT/network/TCP-14.png" alt="超时重传"></p><h3 id="Karn算法">Karn算法</h3><p>在计算平均往返时间 RTT 时，只要报文段重传了，就不采用其往返时间样本。 这样得出的加权平均往返时间 RTT<sub>S</sub> 和超时重传时间 RTO 就较准确。</p><p>报文段每重传一次，就把 RTO 增大一些：<br>**新的 RTO = γ * (旧的 RTO)       **<br><strong>系数 γ 的典型值是 2 。</strong><br>当不再发生报文段的重传时，才根据报文段的往返时延更新平均往返时延 RTT 和超时重传时间 RTO 的数值。实践证明，这种策略较为合理。</p><h3 id="选择确认">选择确认</h3><p><strong>选择确认 SACK (Selective ACK)</strong>: 接收方收到了和前面的字节流不连续的两个字节块。 如果这些字节的序号都在接收窗口之内，那么接收方就先收下这些数据，但要把这些信息准确地告诉发送方，使发送方不要再重复发送这些已收到的数据。<br>接收到的字节流序号不连续 ：<br><img src="/static/IT/network/TCP-15.png" alt="选择确认"></p><p>和前后字节不连续的每一个字节块都有两个边界： 左边界和右边界。图中用四个指针标记这些边界。<br>第一个字节块的左边界 L1 = 1501，但右边界 R1 = 3001。<br>左边界指出字节块的第一个字节的序号，但右边界减 1 才是 字节块中的最后一个序号。<br>第二个字节块的左边界 L2 = 3501，而右边界 R2 = 4501。</p><p><strong>如果要使用选择确认，那么在建立 TCP 连接时，就要在 TCP 首部的选项中加上“允许 SACK”的选项，而双方必须都事先商定好。 如果使用选择确认，那么原来首部中的“确认号字段“的用法仍然不变。只是以后在 TCP 报文段的首部中都增加了 SACK 选项，以便报告收到的不连续的字节块的边界。 由于首部选项的长度最多只有 40 字节，而指明一个边界就要用掉 4 字节，因此<em>在选项中最多只能指明 4 个字节块的边界信息。</em></strong></p><hr><h2 id="TCP-的流量控制">TCP 的流量控制</h2><p><strong>利用滑动窗口实现流量控制 ：</strong><br>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。流量控制(flow control)就是<strong>让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞</strong>。利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。</p><h3 id="流量控制">流量控制</h3><p>流量控制举例: A 向 B 发送数据。在连接建立时， B 告诉 A：“我的接收窗口 rwnd = 400（字节）”<br><img src="/static/IT/network/TCP-16.png" alt="流量控制"><br>B发送零窗口后，若其接收缓存又有空间了，则会？ 比如：B会向A发送一个rwnd=400的报文，重新请求A向自己发送报文。<br><strong>若rwnd=400的报文丢失会出现什么问题？</strong> 使用持续计时器机制。<br><strong>持续计时器 (persistence timer) ：</strong></p><ul><li><strong>TCP 为每一个连接设有一个持续计时器</strong>。</li><li><strong>只要 TCP 连接的一方收到对方的零窗口通知，就启动持续计时器。</strong></li><li><strong>若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。</strong></li><li><strong>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。若窗口不是零，则死锁的僵局就可以打破了。</strong></li></ul><h3 id="传输效率">传输效率</h3><p>可以用不同的机制来控制 TCP 报文段的发送时机:</p><ul><li><strong>第一种机制是 TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP报文段发送出去。</strong></li><li><strong>第二种机制是由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送(push)操作。</strong></li><li><strong>第三种机制是发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。</strong></li><li>Nagle算法（发送方何时发送数据好）<ul><li>当发送应用进程把要发送的数据逐个字节的送到TCP发送缓存时，发送方就把第一个字节发出，把后面到达的数据缓存起来。<strong>直到发送方收到对第一个字节的确认后，再把缓存中的所有数据组成一个报文发送出去。</strong></li><li><strong>适合数据到达快，而网络速率慢的情况，可明显减少网络带宽的使用。</strong></li><li><strong>当到达的数据已达到发送窗口一半或最大报文长度时，就立即发送一个报文段。</strong></li></ul></li><li>糊涂窗口综合症（接收方何时发回确认更好）<ul><li><strong>在接收方缓存已满的情况下，接收方应用进程每次只从接收缓存中取走一个字节。此时若马上发出确认，会使网络效率很低。</strong></li><li><strong>可让接收方等待一段时间，使得接收缓存已有足够空间容纳一个最长报文段或者等到接收缓存已有一半空闲空间时再发出确认。</strong></li></ul></li><li><strong>使得发送方不发送很小报文，接收方也不要在缓存刚刚有了一点小的空间时就急着把这个很小的窗口信息发给发送方。</strong></li></ul><hr><h2 id="TCP的拥塞控制">TCP的拥塞控制</h2><p>拥塞：在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生拥塞(congestion)。<br>出现资源拥塞的条件： <strong>对资源需求的总和 &gt; 可用资源</strong><br>若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。</p><p>拥塞控制与流量控制的关系：拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。 流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制。 <strong>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</strong></p><p>拥塞控制所起的作用 ：<br><img src="/static/IT/network/TCP-17.png" alt="拥塞控制"></p><p>拥塞控制的一般原理：拥塞控制是很难设计的，因为它是一个动态的（而不是静态的）问题。 当前网络正朝着高速化的方向发展，这很容易出现缓存不够大而造成分组的丢失。<strong>但分组的丢失是网络发生拥塞的征兆而不是原因</strong>。 在许多情况下，<strong>甚至正是拥塞控制本身成为引起网络性能恶化甚至发生死锁的原因</strong>。这点应特别引起重视。</p><p>开环控制和闭环控制 :</p><ul><li>开环控制方法就是<strong>在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不产生拥塞。</strong></li><li>闭环控制是基于<strong>反馈环路</strong>的概念。属于闭环控制的有以下几种措施：<ul><li>监测网络系统以便检测到拥塞在何时、何处发生。</li><li>将拥塞发生的信息传送到可采取行动的地方。</li><li>调整网络系统的运行以解决出现的问题。</li></ul></li></ul><h3 id="慢开始和拥塞避免">慢开始和拥塞避免</h3><p><strong>发送方维持一个叫做拥塞窗口cwnd (congestion window)的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化</strong>。发送方让自己的发送窗口等于拥塞窗口。如再考虑到接收方的接收能力，则<strong>发送窗口还可能小于拥塞窗口</strong>。 发送方控制拥塞窗口的原则是：<strong>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</strong></p><h4 id="慢开始算法">慢开始算法</h4><p>在主机刚刚开始发送报文段时可先设置拥塞窗口 cwnd = 1，即设置为一个最大报文段 MSS 的数值。在<strong>每收到一个对新的报文段的确认后，将拥塞窗口加 1</strong>，即增加一个 MSS 的数值。 用这样的方法逐步增大发送端的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。<br>发送方每收到一个对新报文段的确认 （重传的不算在内）就使 cwnd 加 1 倍。<br><img src="/static/IT/network/TCP-18.png" alt="慢开始算法"></p><p><strong>传输轮次</strong> (transmission round) :<br><strong>使用慢开始算法后，<em>每经过一个传输轮次，拥塞窗口 cwnd 就加倍</em>。</strong><br><strong>一个传输轮次所经历的时间其实就是往返时间 RTT</strong>。 <strong>“传输轮次”更加强调：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。</strong><br><strong>例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。</strong></p><h4 id="拥塞避免算法">拥塞避免算法</h4><p>**拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍，**使拥塞窗口 cwnd 按线性规律缓慢增长。</p><p>设置<strong>慢开始门限状态变量ssthresh</strong> :</p><h4 id="慢开始门限">慢开始门限</h4><p>慢开始门限 ssthresh 的用法如下</p><ul><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</li></ul><p>当网络出现拥塞时 ：<br>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断<strong>网络出现拥塞（其根据就是没有按时收到确认</strong>），就要把慢开始门限 <strong>ssthresh 设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口 cwnd 重新设置为1，执行慢开始算法</strong>。<br>这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><h4 id="算法">算法</h4><p>慢开始和拥塞避免算法的实现举例 ：<br><img src="/static/IT/network/TCP-19.png" alt="慢开始和拥塞避免算法"></p><ul><li>当 TCP 连接进行初始化时，将拥塞窗口置为 1。图中的<strong>窗口单位不使用字节而使用报文段</strong>。 慢开始门限的初始值设置为 16 个报文段，即ssthresh = 16。</li><li><strong>发送端的发送窗口不能超过拥塞窗口 cwnd 和接收端窗口 rwnd 中的最小值</strong>。我们假定接收端窗口足够大，因此现在发送窗口的数值等于拥塞窗口的数值。</li><li>在执行慢开始算法时，拥塞窗口 cwnd 的初始值为 1，发送第一个报文段 M0。</li><li>发送端每收到一个确认 ，就把 cwnd 加 1。于是发送端可以接着发送 M1 和 M2 两个报文段。</li><li><strong>接收端共发回两个确认</strong>。<strong>发送端每收到一个对新报文段的确认，就把发送端的 cwnd 加 1</strong>。现在 cwnd 从 2 增大到 4，并可接着发送后面的 4 个报文段。</li><li>发送端每收到一个对新报文段的确认，就把发送端的拥塞窗口加 1，因此<strong>拥塞窗口 cwnd 随着传输轮次按指数规律增长</strong>。</li><li><strong>当拥塞窗口 cwnd 增长到慢开始门限值 ssthresh 时</strong>（即当 cwnd = 16 时），<strong>就改为执行拥塞避免算法，拥塞窗口按线性规律增长</strong>。</li><li>假定拥塞窗口的数值增长到 24 时，网络出现超时，表明<strong>网络拥塞</strong>了。</li><li>更新后的 <strong>ssthresh 值变为 12（即发送窗口数值 24 的一半），拥塞窗口再重新设置为 1，并执行慢开始算法</strong>。</li><li>当 cwnd = 12 时改为执行拥塞避免算法，拥塞窗口按线性规律增长，每经过一个往返时延就增加一个 MSS 的大小。</li></ul><h4 id="原理">原理</h4><ul><li><strong>乘法减小 (multiplicative decrease) ：</strong><ul><li>”乘法减小“是指不论在慢开始阶段还是拥塞避免阶段，<strong>只要出现一次超时（即出现一次网络拥塞），就把慢开始门限值 ssthresh设置为当前的拥塞窗口值乘以0.5</strong>。</li><li>当网络频繁出现拥塞时，ssthresh 值就下降得很快，以大大减少注入到网络中的分组数。</li></ul></li><li><strong>加法增大 (additive increase) ：</strong><ul><li>“加法增大”是指执行拥塞避免算法后，<strong>在收到对所有报文段的确认后（即经过一个往返时间），就把拥塞窗口cwnd增加一个MSS大小</strong>。</li><li>使拥塞窗口缓慢增大，以防止网络过早出现拥塞。</li></ul></li></ul><p><strong>“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的</strong>。“拥塞避免”是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</p><h3 id="快重传和快恢复">快重传和快恢复</h3><h4 id="快重传">快重传</h4><ul><li><strong>快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认</strong>。这样做可以让发送方及早知道有报文段没有到达接收方。 <strong>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段</strong>。</li><li>不难看出，**快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。**快重传可以避免发送方误认为出现了网络拥塞。可将整个网络的吞吐量提高约20%。</li></ul><p><img src="/static/IT/network/TCP-20.png" alt="快重传"></p><h4 id="快恢复算法">快恢复算法</h4><ul><li><strong>当发送端收到连续三个重复的确认时，就执行“乘法减小”算法，把慢开始门限 ssthresh 减半。但接下去不执行慢开始算法</strong>。</li><li>由于<strong>发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，即拥塞窗口 cwnd 现在不设置为 1，而是设置为慢开始门限 ssthresh 减半后的数值，然后开始执行拥塞避免算法（“加法增大”）</strong>，使拥塞窗口缓慢地线性增大。</li></ul><p>从连续收到三个重复的确认转入拥塞避免  ：<br><img src="/static/IT/network/TCP-21.png" alt="快恢复"></p><h3 id="发送窗口的上限值">发送窗口的上限值</h3><p>发送方的发送窗口的上限值应当取为接收方窗口 rwnd 和拥塞窗口 cwnd 这两个变量中较小的一个，<br>即应按以下公式确定：<br><strong>发送窗口的上限值 = Min [rwnd, cwnd]</strong></p><ul><li>当 rwnd &lt; cwnd 时，是接收方的接收能力限制发送窗口的最大值。</li><li>当 cwnd &lt; rwnd 时，则是网络的拥塞限制发送窗口的最大值。</li></ul><h3 id="随机早期检测">随机早期检测</h3><p>随机早期检测 RED (Random Early Detection)<br>TCP拥塞控制和网络层采取的策略有密切联系。<br>路由器缓存队列采用的尾部丢弃策略，可能导致“全局同步”现象。</p><ul><li>使路由器的队列维持两个参数，即队列长度<strong>最小门限 THmin 和最大门限 THmax</strong>。</li><li>RED <strong>对每一个到达的数据报都先计算平均队列长度 LAV</strong>。<ul><li>若平均队列长度小于最小门限THmin，则<strong>将新到达的数据报放入队列进行排队</strong>。</li><li>若平均队列长度超过最大门限THmax，则<strong>将新到达的数据报丢弃</strong>。</li><li>若平均队列长度在最小门限THmin 和最大门限THmax之间，则<strong>按照某一概率 p 将新到达的数据报丢弃</strong>。</li></ul></li></ul><p><strong>RED 将路由器的到达队列划分成为三个区域 ：</strong><br><img src="/static/IT/network/TCP-22.png" alt="到达队列"></p><p>丢弃概率 p 与 THmin 和 Thmax 的关系 ：</p><ul><li>当 LAV &lt; Thmin 时，丢弃概率 p = 0。</li><li>当 LAV &gt; Thmax 时，丢弃概率 p = 1。</li><li>当 THmin &lt; LAV &lt; THmax时， 0 &lt; p &lt; 1 。</li></ul><p>例如，按线性规律变化，从 0 变到 pmax。<br><img src="/static/IT/network/TCP-23.png" alt=""></p><p>瞬时队列长度和平均队列长度的区别  :<br><img src="/static/IT/network/TCP-24.png" alt=""></p><hr><h2 id="TCP-的运输连接管理">TCP 的运输连接管理</h2><p>运输连接就有三个阶段，即：<strong>连接建立、数据传送和连接释放</strong>。运输连接的管理就是使运输连接的建立和释放都能正常地进行。 连接建立过程中要解决以下三个问题：</p><ul><li>要使每一方能够确知对方的存在。</li><li>要允许双方协商一些参数（如最大报文段长度，最大窗口大小，服务质量等）。</li><li>能够对运输实体资源（如缓存大小，连接表中的项目等）进行分配。</li></ul><p>TCP 连接的建立都是采用客户服务器方式。 主动发起连接建立的应用进程叫做客户(client)。    被动等待连接建立的应用进程叫做服务器(server)。</p><h3 id="TCP-的连接">TCP 的连接</h3><p><strong>用三次握手建立 TCP 连接 :</strong><br><img src="/static/IT/network/TCP-28.png" alt="用三次握手建立 TCP 连接"></p><ol><li>A 的 TCP 向 B 发出<strong>连接请求报文段</strong>，其首部中的同步位 <strong>SYN = 1</strong>，并选择序号 <strong>seq =   x</strong>，表明传送数据时的第一个数据字节的序号是 x。</li><li><strong>B</strong> 的 TCP 收到连接请求报文段后，如<strong>同意，则发回确认</strong>。<br>B 在<strong>确认报文段中</strong>应使 <strong>SYN = 1</strong>，使 <strong>ACK = 1</strong>， 其确认号<strong>ack = x + 1</strong>，<strong>自己选择的序号 seq = y</strong>。</li><li><strong>A 收到此报文段后向 B 给出确认</strong>，其 <strong>ACK = 1</strong>，确认号 <strong>ack = y + 1</strong>。 <strong>A 的 TCP 通知上层应用进程，连接已经建立</strong>。</li><li><strong>B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立</strong>。</li></ol><p><strong>用四次握手释放 TCP 连接 :</strong><br><img src="/static/IT/network/TCP-26.png" alt="用四次握手释放 TCP 连接"></p><ol><li><strong>数据传输结束后，通信的双方都可释放连接</strong>。  现在 <strong>A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP连接。</strong><br><strong>A 把连接释放报文段首部的 FIN = 1，其序号 seq = u，等待 B 的确认。</strong></li><li><strong>B 发出确认，确认号 ack = u + 1</strong>，而这个报文段自己的序号 <strong>seq = v</strong>。<br><strong>TCP服务器进程通知高层应用进程</strong>。<strong>从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。B 若发送数据，A仍要接收。</strong></li><li><strong>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。</strong></li><li>**A 收到连接释放报文段后，必须发出确认。**在确认报文段中 <strong>ACK = 1</strong>，确认号 <strong>ack = w + 1</strong>， 自己的序号 <strong>seq = u + 1</strong>。</li><li><strong>TCP 的连接释放连接必须经过时间 2MSL 后才真正释放掉。</strong><ul><li>第一，<strong>为了保证 A 发送的最后一个 ACK 报文段能够到达 B。</strong></li><li>第二，<strong>防止“已失效的连接请求报文段”出现在本连接中</strong>。A 在发送完最后一个 ACK 报文段后，再<strong>经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失</strong>。这样就可以使<strong>下一个新的连接中不会出现这种旧的连接请求报文段</strong>。</li><li><strong>MSL ： 最长报文段寿命，RFC793建议设置为2分钟</strong>。TCP允许不同的实现根据具体情况使用更小的MSL值。本例中要经过4分钟才能进入CLOSED状态。</li></ul></li></ol><h3 id="保活计时器（keepalive-timer">保活计时器（keepalive timer)</h3><p>除了等待计时器外，TCP连接中还有保活计时器来应对客户端突然出现故障的情况。通常设为两小时，之后每隔75分钟发送一次，连续发10个探测报文后，若客户端仍无响应，则服务器关闭此连接。</p><p>可根据服务器的这一特点进行洪泛法攻击，用多台服务器通时对一台服务器全功率的不间断的发起不同的TCP链接，因为目标服务器对每个TCP链接都建立一个保活计时器，所以目标服务器不能及时释放这些无用的链接，这些无用的链接会占满目标服务器的资源，严重影响目标服务器的性能，甚至导致崩溃。目前还没有方法能够完美的防御这种攻击。</p><h3 id="TCP-的有限状态机">TCP 的有限状态机</h3><ul><li>TCP 有限状态机的图中每一个方框都是 TCP 可能具有的状态。</li><li>每个方框中的大写英文字符串是 TCP 标准所使用的 TCP 连接状态名。状态之间的箭头表示可能发生的状态变迁。</li><li>箭头旁边的字，表明引起这种变迁的原因，或表明发生状态变迁后又出现什么动作。</li><li>图中有三种不同的箭头。<ul><li>粗实线箭头表示对客户进程的正常变迁。 </li><li>粗虚线箭头表示对服务器进程的正常变迁。</li><li>另一种细线箭头表示异常变迁。</li></ul></li></ul><p><img src="/static/IT/network/TCP-27.png" alt="TCP 的有限状态机"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP-最主要的特点&quot;&gt;TCP 最主要的特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是面向连接的运输层协议。&lt;/li&gt;
&lt;li&gt;每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（&lt;strong&gt;一对一&lt;/strong&gt;）。&lt;</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-信道复用技术</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-dao-fu-yong-ji-zhu/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-dao-fu-yong-ji-zhu/</id>
    <published>2023-05-05T03:13:46.000Z</published>
    <updated>2023-05-05T03:22:43.331Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/IT/network/xindaofuyong-1.png" alt="对比"></p><p>复用的类型：</p><ol><li>频分复用、时分复用和统计时分复用</li><li>波分复用 WDM</li><li>码分复用 CDM</li></ol><hr><h2 id="频分复用">频分复用</h2><p><strong>频分复用</strong> FDM (Frequency Division Multiplexing)<br>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<strong>频分复用的所有用户在同样的时间占用不同的带宽资源</strong>（请注意，<em>这里的“带宽”是频率带宽而不是数据的发送速率</em>）。</p><h2 id="时分复用">时分复用</h2><p><strong>时分复用</strong> TDM (Time Division Multiplexing)<br>时分复用则是将时间划分为一段段等长的时分复用帧（TDM帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。 每一个用户所占用的时隙是周期性地出现（<em>其周期就是 TDM  帧的长度</em>）。 TDM 信号也称为<em>等时</em>(isochronous)信号。 <strong>时分复用的所有用户是在不同的时间占用同样的频带宽度</strong>。<br><strong>时分复用可能会造成线路资源的浪费</strong> ：使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。<br><img src="/static/IT/network/xindaofuyong-2.png" alt="时分复用"></p><h2 id="统计时分复用">统计时分复用</h2><p><strong>统计时分复用</strong> STDM (Statistic TDM)<br>统计时分复用是一种改进的时分复用。<br><img src="/static/IT/network/xindaofuyong-3.png" alt="统计时分复用"></p><hr><h2 id="波分复用">波分复用</h2><p><strong>波分复用</strong> WDM (Wavelength Division Multiplexing)<br>波分复用就是<em>光的频分复用</em>。<br><img src="/static/IT/network/xindaofuyong-4.png" alt="波分复用"></p><hr><h2 id="码分复用">码分复用</h2><p><strong>码分复用</strong> CDM (Code Division Multiplexing)<br>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。 <em>各用户使用经过特殊挑选的不同码型</em>，因此彼此不会造成干扰。 这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。  每一个比特时间划分为m个短的间隔，称为<strong>码片</strong>(chip)。</p><p><strong>每个站被指派一个唯一的 m bit 码片序列。</strong></p><ul><li>如发送比特 1，则发送自己的 m bit 码片序列。</li><li>如发送比特 0，则发送该码片序列的二进制反码。</li></ul><p>例如，S 站的 8 bit 码片序列是 00011011。</p><ul><li>发送比特 1 时，就发送序列 00011011，</li><li>发送比特 0 时，就发送序列 11100100。</li></ul><p><em>S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1)</em></p><p>每个站分配的码片序列不仅必须<strong>各不相同</strong>，并且还必须<strong>互相正交</strong>(orthogonal)。在实用的系统中是使用<strong>伪随机码序列</strong>。</p><p><strong>码片序列的正交关系</strong> ：<br>令向量 S 表示站 S 的码片向量，令 T 表示其他任何站的码片向量。两个不同站的码片序列<strong>正交</strong>，就是向量 S 和 T 的<strong>规格化内积</strong>(inner product)都是 0：<br><img src="/static/IT/network/xindaofuyong-5.png" alt=""></p><p>例如：令向量 S 为(–1 –1 –1 +1 +1 –1 +1 +1)，向量 T 为(–1 –1 +1 –1 +1 +1 +1 –1)。  把向量 S 和 T 的各分量值代入上式就可看出这两个码片序列是正交的。</p><p><em>任何一个码片向量和该码片向量自己的规格化内积都是1 。 一个码片向量和该码片反码的向量的规格化内积值是 –1。</em><br><img src="/static/IT/network/xindaofuyong-6.png" alt=""></p><p><strong>CDMA 的工作原理</strong>：<br><img src="/static/IT/network/xindaofuyong-7.png" alt="CDMA"></p><hr><h2 id="例题">例题</h2><p>共有四个站进行码分多址CDMA通信，四个站的码片序列为：<br>A:(-1-1-1+1+1-1+1+1)<br>B:(-1-1+1-1+1+1+1-1)<br>C:(-1+1-1+1+1+1-1-1)<br>D:(-1+1-1- 1- 1-1+1-1)<br>现收到这样的码片序列S：(-1+1-3+1-1-3+1+1)。问哪个站发送数据了？发送数据的站发送的是1还是0？</p><p><strong>S·A</strong> = (+1-1+3+1-1+3+1+1) / 8 = 1 。A发送的是1。<br><strong>S·B</strong> = (+1-1- 3- 1- 1-3+1-1)  / 8 = -1 。B发送的是0。<br><strong>S·C</strong> = (+1+1+3+1- 1-3- 1-1) / 8 = 0 。C无发送。<br><strong>S·D</strong> = (+1+1+3-1+1+3+1-1) / 8 = 1 。D发送的是1。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/static/IT/network/xindaofuyong-1.png&quot; alt=&quot;对比&quot;&gt;&lt;/p&gt;
&lt;p&gt;复用的类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;频分复用、时分复用和统计时分复用&lt;/li&gt;
&lt;li&gt;波分复用 WDM&lt;/li&gt;
&lt;li&gt;码分复用 CD</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-信道的编码与调制</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-dao-de-bian-ma-yu-diao-zhi/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-dao-de-bian-ma-yu-diao-zhi/</id>
    <published>2023-05-05T03:02:44.000Z</published>
    <updated>2023-05-05T03:12:09.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通信">通信</h2><ul><li><strong>单向通信</strong>（单工通信）：只能有一个方向的通信而没有反方向的交互。</li><li><strong>双向交替通信</strong>（半双工通信）：通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li><strong>双向同时通信</strong>（全双工通信）：通信的双方可以同时发送和接收信息。</li></ul><hr><h2 id="信号">信号</h2><p><strong>基带</strong>(baseband)信号和<strong>带通</strong>(band pass)信号：</p><ul><li>基带信号（即基本频带信号）：来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。 基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。<strong>因此必须对基带信号进行调制</strong>(modulation)。这个调制称为基带调制，这种调制是<strong>把数字信号转换为另一种形式的数字信号</strong>，因此这个过程也叫做<strong>编码</strong>。</li><li>带通信号：把基带信号经过<strong>载波调制</strong>后，把信号的频率范围搬移到较高的频段以便在信道中传输 <em>（即仅在一段频率范围内能够通过信道）</em>。这个调制称为带通调制。</li></ul><h2 id="编码">编码</h2><p><strong>几种常用编码方式</strong>（数字信号）：</p><ul><li><strong>不归零制</strong> ：正电平代表1，负电平代表0。</li><li><strong>归零制</strong> ：正脉冲代表1，负脉冲代表0。</li><li><strong>曼彻斯特编码</strong> ：位周期中心的向上跳变代表0，位周期中心的向下跳变代表1。但也可反过来定义。</li><li><strong>差分曼彻斯特编码</strong> ：在每一位的中心处始终都有跳变。位开始边界有跳变代表0，而位开始边界有没有跳变代表1。</li></ul><p><em>曼彻斯特编码有自同步能力，可有从信号波形本身提取信号时钟频率。</em><br><img src="/static/IT/network/xindao-1.png" alt="几种常用编码方式"></p><hr><h2 id="调制">调制</h2><p><strong>几种最基本的调制方法</strong>：</p><ul><li>调幅(AM)：载波的振幅随基带数字信号而变化。</li><li>调频(FM)：载波的频率随基带数字信号而变化。</li><li>调相(PM) ：载波的初始相位随基带数字信号而变化。</li><li>正交振幅调制 QAM (Quadrature Amplitude Modulation)</li></ul><p><img src="/static/IT/network/xindao-2.png" alt="几种最基本的调制方法"></p><p>正交振幅调制（举例）:</p><ul><li>可供选择的相位有 12 种，而对于每一种相位有 1 或 2 种振幅可供选择。</li><li>由于4 bit 编码共有16 种不同的组合，因此这 16 个点中的每个点可对应于一种 4 bit 的编码。</li><li>若每一个码元可表示的比特数越多，则在接收端进行解调时要正确识别每一种状态就越困难。</li></ul><p><img src="/static/IT/network/xindao-3.png" alt="正交振幅调制"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通信&quot;&gt;通信&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单向通信&lt;/strong&gt;（单工通信）：只能有一个方向的通信而没有反方向的交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双向交替通信&lt;/strong&gt;（半双工通信）：通信的双方都可以发送信息，但不能双方同时发送</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-信噪比/香农公式</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-zao-bi-xiang-nong-gong-shi/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-zao-bi-xiang-nong-gong-shi/</id>
    <published>2023-05-05T02:55:44.000Z</published>
    <updated>2023-05-05T03:01:33.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信噪比">信噪比</h2><p><strong>信噪比</strong>就是<strong>信号的平均功率和噪声的平均功率之比</strong>，即：<strong><code>S/N</code></strong>。<br>用分贝<code>(dB)</code>作为度量单位，即：信噪比 (dB)= 10 * log<sub>10</sub>(S/N) (dB)`<br>例如：当S/N=10时，信噪比为10dB；当S/N=1000时，信噪比为30dB。</p><hr><h2 id="香农公式">香农公式</h2><p>香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。<br>信道的<strong>极限信息传输速率 C</strong> 可表达为<br><strong>C = W log<sub>2</sub>(1+S/N) b/s</strong></p><ul><li>W 为信道的带宽（以 Hz 为单位）</li><li>S 为信道内所传信号的平均功率</li><li>N 为信道内部的高斯噪声功率</li></ul><p>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。  只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。  <em>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。</em></p><hr><p>对于频带宽度已确定的信道，如果信噪比不能再提高了，并且码元传输速率也达到了上限值，那么还有办法提高信息的传输速率吗？<br><strong>可用编码的方法，让每一个码元携带更多比特的信息量。</strong></p><hr><h2 id="例题">例题</h2><p>用香农公式计算一下，假定信道带宽为3100Hz，最大信息传输速率为35Kbit/s，那么若想使最大信息传输速率增加60%。问信噪比S/N应增大到多少倍，如果在刚才计算出的基础上将信噪比再增大到10倍，问最大信息速率能否再增加20%？</p><p><strong>C = W log<sub>2</sub>(1+S/N) b/s</strong><br><strong>S/N = 2 <sup>C/W</sup> -  1</strong><br>(S/N)<sub>1</sub> = 2<sup>35000/3100</sup> - 1 = 2504<br>(S/N)<sub>2</sub> = 2<sup>1.6 * 35000/3100</sup> - 1 = 274132<br>(S/N)<sub>2</sub> <strong>/</strong> (S/N)<sub>1</sub> 约等于 100。信噪比要增大到约100倍。<br>C<sub>2</sub>  = W log<sub>2</sub>(1+ (S/N)<sub>2</sub>)<br>C<sub>3</sub> = W log<sub>2</sub>(1 + (S/N)<sub>3</sub>) = W log<sub>2</sub>(1+10 * (S/N)<sub>2</sub>)<br>(C<sub>3</sub> - C<sub>2</sub>) <strong>/</strong> C<sub>2</sub> = 18.5%<br>最大信息速率只能增加18.5%。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信噪比&quot;&gt;信噪比&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;信噪比&lt;/strong&gt;就是&lt;strong&gt;信号的平均功率和噪声的平均功率之比&lt;/strong&gt;，即：&lt;strong&gt;&lt;code&gt;S/N&lt;/code&gt;&lt;/strong&gt;。&lt;br&gt;
用分贝&lt;code&gt;(dB)&lt;/co</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-数据链路层帧传输的三个基本问题</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-shu-ju-lian-lu-ceng-zheng-chuan-shu-de-san-ge-ji-ben-wen-ti/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-shu-ju-lian-lu-ceng-zheng-chuan-shu-de-san-ge-ji-ben-wen-ti/</id>
    <published>2023-05-05T02:46:12.000Z</published>
    <updated>2023-05-05T02:56:58.987Z</updated>
    
    <content type="html"><![CDATA[<ol><li>封装成帧</li><li>透明传输</li><li>差错控制</li></ol><hr><h2 id="封装成帧">封装成帧</h2><p>封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。<br><em>用控制字符进行帧定界的方法举例 ：</em><br><img src="/static/IT/network/shujulianluchuanshu-1.png" alt="封装成帧"></p><ul><li>SOH(Start Of Head):0x01</li><li>EOT(End Of Transmission):0x04</li></ul><hr><h2 id="透明传输">透明传输</h2><p><img src="/static/IT/network/shujulianluchuanshu-2.png" alt="透明传输"></p><p>解决透明传输问题：<strong>字节填充</strong>(byte stuffing)或字符填充(character stuffing)<br>发送端的数据链路层在数据中出现的控制字符“SOH”或“EOT”前插入一转义字符“<strong>ESC</strong>”。接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。 <em><strong>ESC:0x1B</strong></em></p><p>如果转义字符也出现数据当中，怎么办？<br><em>在转义字符前面再插入一个转义字符。</em></p><p><img src="/static/IT/network/shujulianluchuanshu-3.png" alt="ESC 转义"></p><hr><h2 id="差错控制">差错控制</h2><p>在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。 在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率 BER (Bit Error Rate)。 <em>误码率与 <a href="/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-xin-zao-bi-xiang-nong-gong-shi/" title="计算机网络-信噪比/香农公式">信噪比</a> 有很大的关系</em>。为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。 在数据链路层传送的帧中，广泛使用<strong>循环冗余检验 CRC</strong> 检错技术。</p><p>循环冗余检验的原理：<br>在发送端，先把数据 M 划分为组。假定每组 k 个比特，则需在 M 后面再添加供差错检测用的<strong>n 位冗余码</strong>一起发送。</p><p><strong>n 位冗余码的计算方法</strong>：<br>假设 M 分为一组，即 k = length(M) .</p><ol><li>选定长度为 (n + 1) 位的除数P</li><li>用二进制模 2 运算进行 2n 乘M 的运算，并以此结果为被除数。</li><li>将得到的 (k + n) 位被除数除以除数P，得出商Q ，余数R，余数R即为所求n位冗余码。</li></ol><p><strong>接收端对收到的每一帧进行 CRC 检验</strong></p><ul><li>若得出的余数 R = 0，则判定这个帧没有差错，就接受(accept)。</li><li>若余数 R = 0，则判定这个帧有差错，就丢弃。</li></ul><p><em>但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错</em>。 只要经过严格的挑选，并使用位数足够多的除数 P，那么出现检测不到的差错的概率就很小很小。<br><em>仅用循环冗余检验CRC差错检测技术只能做到无差错接受</em>(accept)。“无差错接受”指：“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。要做到“可靠传输”（即发送什么就收到什么）就必须再加上<em>确认和重传机制</em>。</p><p><strong>帧检验序列 FCS</strong><br>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。<br>CRC、FCS区别 ：</p><ul><li>CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。</li><li>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</li></ul><hr><h2 id="例题">例题</h2><p>例1：<br>M = 101001（k = 6） ，设 n = 3, 除数 P = 1101， 被除数是 2nM = 101001000。  模 2 运算的结果是：商 Q = 110101， 余数 R = 001。 把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2nM + R  即：101001001，共 (k + n) 位。<br><img src="/static/IT/network/shujulianluchuanshu-4.png" alt="FCS"></p><p>例2：<br>要发送的数据为1101011011 。采用CRC的生成多项式是P(X) = X<sup>4</sup> + X + 1 。</p><ol><li>试求应添加在数据后面的余数。</li><li>数据在传输过程中最后一个1变成了0，问接收端能否发现？</li><li>数据在传输过程中最后两个1变成了0，问接收端能否发现？</li><li>采用CRC检验后，数据链路层的传输是否就变成了可靠的传输？</li></ol><p>P(X) = X<sup>4</sup> + X + 1 。// 第0、1、4位为1，其余位为0 。<br>P = 10011， n = 4 。// p有5位，所以n = 5 - 1 = 4 。<br>2<sup>4</sup> * 1101011011 = 11010110110000  。<br>11010110110000 / 10011 余数为 1110 。<br>添加的检验序列是1110；2、3均可发现。<br>缺乏重传机制，数据链路层的传输是不可靠的传输。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;封装成帧&lt;/li&gt;
&lt;li&gt;透明传输&lt;/li&gt;
&lt;li&gt;差错控制&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;封装成帧&quot;&gt;封装成帧&lt;/h2&gt;
&lt;p&gt;封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。&lt;br&gt;
</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-PPP</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-ppp/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-ppp/</id>
    <published>2023-05-05T02:34:34.000Z</published>
    <updated>2023-05-05T02:44:34.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PPP-简介">PPP 简介</h2><p>1992 年制订了 PPP 协议。经过 1993 年和1994 年的修订，现在的 PPP 协议已成为因特网的正式标准[RFC 1661]。<br>现在全世界使用得最多的数据链路层协议是点对点协议 PPP (Point-to-Point Protocol)。用户使用拨号电话线接入因特网时，一般都是使用 PPP 协议。</p><p>用户到 ISP 的链路使用 PPP 协议<br><img src="/static/IT/network/PPP-1.png" alt="ISP 链路"></p><h3 id="PPP-的特点">PPP 的特点</h3><ul><li>PPP 协议应满足的需求<ul><li>简单：这是首要的要求</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul></li><li>PPP 协议不需要的功能<ul><li>纠错</li><li>流量控制</li><li>序号</li><li>多点线路</li><li>半双工或单工链路 （只支持全双工链路）</li></ul></li></ul><h3 id="不提供使用序号和确认的可靠传输">不提供使用序号和确认的可靠传输</h3><p>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。 在因特网环境下，PPP 的信息字段放入的数据是IP数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。<strong>帧检验序列 FCS 字段可保证无差错接受</strong>。</p><h3 id="PPP-协议有三个组成部分">PPP 协议有三个组成部分</h3><ul><li>一个将 <strong>IP 数据报</strong>封装到串行链路的方法。</li><li><strong>链路控制协议</strong> LCP (Link Control Protocol)。</li><li><strong>网络控制协议</strong> NCP (Network Control Protocol)。</li></ul><hr><h2 id="PPP-协议的帧格式">PPP 协议的帧格式</h2><p><em>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。</em></p><p><img src="/static/IT/network/PPP-2.png" alt="PPP 协议的帧格式"></p><p><strong>PPP 有一个 2 个字节的协议字段</strong>：</p><ol><li>当协议字段为 <strong>0x0021</strong> 时，PPP 帧的信息字段就是<strong>IP 数据报</strong>。</li><li>若为 <strong>0xC021</strong>, 则信息字段是 PPP <strong>链路控制数据</strong>。</li><li>若为 <strong>0x8021</strong>，则表示这是<strong>网络控制数据</strong>。</li></ol><p>透明传输问题 : 当 PPP 用在异步传输时，使用一种特殊的字符填充法。 PPP 用在同步传输链路（SONET/SDH)时，协议规定采用硬件来完成<strong>比特填充</strong>。</p><p><strong>字符填充 :</strong><br>将信息字段中出现的每一个 <strong>0x7E <strong>字节</strong>转变成</strong>为 2 字节序列(<strong>0x7D, 0x5E</strong>)。 若信息字段中出现一个 <strong>0x7D</strong> 的字节, 则将其<strong>转变成</strong>为 2 字节序列(<strong>0x7D, 0x5D</strong>)。 若信息字段中出现 <strong>ASCII 码的控制字符</strong>（即<strong>数值小于 0x20 的字符</strong>），则<strong>在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变</strong>。<em>(例如: <strong>控制字符0x03 变0x7D 0x23</strong>)</em><br>7E -&gt; 7D 5E<br>7D -&gt; 7D 5D<br>a (小于20 ) -&gt; 7D (20 + a)</p><p><strong>零比特填充  :</strong><br>PPP 协议用在 <strong>SONET/SDH 链路</strong>时，使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。 <strong>在发送端，只要发现有 5 个连续 1，则立即填入一个 0。接收端</strong>对帧中的比特流进行扫描。<strong>每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除。</strong><br><img src="/static/IT/network/PPP-3.png" alt="零比特填充"></p><hr><h2 id="PPP-协议的工作状态">PPP 协议的工作状态</h2><p>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。 PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。 这些分组及其响应选择一些 PPP 参数，进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。 通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</p><p><img src="/static/IT/network/PPP-4.png" alt="PPP 协议的工作状态"></p><hr><h2 id="例题">例题</h2><p>一个PPP帧的数据部分（用十六进制写出）是 <code>7D 5E FE 27 7D 5D 7D 5D 65 7D 5E</code> 。试问真正的数据是什么（用十六进制写出）？</p><p><code>7D 5E -&gt; 7E</code><br><code>7D 5D -&gt; 7D</code><br><code>7E FE 27 7D 7D 65 7E</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PPP-简介&quot;&gt;PPP 简介&lt;/h2&gt;
&lt;p&gt;1992 年制订了 PPP 协议。经过 1993 年和1994 年的修订，现在的 PPP 协议已成为因特网的正式标准[RFC 1661]。&lt;br&gt;
现在全世界使用得最多的数据链路层协议是点对点协议 PPP (Point</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-CSMA/CD</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-csma-cd/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-wang-luo/ji-suan-ji-wang-luo-csma-cd/</id>
    <published>2023-05-05T02:14:16.000Z</published>
    <updated>2023-05-05T02:28:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尽最大努力的交付">尽最大努力的交付</h2><p>最初的以太网是将许多计算机都连接到一根总线上。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><p><img src="/static/IT/network/CSMACD-1.png" alt="最初的以太网"></p><p>为了通信的简便以太网采取了两种重要的措施：</p><ol><li>采用较为灵活的无连接的工作方式，即<strong>不必先建立连接就可以直接发送数据</strong>。</li><li>以太网对发送的数据帧不进行编号，也不要求对方发回确认。<strong>这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。</strong></li></ol><p>以太网提供的服务是不可靠的交付，即<strong>尽最大努力的交付</strong>。 当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做。<strong>差错的纠正由高层来决定</strong>。 如果高层发现丢失了一些数据而进行重传，但<strong>以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送。</strong></p><p><strong>以太网发送的数据都使用曼彻斯特(Manchester)编码</strong>，接收端能很方便的从这种电压转化中把位同步信号提取出来。</p><hr><h2 id="CSMA-CD">CSMA/CD</h2><p><strong>CSMA/CD</strong> <strong>载波监听多点接入/碰撞检测</strong>(Carrier Sense Multiple Access with Collision Detection)</p><ul><li>“<strong>多点接入</strong>”表示许多计算机以多点接入的方式连接在一根总线上。</li><li>“<strong>载波监听</strong>”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。总线上并没有什么“载波”。因此，“<strong>载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。在发送数据前和发送数据时监听</strong>。</li><li>“<strong>碰撞检测</strong>”就是计算机边发送数据边检测信道上的信号电压大小。 <strong>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）</strong>。 当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“<strong>冲突检测</strong>”。</li></ul><p>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。 每一个正在发送数据的站，<strong>一旦发现总线上出现了碰撞，就要立即停止发送</strong>，免得继续浪费网络资源，然后<strong>等待一段随机时间后再次发送</strong>。<em>退避算法</em></p><hr><h2 id="碰撞">碰撞</h2><p>电磁波在总线上的有限传播速率的影响 :<br><strong>当某个站监听到总线是空闲时，也可能总线并非真正是空闲的</strong>。  A 向 B 发出的信息，要经过一定的时间后才能传送到 B。 <strong>B 若在 A 发送的信息到达 B 之前发送自己的帧</strong>(因为这时 B 的载波监听检测不到 A 所发送的信息)，<strong>则必然要在某个时间和 A 发送的帧发生碰撞。碰撞的结果是两个帧都变得无用。</strong></p><p>传播时延对载波监听的影响 :</p><p><img src="/static/IT/network/CSMACD-2.png" alt="碰撞"></p><p><strong>使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（<em>半双工通信</em>）。 每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。这种发送的不确定性使整个<em>以太网的平均通信量远小于以太网的最高数据率</em>。</strong></p><p><strong>争用期</strong> ：最先发送数据帧的站，在发送数据帧后至多经过时间 2t（<strong>两倍的端到端往返时延</strong>）就可知道发送的数据帧是否遭受了碰撞。 以太网的端到端往返时延 2t 称为争用期，或碰撞窗口。 <em>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</em></p><hr><h2 id="退避算法">退避算法</h2><p><strong>二进制指数类型退避算法</strong> (truncated binary exponential type)</p><p>发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</p><ol><li>确定基本退避时间，一般是取为争用期 2t。</li><li>定义逻辑重传次数 k ，k ≤ 10，即 k = Min[实际重传次数, 10]</li><li>从整数集合[0,1,…, (2<sup>k</sup> - 1)]中随机地取出一个数，记为 r。重传所需的时延就是 r 倍的基本退避时间。</li><li>当实际重传达 16 次仍不能成功时即丢弃该帧，并向高层报告。</li></ol><p><strong>争用期的长度 :</strong></p><ol start="5"><li>以太网取 <strong>51.2 μs</strong> 为争用期的长度。</li><li>对于 10 Mb/s 以太网，在争用期内可发送512 bit，即 <strong>64 字节</strong>。也可以说是<strong>512比特时间，一比特时间就是发送一比特数据所用的时间。</strong></li><li>以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。</li></ol><p><strong>最短有效帧长 :</strong><br>当A站向B站发送一个小于64字节的帧时，若A站发送完该帧后发生碰撞，B站会丢弃这个帧，但是A站却不知道这个帧发生了碰撞。因为，A站在争用期内发送完该帧后，就不会在继续监听是否发生碰撞。所以以太网规定了最短有效帧长<strong>64字节</strong>，意思就是<strong>在争用期内不断的发送数据</strong>，保留监听是否发生碰撞的功能。</p><ol start="8"><li>如果发生冲突，就一定是在发送的前 64 字节之内。</li><li>由于一检测到冲突就立即中止发送，这时已经发送出的数据一定小于 64 字节。</li><li>以太网规定了<strong>最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧。</strong></li></ol><p><strong>强化碰撞 ：</strong><br>当发送数据的站一旦发现发生了碰撞时：</p><ol start="11"><li>立即停止发送数据；</li><li>再继续发送若干比特(32b or 48b)的<strong>人为干扰信号</strong>(jamming signal)，以便让所有用户都知道现在已经发生了碰撞。</li></ol><p><img src="/static/IT/network/CSMACD-3.png" alt="强化碰撞"></p><p><strong>B 也能够检测到冲突，并立即停止发送数据帧，接着就发送干扰信号</strong>。<em>这里为了简单起见，只画出 A 发送干扰信号的情况。</em></p><p><strong>算法流程图 ：</strong><br><img src="/static/IT/network/CSMACD-4.png" alt="算法流程图"></p><hr><h2 id="以太网的信道利用率">以太网的信道利用率</h2><p>以太网的信道被占用的情况： 争用期长度为 2t，即端到端传播时延的两倍。检测到碰撞后不发送干扰信号。帧长为 L (bit)，数据发送速率为 C (b/s)，因而<strong>帧的发送时间为 L/C = T<sub>0</sub> (s)。</strong><br>一个帧从开始发送，经可能发生的碰撞后，<strong>到发送成功且信道转为空闲(即再经过时间 t 使得信道上无信号传播)时为止</strong>，是发送一帧所需的平均时间。</p><p><img src="/static/IT/network/CSMACD-5.png" alt="发送一帧所需的平均时间"></p><p><strong>参数 a :</strong><br>在以太网中定义了参数a，它是以太网单程端到端时延 t 与帧的发送时间 T0 之比：<br><strong>a = t / T<sub>0</sub> = t * C / L</strong></p><ul><li>a→0 表示一发生碰撞就立即可以检测出来，并立即停止发送，因而信道利用率很高。</li><li>a 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低。</li></ul><p><strong>要提高以太网的信道利用率，就必须减小 t 与 T<sub>0</sub> 之比。</strong><br>当数据率一定时，以太网的<strong>连线的长度</strong>受到限制，否则 t 的数值会太大。以太网的<strong>帧长不能太短</strong>，否则 T<sub>0</sub> 的值会太小，使 a 值太大。</p><p><strong>信道利用率的最大值 S<sub>max</sub> :</strong><br>理想的情况下，以太网上的各站发送数据都不会产生碰撞（显然已不是 CSMA/CD，需要特殊的调度方法），即总线一旦空闲就有某一个站立即发送数据。 发送一帧占用线路的时间是 T<sub>0</sub> + t ，而帧本身的发送时间是T<sub>0</sub> 。可计算出<strong>理想情况</strong>下的极限信道利用率 S<sub>max</sub>为：</p><p><strong>S<sub>max</sub> = T<sub>0</sub> / (T<sub>0</sub> + t ) = 1 / (1 + a)</strong></p><p><em>据统计，以太网的利用率达到<b>20%</b>就已经处于重载的情况，很多网络容量都被网上的碰撞消耗掉了。</em></p><hr><h2 id="例题">例题</h2><p>假定1km长的CSMA/CD 网络的数据率为1Gbit/s 。设信号在网络上的传播速率为200 000km/s 。求能够使用此协议的最短帧长。<br>争用期为 2 * 1km / (200 000km/s) = 10 μs。<br>最短帧长为 10 * 10<sup>-6</sup> / 10<sup>-9</sup> = 10000 bit = 1250 byte</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;尽最大努力的交付&quot;&gt;尽最大努力的交付&lt;/h2&gt;
&lt;p&gt;最初的以太网是将许多计算机都连接到一根总线上。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/IT/network/CSMACD-1.png&quot; a</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机网络" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Office-安装和激活Office套装</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/office-an-zhuang-he-ji-huo-office-tao-zhuang/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/office-an-zhuang-he-ji-huo-office-tao-zhuang/</id>
    <published>2023-05-05T01:36:24.000Z</published>
    <updated>2023-05-05T01:58:38.050Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://otp.landian.vip/zh-cn/download.html">下载 Office Tool Plus (包含框架)</a></li><li>解压并运行 <code>Office Tool Plus.exe</code></li><li><code>部署</code>想要的 Office 产品</li><li><code>激活</code>(产品已自动激活, 点击<code>刷新</code>可查看激活状态)<ul><li>如需激活其他安装方式安装的Office, 可用kms方式: <a href="https://www.coolhub.top/tech-articles/kms_list.html">kms列表</a></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://otp.landian.vip/zh-cn/download.html&quot;&gt;下载 Office Tool Plus (包含框架)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压并运行 &lt;code&gt;Office Tool Plus.exe&lt;/cod</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="Office" scheme="https://jxch.github.io/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText4-安装插件平台</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/sublimetext4-an-zhuang-cha-jian-ping-tai/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/sublimetext4-an-zhuang-cha-jian-ping-tai/</id>
    <published>2023-05-04T23:59:02.000Z</published>
    <updated>2023-05-05T00:01:01.803Z</updated>
    
    <content type="html"><![CDATA[<ol><li><code>Ctrl + Shift + P</code></li><li><code>Install Package Control</code></li><li><code>Package Control: Install Package</code></li></ol><hr><p>中文插件: <code>ChineseLocalizations</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Install Package Control&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Package Control: Install Package&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SublimeText4" scheme="https://jxch.github.io/tags/SublimeText4/"/>
    
  </entry>
  
  <entry>
    <title>市场分析-20230503-Brooks-S&amp;P Emini</title>
    <link href="https://jxch.github.io/2023/05/04/shi-chang-fen-xi/shi-chang-fen-xi-20230503-brooks-s-p-emini/"/>
    <id>https://jxch.github.io/2023/05/04/shi-chang-fen-xi/shi-chang-fen-xi-20230503-brooks-s-p-emini/</id>
    <published>2023-05-04T11:51:48.000Z</published>
    <updated>2023-05-04T12:10:53.016Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">Trading Update: Wednesday May 3, 2023</font></p><h1><font color="green">S&amp;P Emini pre-open market analysis</font></h1><h2 id="font-color-red-Emini-daily-chart-font"><font color="red">Emini daily chart</font></h2><ul><li>The bulls gave up yesterday on the idea of a strong second leg up following last Thursday and Friday’s bull breakout.<ul><li><font color="gray">在上周四和周五的牛市突破之后，多头昨天放弃了强劲的第二回合上涨的想法</font></li></ul></li><li>The Emini is neutral going sideways into FOMC report today.<ul><li><font color="gray">Emini 对今天的 FOMC 报告持中立态度</font></li></ul></li><li>The risk of being long following last week’s breakout was that the market was at the top of a month-long trading range.<ul><li><font color="gray">上周突破后做多的风险在于市场处于一个月交易区间的顶部</font></li></ul></li><li>Some bulls bought the bull breakout last Friday, assuming the market would break out above the April high. However, they likely used a tight stop and were quick to exit when the market hesitated on Monday or yesterday.<ul><li><font color="gray">一些多头在上周五买入牛市突破，假设市场将突破 4 月高点。然而，他们很可能使用了严格的止损，并在周一或昨天市场犹豫时迅速退出</font></li></ul></li><li>The bulls buying at the top of the trading range last Friday bought because the momentum was strong; however, when they sensed the momentum drying up, they would exit quickly.<ul><li><font color="gray">上周五交易区间顶部的多头买入是因为势头强劲；然而，当他们感觉到动力枯竭时，他们会迅速退出</font></li></ul></li><li>Some bears sold the April 2nd high, betting it was a bad signal bar in a tight bear channel and likely sellers above. Those bears bought back shorts back at the April 26th high yesterday.<ul><li><font color="gray">一些空头卖出了 4 月 2 日的高点，押注这是紧缩空头通道中的一个坏信号线，上方可能是卖家。这些空头昨天在 4 月 26 日的高点买回了空头</font></li></ul></li><li>The Bulls knew April 26th was a credible location to buy, and they likely had limit orders there too.<ul><li><font color="gray">多头知道 4 月 26 日是一个可靠的买入地点，他们也可能在那里设置了限价单</font></li></ul></li><li>The odds are the market will return to the May 1st close, allowing the scale in bulls out. However, the Bears may get a second leg down first.<ul><li><font color="gray">很有可能市场将回到 5 月 1 日的收盘价，从而允许多头退出。然而，熊队可能会先倒下第二回合</font></li></ul></li><li>A lot of bulls who bought the May 1st low likely bought more around the April 26th high. Because the selloff had strong momentum down, many of those bulls are sufficiently disappointed enough to be happy to exit breakeven on the entire trade, which is near 4,145.<ul><li><font color="gray">许多在 5 月 1 日低点买入的多头可能在 4 月 26 日高点附近买入更多。由于抛售势头强劲，这些多头中的许多人都非常失望，以至于很高兴退出整个交易的盈亏平衡点，接近 4,145</font></li></ul></li><li>Overall, the market is returning to neutral before the FOMC report at 11:00 AM PT/ 2:00 PM EST.<ul><li><font color="gray">总体而言，市场在美国东部时间上午 11:00/美国东部时间下午 2:00 FOMC 报告之前回归中性</font></li></ul></li><li>The past month has formed an expanding triangle and is in breakout mode, which means traders should be neutral going into the report and assume the probability is 50% for a measured move up or down based on the past month’s range.<ul><li><font color="gray">过去一个月形成了一个扩大的三角形并处于突破模式，这意味着交易者在进入报告时应该保持中立，并假设根据过去一个月的范围向上或向下测量的概率为 50%</font></li></ul></li></ul><h2 id="font-color-red-Emini-5-minute-chart-and-what-to-expect-today-font"><font color="red">Emini 5-minute chart and what to expect today</font></h2><ul><li>Emini is up 8 points in the overnight Globex session.</li><li>The overnight Globex market has gone sideways following yesterday’s strong selloff.<ul><li><font color="gray">在昨天的强劲抛售之后，隔夜 Globex 市场横盘整理</font></li></ul></li><li>The bears see yesterday’s selloff as strong enough to increase the odds of a second leg down.<ul><li><font color="gray">空头认为昨天的抛售力度足以增加第二轮下跌的可能性</font></li></ul></li><li>Traders should be open to a possible test of the lows of yesterday. However, because the pullback from yesterday’s low was so deep, the odds are that any selloff will form a higher low, and the market will continue sideways.<ul><li><font color="gray">交易者应该对昨天低点的可能测试持开放态度。然而，由于从昨日低点的回调幅度如此之大，任何抛售都可能形成更高的低点，市场将继续横盘整理</font></li></ul></li><li>Traders should assume today will have a lot of trading range price action. As I often say, most traders should wait for 6-12 bars before placing a trade unless they are comfortable with limit order trading.<ul><li><font color="gray">交易者应该假设今天会有很多交易区间价格行动。正如我经常说的，大多数交易者应该在下单前等待 6-12 根柱线，除非他们对限价单交易感到满意</font></li></ul></li><li>Most traders should try and catch the opening swing trade, which typically happens after the formation of a double top/bottom or a wedge top/bottom.<ul><li><font color="gray">大多数交易者应该尝试抓住开盘摆动交易，这通常发生在双顶/双底或楔形顶/底形成之后</font></li></ul></li><li>The most important thing is not to deny what the price action is doing. Price is truth, and no matter what your opinion is, if the market is doing the opposite, you must react accordingly.<ul><li><font color="gray">最重要的是不要否认价格行为在做什么。价格是真理，无论你的意见是什么，如果市场走势相反，你必须做出相应的反应</font></li></ul></li><li>Traders should be flat an hour before the FOMC report. Traders should wait for at least 2 bars following the FOMC release.<ul><li><font color="gray">在 FOMC 报告发布前一个小时，交易员应该持平。交易者应在 FOMC 发布后等待至少 2 个柱线</font></li></ul></li><li>Traders should be sure and trade small during the FOMC report as the bars can get very big. In general, most traders should trade a 20% position size.<ul><li><font color="gray">交易者应该确定并在 FOMC 报告期间进行少量交易，因为条柱可能会变得非常大。一般而言，大多数交易者应交易 20% 的头寸规模</font></li></ul></li></ul><h2 id="font-color-red-Emini-intraday-market-update-font"><font color="red">Emini intraday market update</font></h2><ul><li>The Emini has been in a trading range for most of the day.<ul><li><font color="gray">Emini 在一天的大部分时间里一直处于交易区间</font></li></ul></li><li>The bulls got a strong rally up to bar 7; however, the bears took control, and the market sold off down to bar 18.<ul><li><font color="gray">多头强劲反弹至第 7 根柱线；然而，空头控制了局面，市场抛售至 18 根柱线</font></li></ul></li><li>Because of the opening rally, the odds were that any selloff below bar 1 would be a trading range and not lead to a bear trend.<ul><li><font color="gray">由于开盘反弹，低于 1 条的任何抛售很可能是一个交易区间，不会导致熊市趋势</font></li></ul></li><li>Most traders should be flat for at least an hour before going into the report. It is easy to get trapped into a losing trade, using a wide stop and scaling it. This is why it s better to be flat and wait.<ul><li><font color="gray">在进入报告之前，大多数交易者应该保持至少一个小时的平稳状态。很容易陷入亏损的交易，使用广泛的止损并扩展它。这就是为什么最好保持平稳并等待</font></li></ul></li><li>In general, most traders should wait for the 2nd bar after the FOMC to close before trading.<ul><li><font color="gray">一般而言，大多数交易者应等待 FOMC 收盘后的第二根柱线才可交易</font></li></ul></li><li>Since the bars will likely be big, trading small, such as 20% of one’s normal position size, is better.<ul><li><font color="gray">由于条柱可能会很大，因此交易较小，例如正常头寸规模的 20%，会更好</font></li></ul></li><li>Traders should be open to anything going into the report. A big move can happen, however, the odds favor a trading range.  Traders should also assume that any big breakout during the first bar of the report and quickly reverse and go the opposite way.<ul><li><font color="gray">交易员应该对报告中的任何内容持开放态度。可能会发生大动作，但是，赔率有利于交易区间。交易者还应该假设在报告的第一根柱线期间出现任何重大突破，并迅速反转并走相反的路</font></li></ul></li></ul><h2 id="font-color-red-Yesterday’s-Emini-setups-font"><font color="red">Yesterday’s Emini setups</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230503-SP500-Emini-5-Min-Bear-Trend-from-the-Open-Then-Reversal-Up-768x432.png" alt="Emini 5 Min - Yesterday"></p><h2 id="font-color-green-Summary-of-today’s-S-P-Emini-price-action-font"><font color="green">Summary of today’s S&amp;P Emini price action</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230503-SP500-Emini-5-Min-Buy-Climax-Then-Trading-Range-Then-Bear-Breakout-after-FOMC-768x432.png" alt="Emini 5 Min - Today"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Trading Update: Wednesday May 3, 2023&lt;/font&gt;&lt;/p&gt;
&lt;h1&gt;&lt;font color=&quot;green&quot;&gt;S&amp;amp;P Emini pre-open market analysis&lt;/font&gt;&lt;</summary>
      
    
    
    
    <category term="交易笔记" scheme="https://jxch.github.io/categories/%E4%BA%A4%E6%98%93%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="市场分析" scheme="https://jxch.github.io/tags/%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90/"/>
    
    <category term="Brooks-转载" scheme="https://jxch.github.io/tags/Brooks-%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PA &amp; CODING</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="https://jxch.github.io/atom.xml" rel="self"/>
  
  <link href="https://jxch.github.io/"/>
  <updated>2023-05-05T08:56:37.373Z</updated>
  <id>https://jxch.github.io/</id>
  
  <author>
    <name>钱不寒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机图形学-中点分割直线段裁剪算法</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-zhong-dian-fen-ge-zhi-xian-duan-cai-jian-suan-fa/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-zhong-dian-fen-ge-zhi-xian-duan-cai-jian-suan-fa/</id>
    <published>2023-05-05T08:51:21.000Z</published>
    <updated>2023-05-05T08:56:37.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中点分割算法原理">中点分割算法原理</h2><p>中点分割直线段裁剪算法<strong>对Cohen-Sutherland直线裁剪算法的第3种情况做了改进</strong>，原理是简单地把起点为P0，终点为P1的直线段等<strong>分为两段直线P0P和PP1（P为直线段中点）</strong>，<strong>对每一段直线重复“简取”和“简弃”的处理</strong>，对于不能处理的直线段再继续等分下去线，直至每一段直线完全能够被“简取”或“简弃”，也就是说直至每段直线完全位于窗口之内或完全位于窗口之外，就完成了直线段的裁剪工作。</p><p>中点计算公式: $P = \frac{P_0+P_1}{2}$</p><p>基本思想:<br>从P0点出发找出离P0最近的可见点，和从P1点出发找出离P1最近的可见点。这两个可见点的连线就是原线段的可见部分。<br>与Cohen-Sutherland算法一样首先对线段端点进行编码，并把线段与窗口的关系分为三种情况，对前两种情况，进行一样的处理；对于第三种情况，<strong>用中点分割的方法求出线段与窗口的交点。A、B分别为距P0 、 P1最近的可见点，Pm为P0P1中点。</strong></p><p><img src="/static/IT/Graphics/MidpointSplitLineSegmentClipping.png" alt=""></p><h2 id="求线段与窗口的交点">求线段与窗口的交点</h2><p>从P0出发找距离P0最近可见点采用中点分割方法</p><ol><li>先求出P0P1的中点Pm</li><li>若P0Pm不是显然不可见的，并且P0P1在窗口中有可见部分，则距P0最近的可见点一定落在P0Pm上，所以用P0Pm代替P0P1；</li><li>否则取PmP1代替P0P1。</li><li>再对新的P0P1求中点Pm。重复上述过程，直到PmP1长度小于给定的控制常数为止，此时Pm收敛于交点。</li></ol><p>从P1出发找距离P1最近可见点采用上面类似方法。<br>对分辩率为<code>2N*2N</code>的显示器，上述二分过程至多进行N次。主要过程只用到加法和除法运算，适合硬件实现，它可以用左右移位来代替乘除法，这样就大大加快了速度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中点分割算法原理&quot;&gt;中点分割算法原理&lt;/h2&gt;
&lt;p&gt;中点分割直线段裁剪算法&lt;strong&gt;对Cohen-Sutherland直线裁剪算法的第3种情况做了改进&lt;/strong&gt;，原理是简单地把起点为P0，终点为P1的直线段等&lt;strong&gt;分为两段直线P0P和PP</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-9.回文数</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-9-hui-wen-shu/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-9-hui-wen-shu/</id>
    <published>2023-05-05T08:30:17.000Z</published>
    <updated>2023-05-05T08:38:54.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，121 是回文，而 123 不是。</p><blockquote><p>示例 1：<br>输入：x = 121<br>输出：true</p></blockquote><blockquote><p>示例 2：<br>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p></blockquote><blockquote><p>示例 3：<br>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><blockquote><p>提示：<br>$ -2^{31} &lt;= x &lt;= 2^{31} - 1 $</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        y <span class="token operator">=</span> <span class="token number">0</span>        t <span class="token operator">=</span> x        <span class="token comment"># 翻转数字</span>        <span class="token keyword">while</span> x<span class="token punctuation">:</span>            y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span>            x <span class="token operator">//=</span> <span class="token number">10</span>        <span class="token keyword">return</span> y <span class="token operator">==</span> t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        y <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 数字翻转一半就可以直接判断了</span>        <span class="token keyword">while</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">:</span>            y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span>            x <span class="token operator">//=</span> <span class="token number">10</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> y <span class="token keyword">or</span> x <span class="token operator">==</span> y <span class="token operator">//</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。&lt;br&gt;
回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;
&lt;p&gt;例如，121 是回文，而 123 不是。&lt;/p&gt;
&lt;bl</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-8.字符串转换整数(atoi)</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-8-zi-fu-chuan-zhuan-huan-zheng-shu-atoi/</id>
    <published>2023-05-05T08:20:34.000Z</published>
    <updated>2023-05-05T08:29:19.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 <code>32</code> 位有符号整数（类似 <code>C/C++</code> 中的 <code>atoi</code> 函数）。</p><p>函数 <code>myAtoi(string s)</code> 的算法如下：</p><ol><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</li><li>返回整数作为最终结果。</li></ol><p>注意：</p><ul><li>本题中的空白字符只包括空格字符 ’ ’ 。</li><li>除前导空格或数字后的其余字符串外，请勿忽略任何其他字符。</li></ul><blockquote><p>示例 1：<br>输入：s = “42”<br>输出：42<br>解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。<br></p><pre class="line-numbers language-none"><code class="language-none">第 1 步："42"（当前没有读入字符，因为没有前导空格）         ^第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）         ^第 3 步："42"（读入 "42"）           ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>解析得到整数 42 。<br>由于 “42” 在范围 [-231, 231 - 1] 内，最终结果为 42 。<p></p></blockquote><blockquote><p>示例 2：<br>输入：s = "   -42"<br>输出：-42<br>解释：<br></p><pre class="line-numbers language-none"><code class="language-none">第 1 步："   -42"（读入前导空格，但忽视掉）            ^第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）             ^第 3 步："   -42"（读入 "42"）               ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>解析得到整数 -42 。<br>由于 “-42” 在范围 [-231, 231 - 1] 内，最终结果为 -42 。<p></p></blockquote><blockquote><p>示例 3：<br>输入：s = “4193 with words”<br>输出：4193<br>解释：<br></p><pre class="line-numbers language-none"><code class="language-none">第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）         ^第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）         ^第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）             ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>解析得到整数 4193 。<br>由于 “4193” 在范围 [-231, 231 - 1] 内，最终结果为 4193 。<p></p></blockquote><blockquote><p>提示：<br>0 &lt;= s.length &lt;= 200<br>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+‘、’-’ 和 ‘.’ 组成</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> flag <span class="token operator">=</span> s<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token number">0</span>                    <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>             s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">elif</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>             flag<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token comment"># 数字累加</span>            <span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">break</span>        ans <span class="token operator">*=</span> flag        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;请你来实现一个 &lt;code&gt;myAtoi(string s)&lt;/code&gt; 函数，使其能将字符串转换成一个 &lt;code&gt;32&lt;/code&gt; 位有符号整数（类似 &lt;code&gt;C/C++&lt;/code&gt; 中的 &lt;code&gt;atoi&lt;/cod</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-7.整数反转</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-7-zheng-shu-fan-zhuan/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-7-zheng-shu-fan-zhuan/</id>
    <published>2023-05-05T08:11:47.000Z</published>
    <updated>2023-05-05T08:18:30.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。<br>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。<br>假设环境不允许存储 64 位整数（有符号或无符号）。</p><blockquote><p>示例 1：<br>输入：x = 123<br>输出：321</p></blockquote><blockquote><p>示例 2：<br>输入：x = -123<br>输出：-321</p></blockquote><blockquote><p>示例 3：<br>输入：x = 120<br>输出：21</p></blockquote><blockquote><p>示例 4：<br>输入：x = 0<br>输出：0</p></blockquote><blockquote><p>提示：<br>-231 &lt;= x &lt;= 231 - 1</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        y<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token comment"># 则其数值范围为 [−2^31,  2^31 − 1]</span>        boundry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># 倒序累加</span>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span>y<span class="token operator">%</span><span class="token number">10</span>            <span class="token keyword">if</span> res <span class="token operator">&gt;</span> boundry<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            y <span class="token operator">//=</span><span class="token number">10</span>        <span class="token keyword">return</span> res <span class="token keyword">if</span> x <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。&lt;br&gt;
如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。&lt;br&gt;
假设环境不允许存储 64 位整数（有符号或</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-6.N字形变换</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-6-n-zi-xing-bian-huan/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-6-n-zi-xing-bian-huan/</id>
    <published>2023-05-05T08:00:07.000Z</published>
    <updated>2023-05-05T08:06:26.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 <code>Z</code> 字形排列。<br>比如输入字符串为 <code>"PAYPALISHIRING"</code> 行数为 <code>3</code> 时，排列如下：</p><pre class="line-numbers language-none"><code class="language-none">P   A   H   NA P L S I I GY   I   R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>"PAHNAPLSIIGYIR"</code>。<br>请你实现这个将字符串进行指定行数变换的函数：<code>string convert(string s, int numRows);</code></p><blockquote><p>示例 1：<br>输入：s = “PAYPALISHIRING”, numRows = 3<br>输出：“PAHNAPLSIIGYIR”</p></blockquote><blockquote><p>示例 2：<br>输入：s = “PAYPALISHIRING”, numRows = 4<br>输出：“PINALSIGYAHRPI”<br>解释：<br></p><pre class="line-numbers language-none"><code class="language-none">P     I    NA   L S  I GY A   H RP     I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>示例 3：<br>输入：s = “A”, numRows = 1<br>输出：“A”</p></blockquote><blockquote><p>提示：<br>1 &lt;= s.length &lt;= 1000<br>s 由英文字母（小写和大写）、‘,’ 和 ‘.’ 组成<br>1 &lt;= numRows &lt;= 1000</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> s        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">]</span>        i<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                 flag <span class="token operator">=</span> <span class="token operator">-</span>flag            i <span class="token operator">+=</span> flag        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;将一个给定字符串 &lt;code&gt;s&lt;/code&gt; 根据给定的行数 &lt;code&gt;numRows&lt;/code&gt; ，以从上往下、从左到右进行 &lt;code&gt;Z&lt;/code&gt; 字形排列。&lt;br&gt;
比如输入字符串为 &lt;code&gt;&quot;PAYPALISH</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-5.最长回文子串</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-5-zui-chang-hui-wen-zi-chuan/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-5-zui-chang-hui-wen-zi-chuan/</id>
    <published>2023-05-05T07:46:59.000Z</published>
    <updated>2023-05-05T07:58:29.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。<br>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><blockquote><p>示例 1：<br>输入：s = “babad”<br>输出：“bab”<br>解释：“aba” 同样是符合题意的答案。</p></blockquote><blockquote><p>示例 2：<br>输入：s = “cbbd”<br>输出：“bb”</p></blockquote><blockquote><p>提示：<br>1 &lt;= s.length &lt;= 1000<br>s 仅由数字和英文字母组成</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">expandAroundCenter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 中心扩展</span>        <span class="token keyword">while</span> left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>            left <span class="token operator">-=</span> <span class="token number">1</span>            right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left1<span class="token punctuation">,</span> right1 <span class="token operator">=</span> self<span class="token punctuation">.</span>expandAroundCenter<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            left2<span class="token punctuation">,</span> right2 <span class="token operator">=</span> self<span class="token punctuation">.</span>expandAroundCenter<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> right1 <span class="token operator">-</span> left1 <span class="token operator">&gt;</span> end <span class="token operator">-</span> start<span class="token punctuation">:</span>                start<span class="token punctuation">,</span> end <span class="token operator">=</span> left1<span class="token punctuation">,</span> right1            <span class="token keyword">if</span> right2 <span class="token operator">-</span> left2 <span class="token operator">&gt;</span> end <span class="token operator">-</span> start<span class="token punctuation">:</span>                start<span class="token punctuation">,</span> end <span class="token operator">=</span> left2<span class="token punctuation">,</span> right2        <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;br&gt;
如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1：&lt;br&gt;
输入：s = “babad”&lt;br&gt;
输出：“bab”</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-4.寻找两个正序数组的中位数</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-4-xun-zhao-liang-ge-zheng-xu-shu-zu-de-zhong-wei-shu/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-4-xun-zhao-liang-ge-zheng-xu-shu-zu-de-zhong-wei-shu/</id>
    <published>2023-05-05T07:15:07.000Z</published>
    <updated>2023-05-05T07:43:36.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。<br>算法的时间复杂度应该为 O(log (m+n)) 。</p><blockquote><p>示例 1：<br>输入：nums1 = [1,3], nums2 = [2]<br>输出：2.00000<br>解释：合并数组 = [1,2,3] ，中位数 2</p></blockquote><blockquote><p>示例 2：<br>输入：nums1 = [1,2], nums2 = [3,4]<br>输出：2.50000<br>解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</p></blockquote><blockquote><p>提示：<br>nums1.length == m<br>nums2.length == n<br>0 &lt;= m &lt;= 1000<br>0 &lt;= n &lt;= 1000<br>1 &lt;= m + n &lt;= 2000<br>-106 &lt;= nums1[i], nums2[i] &lt;= 106</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">getKthElement</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            - 主要思路：要找到第 k (k&gt;1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较            - 这里的 "/" 表示整除            - nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个            - nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个            - 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) &lt;= k-2 个            - 这样 pivot 本身最大也只能是第 k-1 小的元素            - 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组            - 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组            - 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数            """</span>                        index1<span class="token punctuation">,</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token comment"># 特殊情况</span>                <span class="token keyword">if</span> index1 <span class="token operator">==</span> m<span class="token punctuation">:</span>                    <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>index2 <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> index2 <span class="token operator">==</span> n<span class="token punctuation">:</span>                    <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>index1 <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 正常情况</span>                newIndex1 <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>index1 <span class="token operator">+</span> k <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                newIndex2 <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>index2 <span class="token operator">+</span> k <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                pivot1<span class="token punctuation">,</span> pivot2 <span class="token operator">=</span> nums1<span class="token punctuation">[</span>newIndex1<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>newIndex2<span class="token punctuation">]</span>                <span class="token keyword">if</span> pivot1 <span class="token operator">&lt;=</span> pivot2<span class="token punctuation">:</span>                    k <span class="token operator">-=</span> newIndex1 <span class="token operator">-</span> index1 <span class="token operator">+</span> <span class="token number">1</span>                    index1 <span class="token operator">=</span> newIndex1 <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    k <span class="token operator">-=</span> newIndex2 <span class="token operator">-</span> index2 <span class="token operator">+</span> <span class="token number">1</span>                    index2 <span class="token operator">=</span> newIndex2 <span class="token operator">+</span> <span class="token number">1</span>                m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        totalLength <span class="token operator">=</span> m <span class="token operator">+</span> n        <span class="token keyword">if</span> totalLength <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> getKthElement<span class="token punctuation">(</span><span class="token punctuation">(</span>totalLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>getKthElement<span class="token punctuation">(</span>totalLength <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> getKthElement<span class="token punctuation">(</span>totalLength <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。&lt;br&gt;
算法的时间复杂度应该为 O(log (m+n)) 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-3.无重复字符的最长子串</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</id>
    <published>2023-05-05T07:08:15.000Z</published>
    <updated>2023-05-05T07:11:27.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><blockquote><p>示例 1:<br>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><blockquote><p>示例 2:<br>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><blockquote><p>示例 3:<br>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，“pwke” 是一个子序列，不是子串。</p></blockquote><blockquote><p>提示：<br>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># Step 1: 定义需要维护的变量, 本题求最大长度，所以需要定义max_len, 该题又涉及去重，因此还需要一个哈希表</span>        max_len<span class="token punctuation">,</span> hashmap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment"># Step 2: 定义窗口的首尾端 (start, end)， 然后滑动窗口</span>        start <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> end <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># Step 3</span>            <span class="token comment"># 更新需要维护的变量 (max_len, hashmap)</span>            <span class="token comment"># i.e. 把窗口末端元素加入哈希表，使其频率加1，并且更新最大长度</span>            hashmap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span> <span class="token operator">==</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token comment"># Step 4: </span>            <span class="token comment"># 根据题意,  题目的窗口长度可变: 这个时候一般涉及到窗口是否合法的问题</span>            <span class="token comment"># 这时要用一个while去不断移动窗口左指针, 从而剔除非法元素直到窗口再次合法</span>            <span class="token comment"># 当窗口长度大于哈希表长度时候 (说明存在重复元素)，窗口不合法</span>            <span class="token comment"># 所以需要不断移动窗口左指针直到窗口再次合法, 同时提前更新需要维护的变量 (hashmap)</span>            <span class="token keyword">while</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span><span class="token punctuation">:</span>                head <span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span>                hashmap<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> hashmap<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">del</span> hashmap<span class="token punctuation">[</span>head<span class="token punctuation">]</span>                start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># Step 5: 返回答案 (最大长度)</span>        <span class="token keyword">return</span> max_len<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;
输入: s = “abcabcbb”&lt;br&gt;
输出: 3&lt;br&gt;
解释: 因为无重复字符的最长子串是 </summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-2.两数相加</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-2-liang-shu-xiang-jia/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-2-liang-shu-xiang-jia/</id>
    <published>2023-05-05T06:59:20.000Z</published>
    <updated>2023-05-05T07:06:08.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><blockquote><p>示例 1：<br>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p></blockquote><blockquote><p>示例 2：<br>输入：l1 = [0], l2 = [0]<br>输出：[0]</p></blockquote><blockquote><p>示例 3：<br>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><blockquote><p>提示：<br>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;= Node.val &lt;= 9<br>题目数据保证列表表示的数字不含前导零</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for singly-linked list.</span><span class="token comment"># class ListNode:</span><span class="token comment">#     def __init__(self, val=0, next=None):</span><span class="token comment">#         self.val = val</span><span class="token comment">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> l2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化链表</span>        head <span class="token operator">=</span> tree <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>        val <span class="token operator">=</span> tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 当三者有一个不为空时继续循环</span>        <span class="token keyword">while</span> tmp <span class="token keyword">or</span> l1 <span class="token keyword">or</span> l2<span class="token punctuation">:</span>            val <span class="token operator">=</span> tmp            <span class="token keyword">if</span> l1<span class="token punctuation">:</span>                val <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> val                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">if</span> l2<span class="token punctuation">:</span>                val <span class="token operator">=</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> val                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            tmp <span class="token operator">=</span> val <span class="token operator">//</span> <span class="token number">10</span>            val <span class="token operator">=</span> val <span class="token operator">%</span> <span class="token number">10</span>            <span class="token comment"># 实现链表的连接</span>            tree<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            tree <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。&lt;br&gt;
请你将两个数相加，并以相同形式返回一个表示和的链表。&lt;br&gt;
你可以假设除了数字 0 之外，这两个数都不</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-1.两数之和</title>
    <link href="https://jxch.github.io/2023/05/05/suan-fa/leetcode-1-liang-shu-zhi-he/"/>
    <id>https://jxch.github.io/2023/05/05/suan-fa/leetcode-1-liang-shu-zhi-he/</id>
    <published>2023-05-05T06:37:20.000Z</published>
    <updated>2023-05-05T06:40:12.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><blockquote><p>示例 1：<br>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p></blockquote><blockquote><p>示例 2：<br>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</p></blockquote><blockquote><p>示例 3：<br>输入：nums = [3,3], target = 6<br>输出：[0,1]</p></blockquote><blockquote><p>提示：<br>2 &lt;= nums.length &lt;= 104<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案</p></blockquote><p>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">代码块<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        <span class="token comment"># 遍历列表</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 计算需要找到的下一个目标数字</span>            res <span class="token operator">=</span> target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token comment"># 遍历剩下的元素，查找是否存在该数字</span>            <span class="token keyword">if</span> res <span class="token keyword">in</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 若存在，返回答案。这里由于是两数之和，可采用.index()方法</span>                <span class="token comment"># 获得目标元素在nums[i+1:]这个子数组中的索引后，还需加上i+1才是该元素在nums中的索引</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。&lt;br&gt;
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>HTML-特殊字符编码对照表</title>
    <link href="https://jxch.github.io/2023/05/05/coding/html-te-shu-zi-fu-bian-ma-dui-zhao-biao/"/>
    <id>https://jxch.github.io/2023/05/05/coding/html-te-shu-zi-fu-bian-ma-dui-zhao-biao/</id>
    <published>2023-05-05T05:57:12.000Z</published>
    <updated>2023-05-05T06:17:47.382Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>特殊符号</th><th>命名实体</th><th>十进制编码</th><th>特殊符号</th><th>命名实体</th><th>十进制编码</th><th>特殊符号</th><th>命名实体</th><th>十进制编码</th></tr></thead><tbody><tr><td>&amp;#913</td><td>&amp;Alpha;</td><td>&amp;#913;</td><td>Β</td><td>&amp;Beta;</td><td>&amp;#914;</td><td>Γ</td><td>&amp;Gamma;</td><td>&amp;#915;</td></tr><tr><td>Δ</td><td>&amp;Delta;</td><td>&amp;#916;</td><td>Ε</td><td>&amp;Epsilon;</td><td>&amp;#917;</td><td>Ζ</td><td>&amp;Zeta;</td><td>&amp;#918;</td></tr><tr><td>Η</td><td>&amp;Eta;</td><td>&amp;#919;</td><td>Θ</td><td>&amp;Theta;</td><td>&amp;#920;</td><td>Ι</td><td>&amp;Iota;</td><td>&amp;#921;</td></tr><tr><td>Κ</td><td>&amp;Kappa;</td><td>&amp;#922;</td><td>Λ</td><td>&amp;Lambda;</td><td>&amp;#923;</td><td>Μ</td><td>&amp;Mu;</td><td>&amp;#924;</td></tr><tr><td>Ν</td><td>&amp;Nu;</td><td>&amp;#925;</td><td>Ξ</td><td>&amp;Xi;</td><td>&amp;#926;</td><td>Ο</td><td>&amp;Omicron;</td><td>&amp;#927;</td></tr><tr><td>Π</td><td>&amp;Pi;</td><td>&amp;#928;</td><td>Ρ</td><td>&amp;Rho;</td><td>&amp;#929;</td><td>Σ</td><td>&amp;Sigma;</td><td>&amp;#931;</td></tr><tr><td>Τ</td><td>&amp;Tau;</td><td>&amp;#932;</td><td>Υ</td><td>&amp;Upsilon;</td><td>&amp;#933;</td><td>Φ</td><td>&amp;Phi;</td><td>&amp;#934;</td></tr><tr><td>Χ</td><td>&amp;Chi;</td><td>&amp;#935;</td><td>Ψ</td><td>&amp;Psi;</td><td>&amp;#936;</td><td>Ω</td><td>&amp;Omega;</td><td>&amp;#937;</td></tr><tr><td>α</td><td>&amp;alpha;</td><td>&amp;#945;</td><td>β</td><td>&amp;beta;</td><td>&amp;#946;</td><td>γ</td><td>&amp;gamma;</td><td>&amp;#947;</td></tr><tr><td>δ</td><td>&amp;delta;</td><td>&amp;#948;</td><td>ε</td><td>&amp;epsilon;</td><td>&amp;#949;</td><td>ζ</td><td>&amp;zeta;</td><td>&amp;#950;</td></tr><tr><td>η</td><td>&amp;eta;</td><td>&amp;#951;</td><td>θ</td><td>&amp;theta;</td><td>&amp;#952;</td><td>ι</td><td>&amp;iota;</td><td>&amp;#953;</td></tr><tr><td>κ</td><td>&amp;kappa;</td><td>&amp;#954;</td><td>λ</td><td>&amp;lambda;</td><td>&amp;#955;</td><td>μ</td><td>&amp;mu;</td><td>&amp;#956;</td></tr><tr><td>ν</td><td>&amp;nu;</td><td>&amp;#957;</td><td>ξ</td><td>&amp;xi;</td><td>&amp;#958;</td><td>ο</td><td>&amp;omicron;</td><td>&amp;#959;</td></tr><tr><td>π</td><td>&amp;pi;</td><td>&amp;#960;</td><td>ρ</td><td>&amp;rho;</td><td>&amp;#961;</td><td>ς</td><td>&amp;sigmaf;</td><td>&amp;#962;</td></tr><tr><td>σ</td><td>&amp;sigma;</td><td>&amp;#963;</td><td>τ</td><td>&amp;tau;</td><td>&amp;#964;</td><td>υ</td><td>&amp;upsilon;</td><td>&amp;#965;</td></tr><tr><td>φ</td><td>&amp;phi;</td><td>&amp;#966;</td><td>χ</td><td>&amp;chi;</td><td>&amp;#967;</td><td>ψ</td><td>&amp;psi;</td><td>&amp;#968;</td></tr><tr><td>ω</td><td>&amp;omega;</td><td>&amp;#969;</td><td>ϑ</td><td>&amp;thetasym;</td><td>&amp;#977;</td><td>ϒ</td><td>&amp;upsih;</td><td>&amp;#978;</td></tr><tr><td>ϖ</td><td>&amp;piv;</td><td>&amp;#982;</td><td>•</td><td>&amp;bull;</td><td>&amp;#8226;</td><td>…</td><td>&amp;hellip;</td><td>&amp;#8230;</td></tr><tr><td>′</td><td>&amp;prime;</td><td>&amp;#8242;</td><td>″</td><td>&amp;Prime;</td><td>&amp;#8243;</td><td>‾</td><td>&amp;oline;</td><td>&amp;#8254;</td></tr><tr><td>⁄</td><td>&amp;frasl;</td><td>&amp;#8260;</td><td>℘</td><td>&amp;weierp;</td><td>&amp;#8472;</td><td>ℑ</td><td>&amp;image;</td><td>&amp;#8465;</td></tr><tr><td>ℜ</td><td>&amp;real;</td><td>&amp;#8476;</td><td>™</td><td>&amp;trade;</td><td>&amp;#8482;</td><td>ℵ</td><td>&amp;alefsym;</td><td>&amp;#8501;</td></tr><tr><td>←</td><td>&amp;larr;</td><td>&amp;#8592;</td><td>↑</td><td>&amp;uarr;</td><td>&amp;#8593;</td><td>→</td><td>&amp;rarr;</td><td>&amp;#8594;</td></tr><tr><td>↓</td><td>&amp;darr;</td><td>&amp;#8595;</td><td>↔</td><td>&amp;harr;</td><td>&amp;#8596;</td><td>↵</td><td>&amp;crarr;</td><td>&amp;#8629;</td></tr><tr><td>⇐</td><td>&amp;lArr;</td><td>&amp;#8656;</td><td>⇑</td><td>&amp;uArr;</td><td>&amp;#8657;</td><td>⇒</td><td>&amp;rArr;</td><td>&amp;#8658;</td></tr><tr><td>⇓</td><td>&amp;dArr;</td><td>&amp;#8659;</td><td>⇔</td><td>&amp;hArr;</td><td>&amp;#8660;</td><td>∀</td><td>&amp;forall;</td><td>&amp;#8704;</td></tr><tr><td>∂</td><td>&amp;part;</td><td>&amp;#8706;</td><td>∃</td><td>&amp;exist;</td><td>&amp;#8707;</td><td>∅</td><td>&amp;empty;</td><td>&amp;#8709;</td></tr><tr><td>∇</td><td>&amp;nabla;</td><td>&amp;#8711;</td><td>∈</td><td>&amp;isin;</td><td>&amp;#8712;</td><td>∉</td><td>&amp;notin;</td><td>&amp;#8713;</td></tr><tr><td>∋</td><td>&amp;ni;</td><td>&amp;#8715;</td><td>∏</td><td>&amp;prod;</td><td>&amp;#8719;</td><td>∑</td><td>&amp;sum;</td><td>&amp;#8722;</td></tr><tr><td>−</td><td>&amp;minus;</td><td>&amp;#8722;</td><td>∗</td><td>&amp;lowast;</td><td>&amp;#8727;</td><td>√</td><td>&amp;radic;</td><td>&amp;#8730;</td></tr><tr><td>∝</td><td>&amp;prop;</td><td>&amp;#8733;</td><td>∞</td><td>&amp;infin;</td><td>&amp;#8734;</td><td>∠</td><td>&amp;ang;</td><td>&amp;#8736;</td></tr><tr><td>∧</td><td>&amp;and;</td><td>&amp;#8869;</td><td>∨</td><td>&amp;or;</td><td>&amp;#8870;</td><td>∩</td><td>&amp;cap;</td><td>&amp;#8745;</td></tr><tr><td>∪</td><td>&amp;cup;</td><td>&amp;#8746;</td><td>∫</td><td>&amp;int;</td><td>&amp;#8747;</td><td>∴</td><td>&amp;there4;</td><td>&amp;#8756;</td></tr><tr><td>∼</td><td>&amp;sim;</td><td>&amp;#8764;</td><td>≅</td><td>&amp;cong;</td><td>&amp;#8773;</td><td>≈</td><td>&amp;asymp;</td><td>&amp;#8773;</td></tr><tr><td>≠</td><td>&amp;ne;</td><td>&amp;#8800;</td><td>≡</td><td>&amp;equiv;</td><td>&amp;#8801;</td><td>≤</td><td>&amp;le;</td><td>&amp;#8804;</td></tr><tr><td>≥</td><td>&amp;ge;</td><td>&amp;#8805;</td><td>⊂</td><td>&amp;sub;</td><td>&amp;#8834;</td><td>⊃</td><td>&amp;sup;</td><td>&amp;#8835;</td></tr><tr><td>⊄</td><td>&amp;nsub;</td><td>&amp;#8836;</td><td>⊆</td><td>&amp;sube;</td><td>&amp;#8838;</td><td>⊇</td><td>&amp;supe;</td><td>&amp;#8839;</td></tr><tr><td>⊕</td><td>&amp;oplus;</td><td>&amp;#8853;</td><td>⊗</td><td>&amp;otimes;</td><td>&amp;#8855;</td><td>⊥</td><td>&amp;perp;</td><td>&amp;#8869;</td></tr><tr><td>⋅</td><td>&amp;sdot;</td><td>&amp;#8901;</td><td>⌈</td><td>&amp;lceil;</td><td>&amp;#8968;</td><td>⌉</td><td>&amp;rceil;</td><td>&amp;#8969;</td></tr><tr><td>⌊</td><td>&amp;lfloor;</td><td>&amp;#8970;</td><td>⌋</td><td>&amp;rfloor;</td><td>&amp;#8971;</td><td>◊</td><td>&amp;loz;</td><td>&amp;#9674;</td></tr><tr><td>♠</td><td>&amp;spades;</td><td>&amp;#9824;</td><td>♣</td><td>&amp;clubs;</td><td>&amp;#9827;</td><td>♥</td><td>&amp;hearts;</td><td>&amp;#9829;</td></tr><tr><td>♦</td><td>&amp;diams;</td><td>&amp;#9830;</td><td></td><td>&amp;nbsp;</td><td>&amp;#160;</td><td>¡</td><td>&amp;iexcl;</td><td>&amp;#161;</td></tr><tr><td>¢</td><td>&amp;cent;</td><td>&amp;#162;</td><td>£</td><td>&amp;pound;</td><td>&amp;#163;</td><td>¤</td><td>&amp;curren;</td><td>&amp;#164;</td></tr><tr><td>¥</td><td>&amp;yen;</td><td>&amp;#165;</td><td>¦</td><td>&amp;brvbar;</td><td>&amp;#166;</td><td>§</td><td>&amp;sect;</td><td>&amp;#167;</td></tr><tr><td>¨</td><td>&amp;uml;</td><td>&amp;#168;</td><td>©</td><td>&amp;copy;</td><td>&amp;#169;</td><td>ª</td><td>&amp;ordf;</td><td>&amp;#170;</td></tr><tr><td>«</td><td>&amp;laquo;</td><td>&amp;#171;</td><td>¬</td><td>&amp;not;</td><td>&amp;#172;</td><td></td><td>­&amp;shy;</td><td>&amp;#173;</td></tr><tr><td>®</td><td>&amp;reg;</td><td>&amp;#174;</td><td>¯</td><td>&amp;macr;</td><td>&amp;#175;</td><td>°</td><td>&amp;deg;</td><td>&amp;#176;</td></tr><tr><td>±</td><td>&amp;plusmn;</td><td>&amp;#177;</td><td>²</td><td>&amp;sup2;</td><td>&amp;#178;</td><td>³</td><td>&amp;sup3;</td><td>&amp;#179;</td></tr><tr><td>´</td><td>&amp;acute;</td><td>&amp;#180;</td><td>µ</td><td>&amp;micro;</td><td>&amp;#181;</td><td>"</td><td>&amp;quot;</td><td>&amp;#34;</td></tr><tr><td>&lt;</td><td>&amp;lt;</td><td>&amp;#60;</td><td>&gt;</td><td>&amp;gt;</td><td>&amp;#62;</td><td>’</td><td></td><td>&amp;#39;</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十进制编码&lt;/th&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十进制编码&lt;/th&gt;
&lt;th&gt;特殊符号&lt;/th&gt;
&lt;th&gt;命名实体&lt;/th&gt;
&lt;th&gt;十</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="HTML" scheme="https://jxch.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>市场分析-20230504-Brooks-S&amp;P Emini</title>
    <link href="https://jxch.github.io/2023/05/05/shi-chang-fen-xi/shi-chang-fen-xi-20230504-brooks-s-p-emini/"/>
    <id>https://jxch.github.io/2023/05/05/shi-chang-fen-xi/shi-chang-fen-xi-20230504-brooks-s-p-emini/</id>
    <published>2023-05-05T05:26:35.000Z</published>
    <updated>2023-05-05T05:36:04.917Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">Trading Update: Thursday May 4, 2023</font></p><h1><font color="green">S&amp;P Emini pre-open market analysis</font></h1><h2 id="font-color-red-Emini-daily-chart-font"><font color="red">Emini daily chart</font></h2><ul><li>The Emini formed a strong bear bar closing on its low yesterday.<ul><li><font color="gray">Emini 昨日收盘于低点形成了一个强大的熊市</font></li></ul></li><li>Bears want break below March 22nd high and test of April 26th low with close below the March 22nd high. This would close the breakout point and end the argument of a measured move from the March 13th low to the March 22nd high.<ul><li><font color="gray">空头希望跌破 3 月 22 日的高点，并测试 4 月 26 日的低点，收盘价低于 3 月 22 日的高点。这将关闭突破点并结束从 3 月 13 日低点到 3 月 22 日高点的谨慎移动的论点</font></li></ul></li><li>The next target for the bears is a test of the 4,000 big round number.<ul><li><font color="gray">空头的下一个目标是测试4,000大轮数</font></li></ul></li><li>The past two trading days increase the probability of the market going slightly lower, reaching the April 26th low.<ul><li><font color="gray">近两个交易日加大大盘小幅走低的概率，触及4月26日低点</font></li></ul></li><li>The bulls want the rally (Tuesday’s low to yesterday’s high) to disappoint the bears enough that the market will form a micro double bottom and rally back to the May 1st high.<ul><li><font color="gray">多头希望反弹（周二的低点到昨天的高点）足以让空头失望，市场将形成微双底并反弹至 5 月 1 日的高点</font></li></ul></li><li>There were bulls who bought the May 1st low and scaled in lower during Tuesday’s selloff. Those bulls were disappointed enough that many used the rally late Tuesday to Wednesday’s high to exit their trade breakeven, or with a small profit after their scale in traders. Most of those bulls probably bought more at the April 26th low.<ul><li><font color="gray">多头买入 5 月 1 日的低点，并在周二的抛售中走低。那些多头非常失望，以至于许多人利用周二晚些时候的反弹至周三的高点退出交易盈亏平衡，或者在交易员规模扩大后获利微薄。这些多头中的大多数可能在 4 月 26 日的低点买入更多</font></li></ul></li><li>There were bears who sold the April 26th low and were disappointed by last week’s rally. Most of those bears sold higher and were happy to buy back shorts at the April 26th low.<ul><li><font color="gray">有些空头卖出了 4 月 26 日的低点，并对上周的反弹感到失望。大多数空头卖得更高，并乐于在 4 月 26 日的低点买回空头</font></li></ul></li><li>The market has been in a tight trading range for over a month and is in breakout mode. While the bears have an argument for a test down below the March 22nd high, they need to get more signs of strength, such as solid bear closes.<ul><li><font color="gray">一个多月以来，市场一直处于窄幅交易区间，并处于突破模式。虽然空头有理由测试低于 3 月 22 日的高点，但他们需要获得更多的力量迹象，例如稳固的熊市收盘</font></li></ul></li><li>The bears are hopeful that the market is forming a double top (April 18th and May 1st) and will break below the neckline (April 26th) and fall for a measured move down, testing the March 24th low.<ul><li><font color="gray">空头希望市场正在形成双顶（4 月 18 日和 5 月 1 日）并将跌破颈线（4 月 26 日）并缓慢下跌，测试 3 月 24 日的低点</font></li></ul></li></ul><h2 id="font-color-red-Emini-5-minute-chart-and-what-to-expect-today-font"><font color="red">Emini 5-minute chart and what to expect today</font></h2><ul><li>Emini is down 20 points in the overnight Globex session.</li><li>The bear have gone sideways for most of the overnight Globex session.<ul><li><font color="gray">在隔夜 Globex 交易时段的大部分时间里，空头都横盘整理</font></li></ul></li><li>After the consecutive bear trend bars on the daily chart, the bulls want today to disappoint the bears and form a trading range bar or a bull bar.<ul><li><font color="gray">在日线图上连续出现熊市趋势柱后，多头希望今天令空头失望并形成交易区间柱或牛市柱</font></li></ul></li><li>Traders should assume the market will have a trading range open and going sideways for the first couple of hours. This means that most traders should consider not trading for the first 6-12 bars unless they are comfortable with limit orders.<ul><li><font color="gray">交易者应该假设市场将在前几个小时内打开交易区间并横盘整理。这意味着大多数交易者应该考虑不要交易前 6-12 根柱线，除非他们对限价订单感到满意</font></li></ul></li><li>Most traders should focus on catching the opening swing trade that typically begins before the end of the second hour.<ul><li><font color="gray">大多数交易者应专注于捕捉通常在第二个小时结束前开始的开盘摆动交易</font></li></ul></li><li>While the odds favor a trading range, if the market begins to form strong trend bars on the open, traders cannot be in denial and must trade the market like a trade.<ul><li><font color="gray">虽然可能性有利于交易区间，但如果市场在开盘时开始形成强劲的趋势柱，交易者不能否认，必须像交易一样交易市场</font></li></ul></li><li>Lastly, traders should pay close attention to yesterday’s low as it will likely be a magnet for most of the day.<ul><li><font color="gray">最后，交易者应密切关注昨天的低点，因为它可能会在一天中的大部分时间成为磁石</font></li></ul></li></ul><h2 id="font-color-red-Emini-intraday-market-update-font"><font color="red">Emini intraday market update</font></h2><ul><li>The Emini gapped down and formed a strong two-bar breakout on bars 2-3.<ul><li><font color="gray">Emini 向下跳空并在 2-3 柱上形成强劲的两柱突破</font></li></ul></li><li>The Bears got a second leg down to bar 12. However, the rally up to bar 20 was strong enough to market the market, likely in a trading range and not a bear trend.<ul><li><font color="gray">空头的第二条腿跌至 12 根柱线。然而，涨至 20 根柱子的涨势足以推销市场，可能处于交易区间而非熊市趋势</font></li></ul></li><li>While the bulls did an excellent job getting a rally up to bar 20 (8:10 AM PT), the selloff during the first hour lowered the probability of a bull trend day. This meant the odds favored a trading range day and mostly a sideways market.<ul><li><font color="gray">虽然多头在 20 号柱（太平洋时间上午 8 点 10 分）上表现出色，但第一个小时的抛售降低了牛市趋势日出现的可能性。这意味着赔率有利于交易区间日和主要是横盘市场</font></li></ul></li><li>The bears got a wedge bottom on bar 32 (9:10 AM PT)  and the bulls got two legs up to bar 44, testing the bar 20 high.<ul><li><font color="gray">空头在 32 号柱（太平洋时间上午 9 点 10 分）出现楔形底部，多头在 44 号柱上有两条腿，测试 20 号柱的高位</font></li></ul></li><li>As of bar 46 (10: 15 AM PT), the market is Always In Long. The bulls want to reach the day’s open and close above today’s open.<ul><li><font color="gray">截至第 46 条柱线（太平洋时间上午 10:15），市场总是多头。多头希望当天的开盘价和收盘价高于今天的开盘价</font></li></ul></li><li>The market will probably reach the open and begin to go sideways for a couple of hours and decide on closing above or below it. Even if the bulls can close above the open, today will likely not be a strong bull trend day. The open of the day is basically the high of the day and so far the day has a big tail below. This means a trading range day is most likely.<ul><li><font color="gray">市场可能会达到开盘价并开始横盘整理几个小时，然后决定收盘价高于或低于它。即使多头能够收于开盘价之上，今天也可能不会是一个强劲的牛市趋势日。当天的开盘价基本上是当天的高点，到目前为止，当天的下方有一个大尾巴。这意味着交易区间日最有可能</font></li></ul></li></ul><h2 id="font-color-red-Yesterday’s-Emini-setups-font"><font color="red">Yesterday’s Emini setups</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230504-SP500-Emini-5-Min-Buy-Climax-Then-Trading-Range-Then-Bear-Breakout-after-FOMC-768x432.png" alt="Emini 5 Min - Yesterday"></p><h2 id="font-color-green-Summary-of-today’s-S-P-Emini-price-action-font"><font color="green">Summary of today’s S&amp;P Emini price action</font></h2><p><img src="/static/trade/Brooks-%E8%BD%AC%E8%BD%BD/20230504-SP500-Emini-5-Min-Trading-Range-Day-after-Double-Top-and-Double-Bottom-768x432.png" alt="Emini 5 Min - Today"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;Trading Update: Thursday May 4, 2023&lt;/font&gt;&lt;/p&gt;
&lt;h1&gt;&lt;font color=&quot;green&quot;&gt;S&amp;amp;P Emini pre-open market analysis&lt;/font&gt;&lt;/</summary>
      
    
    
    
    <category term="交易笔记" scheme="https://jxch.github.io/categories/%E4%BA%A4%E6%98%93%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="市场分析" scheme="https://jxch.github.io/tags/%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90/"/>
    
    <category term="Brooks-转载" scheme="https://jxch.github.io/tags/Brooks-%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-https配置</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/nginx-https-pei-zhi/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/nginx-https-pei-zhi/</id>
    <published>2023-05-05T05:14:15.000Z</published>
    <updated>2023-05-05T06:31:45.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境">环境</h2><p>需要 <code>http_ssl_module</code>，检查是否存在，一般自动装了<br>执行 <code>nginx -V</code> 查看输出的字符串中是否有 <code>--with-http_ssl_module</code></p><h2 id="conf">conf</h2><p>先生成证书: <a href="/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/" title="SSL-openssl生成crt证书">SSL-openssl生成crt证书</a></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server</span> <span class="token value attr-value">{</span><span class="token key attr-name">        listen</span> <span class="token value attr-value">      443 ssl;</span><span class="token key attr-name">        server_name</span> <span class="token value attr-value"> 192.168.52.132;</span><span class="token key attr-name">        ssl_certificate</span> <span class="token value attr-value">      /etc/nginx/conf.d/ssl/server.crt;</span><span class="token key attr-name">        ssl_certificate_key</span> <span class="token value attr-value">  /etc/nginx/conf.d/ssl/server_nopass.key;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，不要在https中去请求http，那样不会被允许，因为会降低安全性。<br>所以，用到了https，就得全升级成https。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;p&gt;需要 &lt;code&gt;http_ssl_module&lt;/code&gt;，检查是否存在，一般自动装了&lt;br&gt;
执行 &lt;code&gt;nginx -V&lt;/code&gt; 查看输出的字符串中是否有 &lt;code&gt;--with-http_ssl_module&lt;</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="Nginx" scheme="https://jxch.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SSL-openssl生成crt证书</title>
    <link href="https://jxch.github.io/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/"/>
    <id>https://jxch.github.io/2023/05/05/yun-wei/ssl-openssl-sheng-cheng-crt-zheng-shu/</id>
    <published>2023-05-05T05:08:11.000Z</published>
    <updated>2023-05-05T05:08:46.584Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成 key</span>openssl genrsa <span class="token parameter variable">-des3</span> <span class="token parameter variable">-out</span> server.key <span class="token number">1024</span><span class="token comment"># 生成 csr</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr<span class="token comment"># 去除密码</span>openssl rsa <span class="token parameter variable">-in</span> server.key <span class="token parameter variable">-out</span> server_nopass.key<span class="token comment"># 生成证书</span>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-signkey</span> server_nopass.key <span class="token parameter variable">-out</span> server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 生成 key&lt;/span&gt;
openssl</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="SSL" scheme="https://jxch.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-LBPH-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-lbph-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-lbph-matlab/</id>
    <published>2023-05-05T05:00:54.000Z</published>
    <updated>2023-05-05T05:03:22.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>LBPH，Local Binary Patterns Histograms，即LBP特征的统计直方图，LBPH将LBP特征与图像的空间信息结合在一起。这种表示方法由Ahonen等人在论文中提出，他们将LBP特征图像分成m个局部块，并提取每个局部块的直方图，然后将这些直方图依次连接在一起形成LBP特征的统计直方图，即LBPH。</p><p>一幅图像具体的计算LBPH的过程：</p><ol><li>计算图像的LBP特征图像。</li><li>将LBP特征图像进行分块，Opencv中默认将LBP特征图像分成8行8列64块区域</li><li>计算每块区域特征图像的直方图cell_LBPH，将直方图进行归一化，直方图大小为 <code>1*numPatterns</code></li><li>将上面计算的每块区域特征图像的直方图按分块的空间顺序依次排列成一行，形成LBP特征向量，大小为 <code>1*(numPatterns*64)</code></li><li>用机器学习的方法对LBP特征向量进行训练，用来检测和识别目标</li></ol><p>举例说明LBPH的维度：<br>采样点为8个，如果用的是原始的LBP或Extended LBP特征，其LBP特征值的模式为256种，则一幅图像的LBP特征向量维度为：<code>64*256=16384</code>维，而如果使用的UniformPatternLBP特征，其LBP值的模式为59种，其特征向量维度为：<code>64*59=3776</code>维，可以看出，使用等价模式特征，其特征向量的维度大大减少，这意味着使用机器学习方法进行学习的时间将大大减少，而性能上没有受到很大影响。</p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> result <span class="token operator">=</span> <span class="token function">getLBPH</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> numPatterns<span class="token punctuation">,</span> grid_x<span class="token punctuation">,</span> grid_y<span class="token punctuation">)</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    width <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>cols <span class="token operator">/</span> grid_x<span class="token punctuation">)</span><span class="token punctuation">;</span>    height <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rows <span class="token operator">/</span> grid_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>grid_x <span class="token operator">*</span> grid_y<span class="token punctuation">,</span> numPatterns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>        resultRowIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>grid_x<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>grid_y<span class="token operator">-</span><span class="token number">1</span>            cell <span class="token operator">=</span> <span class="token function">img</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>height<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">*</span>width<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            hist_cell <span class="token operator">=</span> <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numPatterns<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">result</span><span class="token punctuation">(</span>resultRowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span>numPatterns<span class="token punctuation">)</span> <span class="token operator">=</span> hist_cell<span class="token punctuation">;</span>            resultRowIndex <span class="token operator">=</span> resultRowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    result <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span> grid_x<span class="token operator">*</span>grid_y<span class="token operator">*</span>numPatterns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> result <span class="token operator">=</span> <span class="token function">getLocalRegionLBPH</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> minValue<span class="token punctuation">,</span> maxValue<span class="token punctuation">,</span> normed<span class="token punctuation">)</span>    edges <span class="token operator">=</span> <span class="token punctuation">[</span>minValue minValue<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>maxValue maxValue<span class="token punctuation">]</span><span class="token punctuation">;</span>    hist <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> hist<span class="token punctuation">.</span>Values<span class="token punctuation">;</span>        <span class="token keyword">if</span> normed        result <span class="token operator">=</span> <span class="token function">mapminmax</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    result <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> maxValue<span class="token operator">-</span>minValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;LBPH，Local Binary Patterns Histograms，即LBP特征的统计直方图，LBPH将LBP特征与图像的空间信息结合在一起。这种表示方法由Ahonen等人在论文中提出，他们将LBP特征图像分成m个局部块，并提</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-MB-LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-mb-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-mb-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:55:09.000Z</published>
    <updated>2023-05-05T05:00:09.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>将图像分成一个个小块（Block），每个小块再分为一个个的小区域（类似于HOG中的cell），小区域内的灰度平均值作为当前小区域的灰度值，与周围小区域灰度进行比较形成LBP特征，生成的特征称为MB-LBP，Block大小为3*3，则小区域的大小为1，就是原始的LBP特征<br><img src="/static/IT/AI-Face/LBP-MB-1.png" alt="MB-LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getMultiScaleBlockLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> scale<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>       cellSize <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>scale <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>cellSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    im <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>offset<span class="token operator">:</span><span class="token punctuation">(</span>rows<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>offset<span class="token operator">:</span><span class="token punctuation">(</span>cols<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> m<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token operator">:</span>offset                <span class="token keyword">for</span> n<span class="token operator">=</span><span class="token operator">-</span>offset<span class="token operator">:</span>offset                    temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token function">int16</span><span class="token punctuation">(</span><span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            temp <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token punctuation">(</span>cellSize <span class="token operator">*</span> cellSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       temp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span> <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment">%imshow(im)</span>    imglbp <span class="token operator">=</span> <span class="token function">getOriginLBPFeature</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-MB-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-MB-3.png" alt=""></p><p><img src="/static/IT/AI-Face/LBP-MB-4.png" alt="scale = 9 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;将图像分成一个个小块（Block），每个小块再分为一个个的小区域（类似于HOG中的cell），小区域内的灰度平均值作为当前小区域的灰度值，与周围小区域灰度进行比较形成LBP特征，生成的特征称为MB-LBP，Block大小为3*3，则小</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-Uniform Pattern LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-uniform-pattern-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-uniform-pattern-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:50:43.000Z</published>
    <updated>2023-05-05T04:53:13.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>Uniform Pattern，也被称为等价模式或均匀模式，由于一个LBP特征有多种不同的二进制形式，对于半径为R的圆形区域内含有P个采样点的LBP算子将会产生2P种模式。很显然，随着邻域集内采样点数的增加，二进制模式的种类是以指数形式增加的。例如：5×5邻域内20个采样点，有220＝1,048,576种二进制模式。这么多的二进制模式不利于纹理的提取、分类、识别及存取。例如，将LBP算子用于纹理分类或人脸识别时，常采用LBP模式的统计直方图来表达图像的信息，而较多的模式种类将使得数据量过大，且直方图过于稀疏。因此，需要对原始的LBP模式进行降维，使得数据量减少的情况下能最好的表示图像的信息。<br>为了解决二进制模式过多的问题，提高统计性，Ojala提出了采用一种“等价模式”(Uniform Pattern)来对LBP算子的模式种类进行降维。Ojala等认为，在实际图像中，绝大多数LBP模式最多只包含两次从1到0或从0到1的跳变。因此，Ojala将“等价模式”定义为：当某个LBP所对应的循环二进制数从0到1或从1到0最多有两次跳变时，该LBP所对应的二进制就称为一个等价模式类。如00000000(0次跳变)，00000111(只含一次从0到1的跳变)，10001111(先由1跳到0，再由0跳到1，共两次跳变)都是等价模式类。除等价模式类以外的模式都归为另一类，称为混合模式类，例如10010111(共四次跳变)。通过这样的改进，二进制模式的种类大大减少，而不会丢失任何信息。模式数量由原来的2P种减少为 P ( P-1)+2种，其中P表示邻域集内的采样点数。对于3×3邻域内8个采样点来说，二进制模式由原始的256种减少为58种，即：它把值分为59类，58个uniform pattern为一类，其它的所有值为第59类。这样直方图从原来的256维变成59维。这使得特征向量的维数更少，并且可以减少高频噪声带来的影响。<br>具体实现：采样点数目为8个，即LBP特征值有28种，共256个值，正好对应灰度图像的0-255，因此原始的LBP特征图像是一幅正常的灰度图像，而等价模式LBP特征，根据0-1跳变次数，将这256个LBP特征值分为了59类，从跳变次数上划分：跳变0次—2个，跳变1次—0个，跳变2次—56个，跳变3次—0个，跳变4次—140个，跳变5次—0个，跳变6次—56个，跳变7次—0个，跳变8次—2个。共9种跳变情况，将这256个值进行分配，跳变小于2次的为等价模式类，共58个，他们对应的值按照从小到大分别编码为1—58，即它们在LBP特征图像中的灰度值为1—58，而除了等价模式类之外的混合模式类被编码为0，即它们在LBP特征中的灰度值为0，因此等价模式LBP特征图像整体偏暗。</p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getUniformPatternLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%     LBP特征值对应图像灰度编码表，直接默认采样点为8位</span>    temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">255</span>        <span class="token keyword">if</span> <span class="token function">getHoptimes</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span>            <span class="token function">table</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>       <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token keyword">if</span> k <span class="token operator">==</span> neighbors<span class="token operator">-</span><span class="token number">1</span>                    <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> count <span class="token operator">=</span> <span class="token function">getHoptimes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    binaryCode <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">7</span>        i2 <span class="token operator">=</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> i2 <span class="token operator">==</span> <span class="token number">0</span>            i2 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>               <span class="token keyword">if</span> <span class="token function">binaryCode</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">binaryCode</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>            count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-U-1.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-U-2.png" alt="radius=3, neighbors=8 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;Uniform Pattern，也被称为等价模式或均匀模式，由于一个LBP特征有多种不同的二进制形式，对于半径为R的圆形区域内含有P个采样点的LBP算子将会产生2P种模式。很显然，随着邻域集内采样点数的增加，二进制模式的种类是以指数形</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-旋转不变LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-xuan-zhuan-bu-bian-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-xuan-zhuan-bu-bian-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:46:09.000Z</published>
    <updated>2023-05-05T04:49:42.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>不断的旋转圆形邻域内的LBP特征，根据选择得到一系列的LBP特征值，从这些LBP特征值选择LBP特征值最小的作为中心像素点的LBP特征。</p><p><img src="/static/IT/AI-Face/LBP-R-1.jpg" alt="旋转不变 LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getRotationInvariantLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>       <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius            currentValue <span class="token operator">=</span> <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minValue <span class="token operator">=</span> currentValue<span class="token punctuation">;</span>            currentValue <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%          循环右移</span>            <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>neighbors                temp <span class="token operator">=</span> <span class="token function">circshift</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> minValue                    minValue <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> minValue<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-R-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-R-3.png" alt="radius=3, neighbors=8 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;不断的旋转圆形邻域内的LBP特征，根据选择得到一系列的LBP特征值，从这些LBP特征值选择LBP特征值最小的作为中心像素点的LBP特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/IT/AI-Face/LBP-R-1.jpg&quot;</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-圆形LBP特征-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-xing-lbp-te-zheng-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-xing-lbp-te-zheng-matlab/</id>
    <published>2023-05-05T04:36:48.000Z</published>
    <updated>2023-05-05T04:43:29.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理">原理</h2><p>由于原始LBP特征使用的是固定邻域内的灰度值，因此当图像的尺度发生变化时，LBP 特征的编码将会发生错误，LBP 特征将不能正确的反映像素点周围的纹理信息，因此研究人员对其进行了改进。基本的 LBP 算子的最大缺陷在于它只覆盖了一个固定半径范围内的小区域，这显然不能满足不同尺寸和频率纹理的需要。为了适应不同尺度的纹理特征，并达到灰度和旋转不变性的要求，Ojala 等对 LBP 算子进行了改进，将 <code>3×3</code> 邻域扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的 LBP 算子允许在半径为 R 的圆形邻域内有任意多个像素点。从而得到了诸如半径为 R 的圆形区域内含有 P 个采样点的 LBP 算子：</p><p><img src="/static/IT/AI-Face/LBP-C-1.jpg" alt="圆形 LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> imglbp <span class="token operator">=</span> <span class="token function">getCircularLBPFeature</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> neighbors<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span>neighbors<span class="token operator">-</span><span class="token number">1</span><span class="token comment">%       计算采样点对于中心点坐标的偏移量rx，ry        </span>        rx <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>        ry <span class="token operator">=</span> <span class="token operator">-</span>radius <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> k <span class="token operator">/</span> neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       对采样点偏移量分别进行上下取整        </span>        x1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span>ry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%       将坐标偏移量映射到0-1之间        </span>        tx <span class="token operator">=</span> rx <span class="token operator">-</span> x1<span class="token punctuation">;</span>        ty <span class="token operator">=</span> ry <span class="token operator">-</span> y1<span class="token punctuation">;</span><span class="token comment">%       根据0-1之间的x，y的权重计算公式计算权重，权重与坐标具体位置无关，与坐标间的差值有关</span>        w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w2 <span class="token operator">=</span> tx <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>ty<span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>tx<span class="token punctuation">)</span> <span class="token operator">*</span> ty<span class="token punctuation">;</span>        w4 <span class="token operator">=</span> tx <span class="token operator">*</span> ty<span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>rows<span class="token operator">-</span>radius            <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>radius<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>cols<span class="token operator">-</span>radius                center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%               根据双线性插值公式计算第k个采样点的灰度值                </span>                neighbor <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w1 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x1<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w2 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y1<span class="token punctuation">)</span><span class="token operator">*</span>w3 <span class="token operator">+</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span>x2<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">+</span>y2<span class="token punctuation">)</span><span class="token operator">*</span>w4<span class="token punctuation">;</span><span class="token comment">%               LBP特征图像的每个邻居的LBP值累加，累加通过与操作完成，对应的LBP值通过移位取得</span>                <span class="token keyword">if</span> neighbor <span class="token operator">&gt;</span> center                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span><span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bitshift</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> neighbors<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-C-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-C-3.png" alt="radius=3, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-4.png" alt="radius=2, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-5.png" alt="radius=1, neighbors=8 效果图"></p><p><img src="/static/IT/AI-Face/LBP-C-6.png" alt="radius=2, neighbors=4 效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;
&lt;p&gt;由于原始LBP特征使用的是固定邻域内的灰度值，因此当图像的尺度发生变化时，LBP 特征的编码将会发生错误，LBP 特征将不能正确的反映像素点周围的纹理信息，因此研究人员对其进行了改进。基本的 LBP 算子的最大缺陷在于它只覆盖了一个固</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别-原始LBP特征计算-MATLAB</title>
    <link href="https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-shi-lbp-te-zheng-ji-suan-matlab/"/>
    <id>https://jxch.github.io/2023/05/05/ren-lian-shi-bie/ren-lian-shi-bie-yuan-shi-lbp-te-zheng-ji-suan-matlab/</id>
    <published>2023-05-05T04:29:15.000Z</published>
    <updated>2023-05-05T04:34:56.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LBP-原理">LBP 原理</h2><p>原始的 LBP 算子定义在像素 <code>3*3</code> 的邻域内，以邻域中心像素为阈值，相邻的8个像素的灰度值与邻域中心的像素值进行比较，若周围像素大于中心像素值，则该像素点的位置被标记为 1，否则为 0。这样，<code>3*3</code> 邻域内的 8 个点经过比较可产生8位二进制数，将这 8 位二进制数依次排列形成一个二进制数字，这个二进制数字就是中心像素的 LBP 值，LBP 值共有 28 种可能，因此 LBP 值有 256 种。中心像素的 LBP 值反映了该像素周围区域的纹理信息。<br>备注：计算 LBP 特征的图像必须是灰度图，如果是彩色图，需要先转换成灰度图。</p><p><img src="/static/IT/AI-Face/LBP-1.jpg" alt="LBP"></p><h2 id="MATLAB-源码">MATLAB 源码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">OriginLBP</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>    imgSize <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span>imgSize<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span>        imgG <span class="token operator">=</span> <span class="token function">rgb2gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        imgG <span class="token operator">=</span> img<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>imgG<span class="token punctuation">)</span><span class="token punctuation">;</span>    rows<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    cols<span class="token operator">=</span><span class="token function">int16</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>    imglbp <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">zeros</span><span class="token punctuation">(</span>rows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> cols<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>rows<span class="token operator">-</span><span class="token number">2</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>cols<span class="token operator">-</span><span class="token number">2</span>            center <span class="token operator">=</span> <span class="token function">imgG</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbpCode <span class="token operator">=</span> <span class="token function">bitor</span><span class="token punctuation">(</span>lbpCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">bitshift</span><span class="token punctuation">(</span><span class="token function">compareCenter</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imglbp</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> lbpCode<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>     <span class="token function">imshow</span><span class="token punctuation">(</span>imglbp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> flag <span class="token operator">=</span> <span class="token function">compareCenter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> center<span class="token punctuation">,</span> imgG<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">imgG</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span> center         flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>           flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果图">效果图</h2><p><img src="/static/IT/AI-Face/LBP-2.jpg" alt="原图"></p><p><img src="/static/IT/AI-Face/LBP-3.png" alt="效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LBP-原理&quot;&gt;LBP 原理&lt;/h2&gt;
&lt;p&gt;原始的 LBP 算子定义在像素 &lt;code&gt;3*3&lt;/code&gt; 的邻域内，以邻域中心像素为阈值，相邻的8个像素的灰度值与邻域中心的像素值进行比较，若周围像素大于中心像素值，则该像素点的位置被标记为 1，否则为 0。这</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MATLAB" scheme="https://jxch.github.io/tags/MATLAB/"/>
    
    <category term="人脸识别" scheme="https://jxch.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
</feed>

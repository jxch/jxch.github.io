<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PA &amp; CODING</title>
  
  <subtitle>求仁得仁</subtitle>
  <link href="https://jxch.github.io/atom.xml" rel="self"/>
  
  <link href="https://jxch.github.io/"/>
  <updated>2023-11-08T15:53:14.894Z</updated>
  <id>https://jxch.github.io/</id>
  
  <author>
    <name>钱不寒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iptables-关闭防火墙</title>
    <link href="https://jxch.github.io/2023/11/08/coding/iptables-guan-bi-fang-huo-qiang/"/>
    <id>https://jxch.github.io/2023/11/08/coding/iptables-guan-bi-fang-huo-qiang/</id>
    <published>2023-11-08T15:51:52.000Z</published>
    <updated>2023-11-08T15:53:14.894Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-P</span> FORWARD ACCEPT iptables <span class="token parameter variable">-P</span> OUTPUT ACCEPT iptables <span class="token parameter variable">-P</span> INPUT ACCEPTiptables <span class="token parameter variable">-F</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;iptables &lt;span class=&quot;token parameter variable&quot;&gt;-P&lt;</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="iptables" scheme="https://jxch.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>诗词-无题四</title>
    <link href="https://jxch.github.io/2023/09/04/zuo-pin/shi-ci-wu-ti-si/"/>
    <id>https://jxch.github.io/2023/09/04/zuo-pin/shi-ci-wu-ti-si/</id>
    <published>2023-09-04T12:35:28.000Z</published>
    <updated>2023-09-04T12:36:02.559Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世间从来多才俊，黄泉路上少英雄。<br>多情桥下无情水，只解曾经芍药红。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;世间从来多才俊，黄泉路上少英雄。&lt;br&gt;
多情桥下无情水，只解曾经芍药红。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="作品" scheme="https://jxch.github.io/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="诗词" scheme="https://jxch.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>诗词-乌夜啼·吹香院落飞红</title>
    <link href="https://jxch.github.io/2023/09/04/zuo-pin/shi-ci-wu-ye-ti-chui-xiang-yuan-luo-fei-hong/"/>
    <id>https://jxch.github.io/2023/09/04/zuo-pin/shi-ci-wu-ye-ti-chui-xiang-yuan-luo-fei-hong/</id>
    <published>2023-09-04T12:32:12.000Z</published>
    <updated>2023-09-04T12:32:42.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>乌夜啼</p><p>吹香院落飞红，飘渺疏雨轻烟。短岗孤酒立残阳，寒鸦桑树晚。<br>雨打花开寂寞，半昏半暗鸣蝉。梧桐声里忆生年，倚杖月影寒。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;乌夜啼&lt;/p&gt;
&lt;p&gt;吹香院落飞红，飘渺疏雨轻烟。短岗孤酒立残阳，寒鸦桑树晚。&lt;br&gt;
雨打花开寂寞，半昏半暗鸣蝉。梧桐声里忆生年，倚杖月影寒。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="作品" scheme="https://jxch.github.io/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="诗词" scheme="https://jxch.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>darknet-ocr web ui 优化</title>
    <link href="https://jxch.github.io/2023/07/12/template/darknet-ocr-web-ui-you-hua/"/>
    <id>https://jxch.github.io/2023/07/12/template/darknet-ocr-web-ui-you-hua/</id>
    <published>2023-07-12T01:00:40.000Z</published>
    <updated>2023-07-12T01:04:38.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-compose-yml"><code>docker-compose.yml</code></h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">webmvc</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postor/darknet<span class="token punctuation">-</span>ocr<span class="token punctuation">:</span>1.0<span class="token punctuation">-</span>image    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"18080:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./clipboard.min.js<span class="token punctuation">:</span>/root/darknet<span class="token punctuation">-</span>ocr/static/js/clipboard.min.js      <span class="token punctuation">-</span> ./helps.js<span class="token punctuation">:</span>/root/darknet<span class="token punctuation">-</span>ocr/static/js/helps.js      <span class="token punctuation">-</span> ./text.html<span class="token punctuation">:</span>/root/darknet<span class="token punctuation">-</span>ocr/templates/text.html      <span class="token punctuation">-</span> ./base.html<span class="token punctuation">:</span>/root/darknet<span class="token punctuation">-</span>ocr/templates/base.html    <span class="token key atrule">command</span><span class="token punctuation">:</span> python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="base-html"><code>base.html</code></h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$def with (page)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>darknet-ocr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> $:page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="text-html"><code>text.html</code></h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$def with(post)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/js/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/js/helps.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/js/clipboard.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/css/main.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    imgJson<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string-property property">"width"</span><span class="token operator">:</span>$post<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">"height"</span><span class="token operator">:</span>$post<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string-property property">"uuid"</span><span class="token operator">:</span><span class="token string">"$post['uuid']"</span><span class="token punctuation">,</span>        <span class="token string-property property">'istext'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//文字检测</span>            <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>$for bill in post['billList']:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>10px</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>billname<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">'$bill'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">&gt;</span></span>$bill<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>/ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgInput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>imgInput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>texturl<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>$post[<span class="token string">'textwidth'</span>]px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像URL地址<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imagebutton<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">postBill</span><span class="token punctuation">(</span><span class="token string">'$post['</span>url<span class="token string">']'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">&gt;</span></span>识别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pasteButton<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">pasteImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>粘贴板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>imgInput<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileupload<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上传本地图片<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>imageButton<span class="token punctuation">'</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png, image/bmp, image/jpg, image/jpeg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aglin-line<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgshow<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>$post[<span class="token string">'width'</span>]px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgDisplay<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>$post[<span class="token string">'width'</span>]px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>$post[<span class="token string">'height'</span>]px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>imgimg<span class="token punctuation">'</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['width']<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['height']<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgcanvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['width']<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['height']<span class="token punctuation">"</span></span>   <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">top</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>2<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>loadingGif<span class="token punctuation">'</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['width']<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$post['height']<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static/img/loading.gif<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>$post[<span class="token string">'width'</span>]px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!#############################识别结果#########################################################</span> <span class="token attr-name">----</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 12%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>json<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>json-request-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>billmodelname<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>$post.get('name')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>600px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>660px<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span>scroll<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>billNameList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mytable<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!##############################识别结果#########################################################</span> <span class="token attr-name">----</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">            <span class="token function">imgUploadPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预览上传文件</span>            <span class="token function">urlPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预览url图片</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="helps-js"><code>helps.js</code></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>that</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> divStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"billname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>divStyle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        divStyle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    that<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>    imgJson<span class="token punctuation">.</span>billModel <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">resizeImg</span><span class="token punctuation">(</span><span class="token parameter">width<span class="token punctuation">,</span>height</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rate <span class="token operator">=</span> height<span class="token operator">/</span>imgJson<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    newW <span class="token operator">=</span> width<span class="token operator">/</span>rate<span class="token punctuation">;</span>    newH <span class="token operator">=</span> height<span class="token operator">/</span>rate<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newW<span class="token operator">&gt;</span>imgJson<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">{</span>        rate <span class="token operator">=</span> width<span class="token operator">/</span>imgJson<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        newW <span class="token operator">=</span> width<span class="token operator">/</span>rate<span class="token punctuation">;</span>        newH <span class="token operator">=</span> height<span class="token operator">/</span>rate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>newW<span class="token punctuation">,</span>newH<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">imgUploadPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//预览图像</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imageButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imageButton"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        imgJson<span class="token punctuation">.</span>filename <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">var</span> fr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            imgJson<span class="token punctuation">.</span>imgString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>            imgJson<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"texturl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span>            <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            image<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> width <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">;</span>                <span class="token keyword">var</span> height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token punctuation">;</span>                imgJson<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">=</span> width<span class="token punctuation">;</span>                imgJson<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">=</span> height<span class="token punctuation">;</span>                <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">resizeImg</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                width<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                height<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">postBill</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            image<span class="token punctuation">.</span>src<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">pasteImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> blob <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blob<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">imageBlob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        imgJson<span class="token punctuation">.</span>imgString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>                        imgJson<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"texturl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span>                        <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        image<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">var</span> width <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">;</span>                            <span class="token keyword">var</span> height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token punctuation">;</span>                            imgJson<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">=</span> width<span class="token punctuation">;</span>                            imgJson<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">=</span> height<span class="token punctuation">;</span>                            <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">resizeImg</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                            width<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            height<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">postBill</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                        image<span class="token punctuation">.</span>src<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                    fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>imageBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">urlPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//预览图像</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#texturl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> url<span class="token operator">=</span><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#texturl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        imgJson<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        imgJson<span class="token punctuation">.</span>imgString <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        imgJson<span class="token punctuation">.</span>filename<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个image对象</span>        image<span class="token punctuation">.</span>src<span class="token operator">=</span>url<span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">" 图片url错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> width <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            <span class="token keyword">var</span> height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            imgJson<span class="token punctuation">.</span><span class="token constant">W</span> <span class="token operator">=</span> width<span class="token punctuation">;</span>            imgJson<span class="token punctuation">.</span><span class="token constant">H</span> <span class="token operator">=</span> height<span class="token punctuation">;</span>            <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">resizeImg</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            width<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            height<span class="token operator">=</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgimg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imgcanvas"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//jQuery("#"+avatarSlect)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">postBill</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//识别请求</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">.</span>url <span class="token operator">||</span> imgJson<span class="token punctuation">.</span>imgString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">loadingGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>            <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                imgJson<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//防止重复提交</span>                imgJson<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回识别结果</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">plotBox</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制切图坐标</span>                    <span class="token punctuation">}</span>                      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>imgJson<span class="token punctuation">.</span>data<span class="token punctuation">.</span>errCode<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"图像错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">loadingGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">XMLHttpRequest<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> errorThrown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 状态码</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 状态</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 错误信息   </span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>textStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">loadingGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"识别异常!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"上传图片或者URL,再提交！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clearCan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//清除myCanvas容器</span>    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imgcanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>width<span class="token operator">=</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>height<span class="token operator">=</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//根据获取的数据，创建table</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#mytable"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> jsObject <span class="token operator">=</span> result<span class="token punctuation">;</span>    imgBoxes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//var jsObject = [{"name":10,"value":20},{"name":10,"value":20}];</span>    <span class="token keyword">var</span> tableString <span class="token operator">=</span><span class="token string">"&lt;table id='billmodeltable' class='gridtable'&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;th&gt;文本检测置信度&lt;/th&gt;&lt;th&gt;OCR置信度&lt;/th&gt;&lt;/tr&gt;"</span>    <span class="token keyword">var</span> textString <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>jsObject<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token string">"&lt;td&gt;"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> text     <span class="token operator">=</span>  <span class="token string">"&lt;td&gt;&lt;p contenteditable='true'&gt;"</span><span class="token operator">+</span> jsObject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"&lt;/p&gt;&lt;/td&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> textProb <span class="token operator">=</span>  <span class="token string">"&lt;td&gt;"</span><span class="token operator">+</span> jsObject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"textprob"</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ocrProb  <span class="token operator">=</span>  <span class="token string">"&lt;td&gt;"</span><span class="token operator">+</span> jsObject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"prob"</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">"&lt;/td&gt;"</span> <span class="token punctuation">;</span>        tableString <span class="token operator">+=</span> <span class="token string">"&lt;tr&gt;"</span><span class="token operator">+</span>index<span class="token operator">+</span>text<span class="token operator">+</span>textProb<span class="token operator">+</span>ocrProb<span class="token punctuation">;</span>        textString <span class="token operator">+=</span> jsObject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        imgBoxes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"box"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tableString<span class="token operator">+=</span><span class="token string">"&lt;/table&gt;"</span><span class="token punctuation">;</span>        textHtmlString <span class="token operator">=</span> <span class="token string">'&lt;button class="copy-btn" data-clipboard-text="'</span> <span class="token operator">+</span> textString <span class="token operator">+</span> <span class="token string">'"&gt;Copy&lt;/button&gt;'</span>    textHtmlString <span class="token operator">+=</span> <span class="token string">"&lt;p&gt;"</span> <span class="token operator">+</span> textString <span class="token operator">+</span> <span class="token string">"&lt;/p&gt;"</span>        <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#mytable"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>textHtmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#mytable"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">ClipboardJS</span><span class="token punctuation">(</span><span class="token string">'.copy-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#imageButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">plotBox</span><span class="token punctuation">(</span><span class="token parameter">boxes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/*根据box 绘制box            W,H:原始图像尺寸            */</span>    <span class="token keyword">var</span> <span class="token constant">W</span> <span class="token operator">=</span> imgJson<span class="token punctuation">[</span><span class="token string">'W'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token constant">H</span> <span class="token operator">=</span> imgJson<span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'imgcanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>width<span class="token operator">=</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>height<span class="token operator">=</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//获取对应的CanvasRenderingContext2D对象(画笔)</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线条颜色为蓝色</span>        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>boxes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> x1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">W</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> y1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">H</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> x2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">W</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> y2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">H</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> x3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">W</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> y3 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">H</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> x4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">W</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> y4 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'box'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token constant">H</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ctx.fillText('prob:'+boxes[i]['prob']+' text:'+i, x1-5, y1-5);</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">createTable</span><span class="token punctuation">(</span>boxes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">loadingGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//加载请求时旋转动态图片</span>    <span class="token keyword">var</span> imgId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loadingGif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>imgId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">==</span><span class="token string">"block"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>imgId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>imgId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"block"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="clipboard-min-js"><code>clipboard.min.js</code></h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*! * clipboard.js v2.0.8 * https://clipboardjs.com/ * * Licensed MIT © Zeno Rocha */</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"object"</span><span class="token operator">==</span><span class="token keyword">typeof</span> exports<span class="token operator">&amp;&amp;</span><span class="token string">"object"</span><span class="token operator">==</span><span class="token keyword">typeof</span> module<span class="token operator">?</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> define<span class="token operator">&amp;&amp;</span>define<span class="token punctuation">.</span>amd<span class="token operator">?</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"object"</span><span class="token operator">==</span><span class="token keyword">typeof</span> exports<span class="token operator">?</span>exports<span class="token punctuation">.</span>ClipboardJS<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">.</span>ClipboardJS<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">134</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">default</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">279</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">370</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">817</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token operator">&amp;&amp;</span><span class="token string">"symbol"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>iterator<span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">typeof</span> t<span class="token punctuation">}</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token operator">&amp;&amp;</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Symbol<span class="token operator">&amp;&amp;</span>t<span class="token operator">!==</span><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token operator">?</span><span class="token string">"symbol"</span><span class="token operator">:</span><span class="token keyword">typeof</span> t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">u</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>enumerable<span class="token operator">=</span>r<span class="token punctuation">.</span>enumerable<span class="token operator">||</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>configurable<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token keyword">in</span> r<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>writable<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">.</span>key<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function-variable function">l</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Cannot call a class as a function"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveOptions</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">=</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"resolveOptions"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token operator">=</span>t<span class="token punctuation">.</span>action<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token operator">=</span>t<span class="token punctuation">.</span>container<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>emitter<span class="token operator">=</span>t<span class="token punctuation">.</span>emitter<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>t<span class="token punctuation">.</span>target<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">=</span>t<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token operator">=</span>t<span class="token punctuation">.</span>trigger<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedText<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"initSelection"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">?</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"createFakeElement"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"rtl"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize<span class="token operator">=</span><span class="token string">"12pt"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>padding<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>margin<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token operator">=</span><span class="token string">"absolute"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">[</span>t<span class="token operator">?</span><span class="token string">"right"</span><span class="token operator">:</span><span class="token string">"left"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"-9999px"</span><span class="token punctuation">;</span>t<span class="token operator">=</span>window<span class="token punctuation">.</span>pageYOffset<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"selectFake"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createFakeElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">fakeHandlerCallback</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">removeFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandler<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandlerCallback<span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedText<span class="token operator">=</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">copyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"removeFake"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandler<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandlerCallback<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandler<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeHandlerCallback<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fakeElem<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"selectTarget"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedText<span class="token operator">=</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">copyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"copyText"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>e<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleResult</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"handleResult"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>t<span class="token operator">?</span><span class="token string">"success"</span><span class="token operator">:</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">action</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token punctuation">,</span><span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedText<span class="token punctuation">,</span><span class="token literal-property property">trigger</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token punctuation">,</span><span class="token literal-property property">clearSelection</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"clearSelection"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>activeElement<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"destroy"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"action"</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">"copy"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_action<span class="token operator">=</span>t<span class="token punctuation">,</span><span class="token string">"copy"</span><span class="token operator">!==</span><span class="token keyword">this</span><span class="token punctuation">.</span>_action<span class="token operator">&amp;&amp;</span><span class="token string">"cut"</span><span class="token operator">!==</span><span class="token keyword">this</span><span class="token punctuation">.</span>_action<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Invalid "action" value, use either "copy" or "cut"'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_action<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"target"</span><span class="token punctuation">,</span><span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token operator">||</span><span class="token string">"object"</span><span class="token operator">!==</span><span class="token function">c</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">||</span><span class="token number">1</span><span class="token operator">!==</span>t<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Invalid "target" value, use a valid Element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token operator">===</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"cut"</span><span class="token operator">===</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">)</span><span class="token operator">||</span>t<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_target<span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_target<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">u</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">&amp;&amp;</span><span class="token function">u</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token operator">&amp;&amp;</span><span class="token string">"symbol"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>iterator<span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">typeof</span> t<span class="token punctuation">}</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token operator">&amp;&amp;</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Symbol<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Symbol<span class="token operator">&amp;&amp;</span>t<span class="token operator">!==</span><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token operator">?</span><span class="token string">"symbol"</span><span class="token operator">:</span><span class="token keyword">typeof</span> t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>enumerable<span class="token operator">=</span>r<span class="token punctuation">.</span>enumerable<span class="token operator">||</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>configurable<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token keyword">in</span> r<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>writable<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">.</span>key<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span>h<span class="token operator">=</span>Object<span class="token punctuation">.</span>setPrototypeOf<span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>__proto__<span class="token operator">=</span>e<span class="token punctuation">,</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> <span class="token function-variable function">r</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Reflect<span class="token operator">||</span><span class="token operator">!</span>Reflect<span class="token punctuation">.</span>construct<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span>construct<span class="token punctuation">.</span>sham<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Proxy<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token function">p</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">=</span>r<span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>arguments<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token punctuation">(</span>t<span class="token operator">=</span>t<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">"object"</span><span class="token operator">!==</span><span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">"function"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>t<span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceError</span><span class="token punctuation">(</span><span class="token string">"this hasn't been initialised - super() hasn't been called"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span>p<span class="token operator">=</span>Object<span class="token punctuation">.</span>setPrototypeOf<span class="token operator">?</span>Object<span class="token punctuation">.</span><span class="token function-variable function">getPrototypeOf</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>__proto__<span class="token operator">||</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span><span class="token string">"data-clipboard-"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function-variable function">r</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> e<span class="token operator">&amp;&amp;</span><span class="token keyword">null</span><span class="token operator">!==</span>e<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Super expression must either be null or a function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>prototype<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>e<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">constructor</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span>t<span class="token punctuation">,</span><span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">&amp;&amp;</span><span class="token function">h</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">d</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Cannot call a class as a function"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveOptions</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">listenClick</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span><span class="token keyword">return</span> t<span class="token operator">=</span>o<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"isSupported"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"copy"</span><span class="token punctuation">,</span><span class="token string">"cut"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token string">"string"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">?</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">:</span>t<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token operator">!</span><span class="token operator">!</span>document<span class="token punctuation">.</span>queryCommandSupported<span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token operator">=</span>e<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">queryCommandSupported</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"resolveOptions"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>action<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">.</span>action<span class="token operator">?</span>t<span class="token punctuation">.</span>action<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">.</span>target<span class="token operator">?</span>t<span class="token punctuation">.</span>target<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultTarget<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">.</span>text<span class="token operator">?</span>t<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultText<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token operator">=</span><span class="token string">"object"</span><span class="token operator">===</span><span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token operator">?</span>t<span class="token punctuation">.</span>container<span class="token operator">:</span>document<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"listenClick"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"onClick"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span>t<span class="token punctuation">.</span>delegateTarget<span class="token operator">||</span>t<span class="token punctuation">.</span>currentTarget<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">l</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">action</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">target</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">container</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">,</span><span class="token literal-property property">trigger</span><span class="token operator">:</span>t<span class="token punctuation">,</span><span class="token literal-property property">emitter</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"defaultAction"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"defaultTarget"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"defaultText"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">"destroy"</span><span class="token punctuation">,</span><span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>listener<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>clipboardAction<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">&amp;&amp;</span><span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">828</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">;</span><span class="token string">"undefined"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Element<span class="token operator">||</span><span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>matches<span class="token operator">||</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token class-name">Element</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token operator">=</span>e<span class="token punctuation">.</span>matchesSelector<span class="token operator">||</span>e<span class="token punctuation">.</span>mozMatchesSelector<span class="token operator">||</span>e<span class="token punctuation">.</span>msMatchesSelector<span class="token operator">||</span>e<span class="token punctuation">.</span>oMatchesSelector<span class="token operator">||</span>e<span class="token punctuation">.</span>webkitMatchesSelector<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>t<span class="token operator">&amp;&amp;</span><span class="token number">9</span><span class="token operator">!==</span>t<span class="token punctuation">.</span>nodeType<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">.</span>matches<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">;</span>t<span class="token operator">=</span>t<span class="token punctuation">.</span>parentNode<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">438</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">828</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> <span class="token function-variable function">i</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>delegateTarget<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>target<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>delegateTarget<span class="token operator">&amp;&amp;</span><span class="token function">r</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">destroy</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span><span class="token function">i</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> n<span class="token operator">?</span><span class="token function">i</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">i</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">879</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function-variable function">node</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>t<span class="token operator">&amp;&amp;</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HTMLElement</span><span class="token operator">&amp;&amp;</span><span class="token number">1</span><span class="token operator">===</span>t<span class="token punctuation">.</span>nodeType<span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function-variable function">nodeList</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token string">"[object NodeList]"</span><span class="token operator">===</span>e<span class="token operator">||</span><span class="token string">"[object HTMLCollection]"</span><span class="token operator">===</span>e<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">"length"</span><span class="token keyword">in</span> t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">===</span>t<span class="token punctuation">.</span>length<span class="token operator">||</span>n<span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function-variable function">string</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"string"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">||</span>t <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"[object Function]"</span><span class="token operator">===</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">879</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">438</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>e<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Missing required arguments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Second argument must be a String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Third argument must be a Function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token operator">=</span>e<span class="token punctuation">,</span>u<span class="token operator">=</span>n<span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">=</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">destroy</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">nodeList</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> r<span class="token operator">=</span>t<span class="token punctuation">,</span>o<span class="token operator">=</span>e<span class="token punctuation">,</span>i<span class="token operator">=</span>n<span class="token punctuation">,</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function-variable function">destroy</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token operator">=</span>t<span class="token punctuation">,</span>e<span class="token operator">=</span>e<span class="token punctuation">,</span>n<span class="token operator">=</span>n<span class="token punctuation">,</span><span class="token function">s</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"First argument must be a String, HTMLElement, HTMLCollection, or NodeList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token punctuation">,</span>o<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>u<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">817</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token string">"SELECT"</span><span class="token operator">===</span>t<span class="token punctuation">.</span>nodeName<span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"INPUT"</span><span class="token operator">===</span>t<span class="token punctuation">.</span>nodeName<span class="token operator">||</span><span class="token string">"TEXTAREA"</span><span class="token operator">===</span>t<span class="token punctuation">.</span>nodeName<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">setSelectionRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">||</span>t<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"contenteditable"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">279</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>e<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function-variable function">on</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">fn</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">ctx</span><span class="token operator">:</span>n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">once</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">e</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>_<span class="token operator">=</span>e<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">emit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">&lt;</span>o<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">off</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span>r<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fn<span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span>_<span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span>o<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>length<span class="token operator">?</span>n<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>o<span class="token operator">:</span><span class="token keyword">delete</span> n<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>exports<span class="token operator">=</span>e<span class="token punctuation">,</span>t<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>TinyEmitter<span class="token operator">=</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">n</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>__esModule<span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>default<span class="token punctuation">}</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">d</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> e<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">get</span><span class="token operator">:</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">o</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token number">134</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span>o<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">exports</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token punctuation">}</span><span class="token keyword">var</span> n<span class="token punctuation">,</span>o<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-compose-yml&quot;&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-yaml&quot; data-language=&quot;yaml&quot;&gt;&lt;code class=&quot;l</summary>
      
    
    
    
    <category term="JS-template" scheme="https://jxch.github.io/categories/JS-template/"/>
    
    
    <category term="darknet-ocr" scheme="https://jxch.github.io/tags/darknet-ocr/"/>
    
  </entry>
  
  <entry>
    <title>17.架构师提升</title>
    <link href="https://jxch.github.io/2023/07/12/architect/06.dian-shang-xi-tong/17-jia-gou-shi-ti-sheng/"/>
    <id>https://jxch.github.io/2023/07/12/architect/06.dian-shang-xi-tong/17-jia-gou-shi-ti-sheng/</id>
    <published>2023-07-11T20:09:41.000Z</published>
    <updated>2023-07-11T22:08:48.850Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个架构师仅仅掌握这些“硬”知识、“硬”技能还不够，“<strong>业务驱动技术</strong>”，但是业务领域更多是很多“软”性的、抽象的技能。一旦一个东西呈“软”性的，大家虽然知道这类东西存在，但又难于表述。</p><h1>业务架构</h1><h2 id="业务意识">业务意识</h2><p>互联网时代有个岗位——产品经理。而在互联网大规模发展起来之前，软件行业通常称为“需求分析师”。技术不是无源之水，一旦离开业务纯粹地谈技术，就失去了驱动技术发展的根本要素。另一方面，研发部门的人力资源和时间资源是有限的，而业务需求是无限的，要用有限的资源应对无限的需求，必然存在需求的取舍问题，而这种取舍往往也会影响系统的架构设计。对于一个技术人员，不需要像产品经理或需求分析师一样对需求了如指掌，但具有良好的业务意识却是做业务架构的基本条件。</p><ol><li>需求来自何处？</li><li>真需求还是伪需求<ol><li>技术人员经常会听到要开发一个某某功能、一个某某系统，但“功能”和“系统”并不是需求。需求是要解决的“问题”，而问题一定是系统所要面对的用户问题或客户问题，功能或系统只是解决问题的一种答案而已。</li><li>一个需求被用户或客户提出来，可能经过总监、组长、产品经理层层传导，等传到了技术人员，可能已经不是最初的需求，最后做出来的东西往往不是对方真正想要的。</li><li>所以，作为一个技术人员，当从产品经理接到需求的时候，一定要回溯，明确需求是在什么背景下提出的，究竟要解决用户的什么问题。</li></ol></li><li>产品手段vs技术手段: 通过产品的设计解决技术问题</li><li>需求的优先级: 系统的架构是被需求驱动着一步步迭代、升级</li></ol><h2 id="什么是业务">什么是业务</h2><p>个内容是否算作一个“业务”往往与公司的长期战略、盈利模式、发展阶段、组织架构密切相关，并没有一个标准的划分方式。但抛开这些差异性，一个内容能称为一个“业务”，往往具有一个特点，就是“<strong>闭环</strong>”。</p><ul><li>团队闭环：有自己的产品、技术、运营和销售，联合作战。</li><li>产品闭环：从内容的生成到消费，整条链路把控。</li><li>商业闭环：具备了自负盈亏的能力（即使短期没有，长期也是向这个发展方向）</li><li>纵向闭环：某个垂直领域涵盖从前到后。</li><li>横向闭环：平台模式，横向覆盖某个横切面。</li></ul><p>同时闭环可大可小。</p><ul><li>小闭环:：一个部门内部的某项内容有独立的产品、技术、运营团队，独立运作。</li><li>大闭环：事业群、事业部级别，公司高层战略来决定的。</li><li>更大的闭环：产业上下游，构建完整的生态体系。</li></ul><h2 id="“业务架构”的双重含义">“业务架构”的双重含义</h2><p>前面的案例讨论的“业务”，其实对应的是“业务架构”一词的字面意思，也就是“业务的架构”。这通常关乎大的战略，主要是从商业角度去看，公司高层领导决定的。但对于技术人员来说，讨论业务架构的时候则是另外一个意思:“支撑业务的技术架构”。注意，这里的落脚点在技术上，是从技术的视角看业务应该如何划分。<strong>业务架构既关乎组织架构，也关乎技术架构</strong>，业务架构、组织架构和技术架构三者之间的关系是怎么样的呢？</p><ol><li>先说业务架构的第一重意思。从理论上讲，合理的团队的组织架构应该是根据业务的发展来决定的。不同的公司在不同的发展阶段会根据业务的发展情况，将壮大的业务拆分，萎缩的业务合并。拆分到一定的时候又合并，组织架构相应地跟着调整，相应的技术团队跟着整合，技术架构自然也会跟着变化。这种变化规律在半个世纪前就已经被提出，也就是 <strong>“康威定律”：一个组织产生的系统设计等同于组织之内、组织之间的沟通结构。这也意味着：如果组织架构不合理，则会约束业务架构，也约束技术架构的发展。而组织架构的调整涉及部门利益的重新分配，所以往往也只能由高层来推动。</strong></li><li>业务架构的第二重意思。“支持业务的技术架构”,业务架构和技术架构会相互作用、相互影响。举个例子，对于广告业务，如果认为CPC（效果广告）、CPM（展示广告）、CPT（按时间段计费）是三个业务，可能会各自设计三套技术架构方案，并让三个团队去做；但如果认为是一个业务，会思考这三者之间哪些是共用的，哪些又是个性化的，尽可能把三者通过一个技术架构支撑，让一个团队去做。这种<strong>技术的思考会反过来影响业务，重新思考团队的组织方式，团队的组织方式又会变,接下来又会影响业务的发展方式。</strong></li></ol><h2 id="“业务架构”与“技术架构”的区分">“业务架构”与“技术架构”的区分</h2><p>之所以要谈“分”，是因为经常遇到的情况是：<strong>明明是业务问题，却想用技术手段解决；明明是技术问题，由于技术无法实现，反过来将就业务；可能既不是业务问题，也不是技术问题,而是组织架构问题，是部门利益问题，是公司的盈利模式问题。</strong></p><p>一般技术架构要关注的一系列问题:</p><ol><li>你的系统是在线系统还是离线系统？</li><li>如果是在线系统，需要拆分成多少个服务？每个服务的QPS 是多少，需要部署多少台机器?</li><li>运行方式是多线程，多进程？还是线程同步机制，进程同步机制？</li><li>如果是离线系统？有多少个后台任务？任务是单机，还是集群调度？</li><li>对应的数据库的表设计？是否有分库分表？</li><li>数据库的高可用？</li><li>服务接口的API 设计？</li><li>是否用了缓存？缓存数据结构是怎样的？缓存数据更新机制？缓存的高可用？</li><li>是否用了消息中间件？消息的消费策略？</li><li>是否有限流、降级、熔断措施？</li><li>监控、报警机制？</li><li>服务之间的数据一致性如何保证？比如分布式事务。</li></ol><p>通过上面一系列问题可以看到，技术架构涉及的都是“系统"“服务”“接口”“表”“机器”“缓存”这样技术性很强的词语。这些是开发人员直接可以通过写代码实现的，很务实，没有虚的内容在里面。把上面这些内容梳理一下，归类后就变成了我们经常挂在嘴边的各种架构词汇：</p><ol><li>物理架构（物理部署图）;</li><li>运行架构（多线程、多进程）；</li><li>数据架构（存储系统的选择、数据库表的schema）；</li><li>应用架构（系统的微服务划分）；</li></ol><p>从具体技术到抽象技术，再到业务，所用的词汇会越来越抽象，越来越偏向各自的领域，则在沟通和表达过程中，产生歧义的概率就越大。<strong>实践中只有时刻意识到我们面对的是业务问题，还是技术问题，或是其他的更高层次的问题，才可能在一个正确的层面上去解决。<strong>通过分析，我们知道了“技术架构”究竟代表什么，这也为我们提供了一个参照系。</strong>“业务架构”不是“技术架构”，是“技术架构”外面的东西</strong>。</p><h2 id="业务架构思维">业务架构思维</h2><h3 id="警惕“伪”分层">警惕“伪”分层</h3><p>分层其实不光是一个技术词汇，而是一个通用的思维方式，比如架构图分层，实际的代码、系统是否能按分层架构严格执行呢？如果把所有系统之间的调用关系都梳理出来把依赖关系图画出来，不一定会是这样一个分层结构，很可能是一个网状结构了。产生了伪”分层。</p><ol><li><strong>底层调用上层</strong>。比如某个基础服务调用上层的业务服务，怎么解决呢？<ol><li>要思考业务逻辑是否放错了地方? 或者业务逻辑是否需要<strong>一分为二</strong>，一部分放在业务服务，一部分放在基础服务。也就避免了底层调用上层。</li><li><strong>DIP（依赖反转）</strong>。底层定义接口，上层实现，而不是底层直接调用上层。</li></ol></li><li><strong>同层之间，服务之间各种双向调用</strong>。比如业务服务1、业务服务2、业务服务3 之间都是双向调用。这时就要思考，业务服务1、业务服务2、业务服务3 之间的职责分配是否有问题，出现了服务之间的紧耦合？是否应该有<strong>一个公共的服务</strong>，让公共服务和业务服务1、业务服务2、业务服务3 交互，而三个业务服务之间相互独立?</li><li><strong>层之间没有隔离，参数层层透传，一直穿透到最底层，导致底层系统经常变动</strong>。例如，App 一直发版本，为了实现兼容，服务器端会根据不同的版本调用不同的函数。比如客户端要支撑各式各样的业务，因此肯定有类似 businessType 用于区分不同业务，或者说区分同一个业务的不同业务场景。businessType 字段一旦透传到最底层的基础服务，在基础服务里面都能看到if busessType = XXX 这样的代码，就是典型的上层业务多样性透传到了最底层。这种情况下，虽然是严格分了层，层层调用，但“底层服务”已经不是底层服务，因为<strong>每一次业务变动都会导致从上到下跟着一起改</strong>。</li><li><strong>聚合层特别多，为了满足客户端需求，各种拼装</strong>。遇到这种情况，往往意味着<strong>业务服务层太薄，纯粹从技术角度拆分了业务。而不是从业务角度让服务成为一个完整的闭环，或者说一个领域。</strong></li></ol><p>一个优秀的分层架构应该具有的典型特征如下。</p><ol><li><strong>越底层的系统越单一、越简单、越固化；越上层的系统花样越多、越容易变化。要做到这一点，需要层与层之间有很好的隔离和抽象。</strong></li><li>做到了上面一点，则要做到<strong>层与层之间严格地遵守上层调用下层的准则</strong>。</li></ol><h3 id="边界思维">边界思维</h3><p>在所有的架构思维模式中，如果说最终只能留下一种思维模式，那就是边界思维。腾讯公司前CTO 张志东曾说过“<strong>优雅的接口，龌龊的实现</strong>”，可以说是边界思维最好的昵释。在技术领域,“封装”“面向接口的编程”等技术，也都是边界思维的体现。只要一个系统对外的接口是简洁、优雅的，即使系统内部混乱，也不会影响到外界其他系统。相当于<strong>把混乱的逻辑约束在一个小范围内，而不会扩散到所有系统</strong>。边界思维是一种通用的思维方式，从小到大来，边界思维在不同层面的均有体现。</p><ol><li>对象层面（SOLID 原则）：在面向对象的五大原则中，第一个原则S 就是<strong>单一职责原则</strong>（The Single ResponsibilityPrinciple）。通俗地讲，就是一个函数、一个类、一个模块只做一件事。不要把不同的职责杂糅在一起,这就是边界思维的一种体现。</li><li>接口层面：对于开发人员来说，做一个系统往往先想到的是如何实现。而利用边界思维，首先想到的不是如何实现，而是把系统当作一个黑盒，看系统对外提供的接口是什么。接口也就是系统的边界。接口定义了系统可以支持什么、不支持什么。所以，<strong>接口的设计往往比接口的实现更重要</strong>！站在使用者的角度来看，并不在意接口如何实现，而更在意接口的定义是否清晰，使用是否方便。具体来说，就是：接口的输入、输出参数分别是什么？哪些参数可选，哪些必选？如果输入参数很多，为什么不是分成多个接口？设计策略是什么？接口是否幂等？各种异常场景接口的返回结果都是什么?</li><li>产品层面：除了技术，产品同样需要有边界思维。对于产品，常说的一句话是:内部实现很复杂，用户界面很简单。<strong>把复杂留给自己，把简单留给用户</strong>！尤其现在的AI 产品，更是把这句话发挥到了极致。AI 算法本身很复杂，但对用户来说，使用却越来越“傻瓜化”，以前还有图形界面，现在直接对着系统说句话，它就明白了。</li><li>组织架构层面：组织的各个部门之间如果没有非常清晰的边界，就会导致<strong>该自己做的事情不做，互相推诿、踢皮球；不该自己做的事情抢着做，你争我夺</strong>。最后整个体系权责不分，做事效率低下，还容易产生各种问题。</li></ol><p>回到系统，不管用哪种分析方法和设计方法，最终必须保证每个系统有清晰的边界，各自分工清晰。<strong>无论谁要了解这个系统，他不用看这个系统是怎么实现的，只要看系统的接口，就能知道系统支持什么，不支持什么</strong>。<strong>边界思维的重点在于“约束”，是一个“负方法”的思维方式</strong>。什么意思呢? 比如要看一个开源软件的功能，<strong>要看的不是它能做什么，而是它不能做什么</strong>！“不能做什么”决定了系统的边界，或者说它的“极限”。做架构尤其如此，<strong>架构强调的不是系统能支持什么，而是系统的“约束”是什么</strong>，不管是业务约束，还是技术约束。<strong>没有“约束”，就没有架构</strong>。一个设计或系统，<strong>如果“无所不能”，则意味着“一无所能”</strong>。</p><h3 id="系统化思维">系统化思维</h3><p>与边界思维相对应的是系统化思维。哲学中有一句话:事物之间的普遍联系。通俗的说法就是:不能头痛医头，脚痛医脚。头痛的时候，可能原因不在头上，而是身体其他部位出了问题引发的头痛。</p><ol><li>比如现在有一个系统A 和系统B，应用边界思维，在两个系统之间定义了接口。但随着业务的发展，发现每次来新的需求，两个系统都要跟着一起改，之间的接口也不够用，要么增加新接口，要么为之前的接口增加新参数。原因可能是在最初设计的时候，接口定义得不合理；也可能是这两个系统的逻辑本身就耦合得很紧。应该把系统A 和系统B 重新放在一起整体考虑，然后一致对外提供统一的接口，对内，系统A 和系统B 就是一个系统的两个联系紧密的部分。这就是系统化思维的一种体现，<strong>把不同的“东西”串在一起考虑，而不是割裂后分开来看。</strong></li><li>系统化思维的另外一个体现，就是遇到事情要<strong>刨根问底</strong>。如果遇到了问题A，经过分析，是原因1 导致的;原因1 又是如何产生的，是原因2 导致的;原因2 又是如何产生的，是原因3 导致的……如此追到最后，直至事物的本质。这点在物理学中叫作“第一性原理”，在哲学上叫作“道”。无论是遇到技术问题，还是产品问题、业务问题，都可以利用这种思维方式。这个倒追的过程会让你探究到事物与事物之间的普遍联系。<ul><li>比如一个电商系统中商品库存。站在C 端来看：用户下单，要减库存；用户发生客退，要加库存；站在B 端供应商角度来看：采购，要加库存；退供，要减库存；站在内部商务和物流人员角度来看：调拨，一个仓库减库存，另一个仓库加库存。无论C 端的下单、客退，还是B 端的采购、退供，还是内部的调拨，都是很复杂的业务流程，对应的是不同的团队开发的不同系统。<strong>单独去看每一个业务的每一个系统，都没有问题，但要系统性地把这五大类业务串在一起来看，可能库存的账目是对不齐的。</strong></li><li>这就是为什么电商系统里<strong>库存往往是单独的微服务</strong>，库存不仅仅是一个数字<code>&lt;SKU,数量&gt;</code>，然后对这个数字进行加加减减，逻辑很简单。但<strong>实际问题在于库存不是一个简单的数字，而是一个复杂的数据模型，有自己单独的领域。</strong></li></ul></li></ol><h3 id="利益相关者分析">利益相关者分析</h3><p>做一个系统与做一个产品一样，<strong>首先要了解用户是谁。在架构里面称为利益相关者</strong>。为什么谈业务架构，要先谈“利益相关者”呢?</p><ol><li>利益相关者其实是从“外部”来看系统。把系统当作一个<strong>黑盒子</strong>，看为哪几类人服务。这其实也就<strong>定义了整个系统的边界，定义了整个系统做什么和不做什么</strong>。</li><li>前面说到一个词“业务”，业务具有“闭环”的特点。而<strong>利益相关者就是一个最好的看待业务的视角</strong>。</li><li><strong>每个利益相关者代表了一个视角</strong>。站在C 端用户的视角和B 端商家的视角上，对系统有不同的看法。系统很复杂，无法从一个角度全面认识，每个视角都是盲人摸象，只看到系统的一部分。</li><li>利益相关者往往也对应了一种业务划分、系统划分。<strong>根据不同的利益相关者,可以划分成不同的系统和业务</strong>。</li></ol><p>所以，当谈到系统的时候，<strong>首先要确定的是系统为哪几类人服务，同哪几个外部系统交互，也就确定了系统的边界</strong>。</p><h3 id="非功能性需求">非功能性需求</h3><p>软件有功能性需求和非功能性需求之分。其实软件的非功能性需求有很多，不同类型的软件的侧重点也有差别。互联网比较关注的有：</p><ol><li><strong>并发性</strong>。对于C 端的系统，大家首先关注的是系统能抵抗多大的流量。说通俗点，是可以承受多少人同时访问。常用的衡量指标是TPS 和QPS，平均响应时间/最大响应时间，并发数。</li><li><strong>可用性</strong>。从服务角度来说，一个服务不可用有两层意思:<ul><li>机器宕机，不能对外提供服务，直接抛错;</li><li>机器虽然没有宕机,但是超时。这涉及“性能”问题。</li></ul></li><li><strong>一致性</strong>。比如数据库的参照完整性、事务、缓存与数据库数据同步、多备份数据一致性问题。</li><li><strong>稳定性和可靠性</strong>。“稳定性”指系统没有任何未定义的行为，体现在如下几方面:<ul><li>所有的if-else 语句里面,没有不处理的分支;</li><li>所有的 API 调用，每种异常返回值都有处理;</li><li>考虑内存、磁盘的上限;</li><li>系统不会时不时冒出一个问题出来;</li><li>出了问题,有很好的日志监控,能快速修复;</li><li>系统的QPS 不会有抖动（除非业务有变化，比如大促），是一条平滑的</li><li>发布新版本,有回滚方案;</li><li>新系统上线,灰度平滑切换;·</li><li>通过压力测试;</li></ul></li><li><strong>可维护性</strong>。与可维护性密切相关的是“可理解性”,或者说“<strong>代码可读性</strong>”。体现在如下几个方面:<ul><li>系统架构设计简单，接口简洁，表数据关系清晰;</li><li>老人离职,新人接手，无须很长时间就能厘清代码逻辑;</li><li>系统功能不耦合,改一个地方不会牵动全身;</li><li>系统某些模块即使时间久远,也有人能厘清内部逻辑;</li></ul></li><li><strong>可扩展性</strong>。体现在如下几方面:<ul><li>来了一个新需求，伴随一些新功能，可以在现有系统上灵活扩展</li><li>没有地方写死，可以灵活配置;</li><li>容易变化的逻辑没有散落在各个系统里面，不需要多个地方跟着一起改。</li></ul></li><li><strong>可重用性</strong>: 开发新的需求，旧的功能模块拿过来可以直接用。</li></ol><p>通常来讲，<strong>对于C端应用，会更关注高并发和高可用，然后有的业务（比如支付）对一致性要求非常高；对于B端业务，会更关注系统的可维护性、可扩展性性</strong>，系统才能不拖业务的后腿，可以快速地支撑各种各样的复杂业务需求的开发。</p><h3 id="抽象">抽象</h3><p>抽象是人类思维认知的一个基本能力，在现实生活和各种学科中都会遇到。具体到计算机的软件架构里，就是<strong>分析和分解各种概念、实体、系统，然后又造出一些新的概念、框架的过程</strong>。</p><ul><li>计算机中的抽象<ul><li>存<strong>储的抽象: 关系型数据库,表格</strong>。现实世界中的数据各式各样，但到了计算机中，有一种东西叫关系型数据库。通俗地讲，就是一张张的表格，然后表格之间通过主外键关联起来。这其实就是一种抽象，把现实世界中花样繁多的数据形式进行规整,最终变成了一张张的表格。</li><li><strong>计算的抽象是顺序、选择、循环</strong>。再复杂的算法，逻辑计算到了计算机里面，最终都会变成顺序、选择、循环三种语句。现实的逻辑很复杂，但计算机里面的逻辑只有三种。</li><li><strong>面向对象的方法学: 父类与子类、继承</strong>。在面向对象的方法学里面，提取共性形成父类，提高代码复用性，这是抽象。</li><li><strong>面向接口的方法学</strong>。把面向对象的方法再往前推进一步，就是所谓的“面向接口的方法学”。<strong>接口是交互双方的一种协议，也是对交互细节的一种抽象</strong>。</li></ul></li><li>怎么做抽象<ul><li><strong>分解：找出差异和共性</strong>。要做抽象，首先要做的是分解。只有分解，才知道两个事物间的差异和共性。</li><li><strong>归纳：造词</strong>。找到了共性和差异，把共性的部分总结成一个新的东西，造一个新词来表达“共性”，就是归纳，也是抽象。所以抽象的过程往往也是一个“造词”的过程。</li></ul></li><li>抽象带来的问题: 抽象的好处就是找出共性、简化事物，但抽象也会造成问题<ul><li><strong>抽象造成意义模糊</strong>。越抽象的东西往往越“虚”，最后就变成“空洞的大话”，华而不实。不同人对“虚”的东西理解都不一样，大家在沟通时往往不在同一个频道中，牛头不对马嘴。</li><li><strong>抽象错误：地基不稳</strong>。没有做分解就分析，会把一个非原子性、容易变化的东西抽象出来，作为整个系统的基础。</li><li><strong>抽象造成关键特征丢失</strong>。把事物的某个重要的关键特征抽象掉了，会导致对事物的认知偏差。</li><li><strong>抽象过度</strong>。抽象是为了提供灵活性和扩展性。但如果业务在某一方面变化的可能性很小，则可能压根不需要抽象。</li></ul></li></ul><h1>技术管理</h1><h2 id="能力模型">能力模型</h2><ul><li>格局<ul><li>系统的定位是什么？它能创造哪些核心价值？</li><li>开发这个系统的背景是什么？为什么以前不做，现在要做？是因为业务发展到了一定规模？还是开发资源现在有多余，没事可干?</li><li>系统在整个组织架构中处于什么位置？与这个系统关联的其他系统目前处于什么状况？</li><li>产品经理如何看待这个系统？技术负责人/CTO 如何看得这个系统？</li><li>这个系统的需求处于比较确定清晰的状态，还是有很大的模棱两可的空间，核心点大家有没有想清楚?</li><li>这个系统所用的技术体系是比较老，还是最新的?</li><li>对于业界类似的系统，别的公司是如何做的?</li><li>在做一件事情之前，会对所做的事情有一个“全局把握”，风险如何？挑战在哪？提前都有心理准备</li><li>不同层次的人聚焦的范围不一样。如果能把自己的“范围”往外扩大一圈，这对自己做“本职工作”会很有益处。而这，就是“格局”</li></ul></li><li>技术历史<ul><li>“格局”是从空间的角度看待问题，那么“历史观”就是从时间的角度看待问题。</li><li>任何一种技术，都不是凭空想象出来的，它一定是要解决某个特定问题而产生的。</li><li>这个特定问题一定有它的历史背景：因为之前的技术在解决这个特定问题时不够好或有其他副作用，所以才发明了这个新技术。所以，看待一个技术或方法论，需要把它放到“历史长河”中去，看它在历史中处于什么位置。</li></ul></li><li>抽象能力<ul><li>“抽象能力”已经有所说明，这个词听起来很“虚”。可作为架构师，就是需要这种“务虚思维”。</li><li>抽象也是一个“层次”结构，从最底层到最上层，在不同工作阶段需要在不同的抽象层级中思考。</li><li>很多写代码的人都习惯“自底向上”的思维方式。当讨论需求的时候，他首先想到的是这个需求如何实现，而不是这个需求本身是否合理？这个需求与其他需求有何关联关系。</li><li>这种过早考虑“实现细节”的思考方式会让我们“只见树木，不见森林”，最终淹没在错综复杂的各种细节之中，因层次混乱，往往把握不住重点。</li><li>假如做一个新的系统，从“抽象”到“细节”，应该考虑:<ul><li>每个需求的合理性?</li><li>这个系统的领域模型是什么样的?</li><li>这个系统应该在旧的上面改造?还是应该另起炉灶?</li><li>这个系统可以分成几期，分期实施?</li><li>这个系统要拆分成几个子系统?·每个子系统又要拆分出多少个模块?</li><li>系统的表设计?API 接口设计?系统之间的消息传输如何实现?</li></ul></li><li>从上到下，是一个逐级细化的过程，并目进入到下一级之后，上一级可能又会退回去修改。</li></ul></li><li>深入思考的能力<ul><li>深入思考能力主要指“技术”的深度。关于“广度”，在“格局”层面已经包含。</li><li>“深度”并不是要在所有领域都很深。人一生的精力是有限的，我们不可能深入掌握所有技术领域，但至少需要对于一个领域非常精通。</li><li>拥有这种深度并不代表要胜任当前的工作必须达到这种要求，而是要养成这种“深入思考的习惯”，当我们在思考其他问题时也会带着这种“习惯”。</li><li>由于技术一直在更新换代，当面对一个新技术的时候，如果具有深入思考的能力和习惯,对新技术的理解往往也会更透彻。</li><li>同时，“深度”会让你对“技术风险”有更加清醒的认知。在做一个项目的时候，可能会前发现里面潜在的“坑”，而不是等到实施了才发现问题，被动解决。</li></ul></li><li>落地能力<ul><li>落地能力就是通常所说的“执行力”,取决于很多因素。首先,架构方案必须是能够落地的而不是只能停留在PPT 上面。对于一个技术管理者，需要跟踪从架构设计到架构落地的完整过程，在落地过程中发现问题，实时修正，才可能真正做到“理论”与“实际”的统一。</li><li>然后是项目管理的问题，需要对项目中任何可能存在的不确定因素、阻碍项目进度的因素进行把控。在这些不确定因素里面，很多是“人”的因素，而不是“技术”的因素。再复杂的系统,都是由“人”开发出来的。而人多了之后，与“人”相关的问题会自然产生:沟通不充分、组织混乱、职责不清。作为一个技术管理者，需要意识到这些问题的存在，然后在各种障碍之下找到一条路线,去达成业务和团队目标。</li></ul></li></ul><h2 id="影响力的塑造">影响力的塑造</h2><ul><li>关键时候能顶上<ul><li>某个问题困扰了团队一个星期，也没有人能搞定;</li><li>某个成员离职，他负责的模块没有人接手;</li><li>某位用户反映的问题像牛皮癣一样，总是时不时发生,无法根治;</li><li>某个需求发生工期延误，到了快上线的时候却上不了;</li></ul></li><li>打工思维和老板思维<ul><li>这个产品的价值究竟在哪?</li><li>这个产品有什么问题，如何改进?</li><li>团队的协作流程有什么问题，如何改进?</li><li>技术架构有什么问题，如何改进?</li><li>某些用户投诉一直没解决，如何处理?</li></ul></li><li>空杯心态：术业有专攻。水平再高的人，也只是在某一个领域很强换一个其他的领域，可能什么都不懂。<ul><li>任何时候，我们需要意识到自己的“无知”。只有意识到自己是有“局限的”，才可能不断去听取别人的意见，不断改进自己的工作方法,提升自己的专业能力和视野。否则就会一直待在自己的舒适区里,刚愎自用。</li></ul></li><li>持续改进：世界上从来没有能做到100 分的事情，只要想“鸡蛋挑骨头”，总可以找出要改进的地方<ul><li>所以要有“批判性思考”的习惯。不能觉得“差不多”就可以，要追求极致，其实有很多事情要做。</li></ul></li><li>建言献策<ul><li>接上面的问题，如果有“批判性思考”的能力，能看到一个组织存在的各种问题，并想出应对的解放办法。然后多和同事、领导沟通这些事情，无论对于个人成长还是组织，都是一个正向作用。</li></ul></li></ul><p>最后换位思考一下:如果我们看到公司某个同事在关键时候能顶上，做事追求极致，思考总是很全面，对业务的了解总是比其他技术人员要多，总是很虚心地接受意见，时不时地给公司提出自己的建议。是不是觉得这个人很靠谱，觉得这个人适合带团队。</p><h2 id="团队能力提升">团队能力提升</h2><ul><li>不确定性与风险把控：技术管理的首要任务是项目管理。从人的认知来讲，做任何事情，思路都是从一个“朦胧”到逐步“清晰”的过程，项目的进展也是一个从思路、到方案、到落地的细化过程。在这个过程中，不可避免地存在各种“灰度”，或者说“不确定性”。而项目管理就是要提前防范各种“不确定性”，并采取相应措施，让整个团队、项目克服重重干扰，成功到达终点。<ul><li>需求的不确定性：很可能项目在一个想法没有完全想清楚的情况下就开始了实施。遇到这种情况，作为技术负责人，需要和产品经理、相关业务方、上级领导等进行广泛的沟通，最终在这个事情上达成“共识”：到底哪些是东西清晰的，我们可以开始做,哪些还需要进一步思考和细化</li><li>技术的不确定性：必须在项目早期做尽可能多的调研和测试。对于引入的技术框架，哪些特性可以支持、哪些不能支持;对于技术选型，不同方案的优缺点都是什么。尤其是一些关键的技术细节，如果在前期不调研，等到中后期才发现某个框架无法支持或有问题,可能对整个的技术架构和项目进度造成严重影响。</li><li>人员的不确定性：不要把项目最核心的部分让一个人开发维护，导致别人无法插手。要分摊风险，在技术的架构设计层面，保证整个系统耦合性不能太高，根据团队成员的水平，每个人都可以承担一块东西。这样即便某个人离职，也有相应的人可以补上。</li><li>组织的不确定性：公司越大，业务越复杂，部门越多。随便做一个项目，都可能与好几个业务部门打交道。这些部门可能还在异地，平时只能即时通信，或者远程电话沟通。对于这种情况，在项目前期必须要做尽可能多的沟通，调研对方提供的业务能力，哪些目前有,哪些还在开发中，哪些还没有开发。在充分沟通的基础上，和对方敲定排期表，不定期地同步进度，保证对方的进度和自己在一个节奏上。</li><li>历史遗留问题：有些老项目的技术架构很清晰，文档清楚，业务清楚，还有对项目熟悉的其他同事;也有些遗留项目欠了很多技术债，之前的开发人员也走了，业务人员很多都熟悉。对于这种情况，需要对项目进行完整的梳理:从产品到技术，找各个接口人沟通，可能经过了两三个月，才对整个系统有了一个全局的把控。总之，要有“风险把控”的意识，在项目早期努力地想出各种各样的“不确定性”，未雨绸缪。</li></ul></li><li>以价值为中心的管理<ul><li>如何衡量这些项目的价值大小：有多少人使用了这个开源项目</li><li>第一个层次：系统有多少个业务模块，功能多么强大，采用了多少新技术,采用了某个先进的算法</li><li>第二个层次：在所做的所有工作中，最核心的是采取了哪种措施?最终可能会抽象出一到两个。再追问一下,这一到两个大的技术改进有什么价值，通常都会追问到软件的各个非功能性需求：<ul><li>可重用性。做了某个Jar 包、组件、服务，别人不再需要重复造轮子。</li><li>可扩展性。来了一个新的需求，只需要配置一下或做很简单的代码开发即可实现，不需要改动很多系统。</li><li>可维护性。整个系统解耦做得很好，代码也很整洁。叠加功能或找人接手都比较容易。</li><li>高性能。用户体验很好，所有请求都在100ms 内返回。</li><li>高并发。能支持千万到亿级的用户并发访问。</li><li>稳定性。系统时不时出问题、宕机，已经把这些问题都解决了，还增加了监控，出问题会立即报警。</li><li>高可靠。做了灾备方案，即使某个机器宕机，系统也不受影响。</li><li>一致性。做到了强一致性,极大地提高了业务体验。</li></ul></li><li>第三个层次：所做的系统为公司带来了什么业务价值<ul><li>极大提升了用户体验?因此促进了用户增长?提高了用户的活跃度?</li><li>为公司增加了收入?</li><li>降低了公司的研发成本?</li><li>提升了公司的运维效率?</li><li>为公司开辟了一个新的市场?</li></ul></li><li>第四个层次：站在公司的角度来看，公司是一个在市场经济中追求利润最大化的组织。从这个角度来看，技术也好，产品也好，运营销售也好，最终目的都是要增加公司的利润，即使短期不盈利，长期也是要盈利的。而增加利润，要么“开源”，要么“节流”。所以做的任何东西的价值，基本都会被归结到从这个层次去评判。当然，还有一类是“战略性投入”的项目，虽然它本身不直接挣钱或挣钱很少，但是为了支撑其他盈利的核心业务而能发挥重要作用。</li><li>在这四个层次之外，当然还可能会涉及研究性质的技术、技术的普惠性、技术对整个社会的促进作用等,这已经超出了某个业务的技术范畴。目前国内的互联网公司这个方面比较少，国外的Google 等做的比较好。</li><li>以“价值”为中心的管理，会让人避免陷入“无效忙碌”的状态: 整个团队天天忙得不亦乐乎，做各种功能，解决各种问题，但回过头来想想，到底有多少东西是有“价值”的?</li></ul></li><li>团队培养：有些技术团队的负责人水平很高，解决问题迅速，但团队成员技术平平，遇到问题都需要负责人亲自上阵解决、累个半死，团队整体非常低效，成员得不到成长，这是典型的缺乏团队培养的思维和意识的案例。<ul><li>技术能力：要培养人，首先得“识人”。只有清楚地知道团队成员的技术能力层次，才能针对不同层次的人设置不同的培训内容。<ul><li>初级：全部是“面条式”代码，超长类、超长函数，各种晦涩难懂的if-else。写出来的代码时常出问题，且长时间定位不到问题,对写的功能无法完全掌控<ul><li>需要时常做代码评审，需要读《数据结构与算法》《代码整洁之道》之类的书籍，培养代码思维</li></ul></li><li>中级：能熟练地完成各种功能开发，问题少，出现问题能快速解决，代码模块化程度比较高，系统稳定，有业务运维的意识功底深厚，能解决各种开发中的“疑难杂症”<ul><li>要培养系统设计能力</li></ul></li><li>高级：熟悉业务,能根据业务设计出合理的技术方案<ul><li>虽然有系统设计能力，但不够深入,缺乏完善的方法论</li></ul></li><li>资深：对技术和业务都有深刻的思考，能对大规模、跨团队的复杂系统进行很好的架构设计。<ul><li>就解决问题来讲，技术已不是问题，需要发展的是业务能力，成为某个领域的技术领军人物</li></ul></li><li>对于一个技术团队来说，绝大多数都处于前三个层次，在技术上还有很多的上升空间。在这种情况下，需要在完成业务需求的同时，让团队成员的技术水平不断提高。可以不定期地举行技术培训、技术分享，在整个团队中形成一个较好的技术的文化氛围,形成一个人带人、人帮人的协作氛围。</li></ul></li><li>独立意识：独立非常的关键，无论对于任何级别的人，都需要独立。所谓独立，就是能掌控事情。交给一个功能开发，能独自把功能做得很好;交给一个模块，能把模块快速开发完，运行稳定;交给一个系统，能把系统从设计，到编码、上线，完整地接住;交给一个项目，能带领一个小团队从需求开始一直到上线完成整个项目，不需要上级操心,按时按质地交付。做到这一步，意味着团队的每个人在自己所处的层次都是可“托付”的，否则就会频繁出现“补位”。组长干组员的活，经理干组长的活，总监干经理的活，副总裁干总监的活……层层错位,最后整个组织缺乏“顶层设计”。</li><li>思维能力：当团队成员遇到问题时，很多人的解决办法是，告诉他问题的解决办法，然后让他把这个问题解决好。如果只做到这一步，则没有起到培养的作用。对于一个团队来说，解决项目中遇到的问题只达到了及格分数。更需要在解决项目问题之上升华一层,也就是培养思维能力。<ul><li>思维能力的培养只能靠平时，在面对一个个的问题时，通过一次次的讨论来言传身教。面对问题要刨根问底，深挖问题的背景，掌握解决问题的办法背后的技术原理，研究是否有更好的解决办法……如此一来，思维能力慢慢就会提高。</li><li>每个人在职场上工作，都是要养家糊口的。站在团队成员的角度去想下:如果跟着你干，能力没什么提升，薪资待遇也没什么增长，公司业务前景也看不到，为什么会跟着干呢?</li><li>所以，作为一个管理者，要多去赋能他人、成就他人，做项目只是一个过程，最终是要打造一个极具战斗力的团队。有了这样的团队，可以在公司发展的不同阶段自如地切换到不同的业务。</li></ul></li></ul></li></ul><h1>总结梳理</h1><p>**业务驱动技术：**需求来自何处？真需求还是伪需求？产品手段vs技术手段？需求的优先级？什么是业务：闭环</p><p>明明是业务问题，却想用技术手段解决；明明是技术问题，由于技术无法实现，反过来将就业务；可能既不是业务问题，也不是技术问题,而是组织架构问题，是部门利益问题，是公司的盈利模式问题，实践中只有时刻意识到我们面对的是业务问题，还是技术问题，或是其他的更高层次的问题，才可能在一个正确的层面上去解决，<strong>“业务架构”不是“技术架构”，是“技术架构”外面的东西</strong></p><h2 id="业务架构">业务架构</h2><ul><li><p><strong>业务架构既关乎组织架构，也关乎技术架构</strong></p><ul><li><p>**“康威定律”：一个组织产生的系统设计等同于组织之内、组织之间的沟通结构。**这也意味着：如果组织架构不合理，则会约束业务架构，也约束技术架构的发展。而组织架构的调整涉及部门利益的重新分配，所以往往也只能由高层来推动</p></li><li><p>技术的思考会反过来影响业务，重新思考团队的组织方式，团队的组织方式又会变,接下来又会影响业务的发展方式</p></li></ul></li><li><p><strong>警惕“伪”分层：底层调用上层；同层之间，服务之间各种双向调用；层之间没有隔离，参数层层透传，一直穿透到最底层，导致底层系统经常变动；聚合层特别多，为了满足客户端需求，各种拼装</strong>（业务服务层太薄，纯粹从技术角度拆分了业务。而不是从业务角度让服务成为一个完整的闭环，或者说一个领域）</p><ul><li><p>越底层的系统越单一、越简单、越固化；越上层的系统花样越多、越容易变化。要做到这一点，需要<strong>层与层之间有很好的隔离和抽象。</strong></p></li><li><p><strong>层与层之间严格地遵守上层调用下层的准则</strong></p></li></ul></li><li><p><strong>边界思维：优雅的接口，龌龊的实现；把混乱的逻辑约束在一个小范围内，而不会扩散到所有系统</strong></p><ul><li><p>**单一职责原则；接口的设计往往比接口的实现更重要；把复杂留给自己，把简单留给用户；**组织的各个部门之间边界清晰</p></li><li><p><strong>边界思维的重点在于“约束”，是一个“负方法”的思维方式：要看的不是它能做什么，而是它不能做什么</strong></p><ul><li><p><strong>架构强调的不是系统能支持什么，而是系统的“约束”是什么</strong></p></li><li><p><strong>没有“约束”，就没有架构；如果“无所不能”，则意味着“一无所能”</strong></p></li></ul></li></ul></li><li><p><strong>系统化思维</strong></p><ul><li><p><strong>把不同的“东西”串在一起考虑，而不是割裂后分开来看</strong></p></li><li><p>**刨根问底：**单独去看每一个业务的每一个系统，都没有问题，但要系统性地把这五大类业务串在一起来看，可能库存的账目是对不齐的。<strong>所以库存往往是单独的微服务，实际问题在于库存不是一个简单的数字，而是一个复杂的数据模型，有自己单独的领域</strong></p></li></ul></li><li><p>**利益相关者分析：**首先要确定的是系统为哪几类人服务，同哪几个外部系统交互，也就确定了系统的边界</p><ul><li><p>把系统当作一个<strong>黑盒子</strong>，看为哪几类人服务。也就<strong>定义了整个系统的边界，定义了整个系统做什么和不做什么</strong>。</p></li><li><p>业务具有“闭环”的特点。<strong>利益相关者就是一个最好的看待业务的视角</strong>。</p></li><li><p><strong>每个利益相关者代表了一个视角</strong></p></li><li><p><strong>根据不同的利益相关者, 可以划分成不同的系统和业务</strong>。</p></li></ul></li><li><p><strong>非功能性需求：并发性；可用性；一致性；稳定性和可靠性；可维护性；可扩展性；可重用性；</strong></p><ul><li><p>对于C端应用，会更关注高并发和高可用，然后有的业务（比如支付）对一致性要求非常高；</p></li><li><p>对于B端业务，会更关注系统的可维护性、可扩展性性</p></li></ul></li><li><p>**抽象：**分析和分解各种概念、实体、系统，然后又造出一些新的概念、框架的过程</p><ul><li><p>计算机中的抽象：存储的抽象；计算的抽象是顺序、选择、循环；面向对象的方法学；面向接口的方法学；</p></li><li><p>怎么做抽象：<strong>分解（找出差异和共性）；归纳（造词）；</strong></p></li><li><p>抽象带来的问题：抽象的好处就是找出共性、简化事物</p><ul><li>抽象造成意义模糊；抽象错误；抽象造成关键特征丢失；抽象过度</li></ul></li></ul></li></ul><h2 id="技术管理">技术管理</h2><ul><li><p>**能力模型：**格局；技术历史 ；抽象能力（从上到下）；深入思考能力；落地能力（执行力&amp;项目管理）；</p></li><li><p>**影响力的塑造：**关键时候能顶上；老板思维；空杯心态；持续改进；建言献策；</p></li><li><p><strong>团队能力提升</strong></p><ul><li><p>不确定性与风险把控：需求；技术；人员；组织；历史遗留问题；</p></li><li><p>以价值为中心的管理：技术；非功能性需求；业务价值；公司角度；“战略性投入”项目；研究性普惠性技术；避免陷入“无效忙碌”的状态</p></li><li><p>团队培养</p><ul><li><p>技术能力（识人与培养）：初级、中级、高级、资深</p></li><li><p>独立意识：每个人在自己所处的层次都是可“托付”的</p></li><li><p>思维能力</p><ul><li><p>通过一次次的讨论来言传身教</p></li><li><p>每个人在职场上工作，都是要养家糊口的，多去赋能他人、成就他人</p></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个架构师仅仅掌握这些“硬”知识、“硬”技能还不够，“&lt;strong&gt;业务驱动技术&lt;/strong&gt;”，但是业务领域更多是很多“软”性的、抽象的技能。一旦一个东西呈“软”性的，大家虽然知道这类东西存在，但又难于表述。&lt;/p&gt;
&lt;h1&gt;业务架构&lt;/h1&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="架构师" scheme="https://jxch.github.io/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>16.ES数据迁移</title>
    <link href="https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/16-es-shu-ju-qian-yi/"/>
    <id>https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/16-es-shu-ju-qian-yi/</id>
    <published>2023-07-11T12:00:11.000Z</published>
    <updated>2023-07-11T12:08:46.606Z</updated>
    
    <content type="html"><![CDATA[<p>不同方法的迁移步骤：</p><ul><li>elasticsearch-dump：适合数据量不大，迁移索引个数不多的场景</li><li>snapshot：适用数据量大的场景，原理就是从源ES集群创建数据快照，然后在目标ES集群中进行恢复<ul><li>创建快照前必须先创建repository仓库，一个repository仓库可以包含多份快照文件</li><li>源ES集群中创建snapshot</li><li>目标ES集群中创建repository</li><li>移动源ES集群snapshot至目标ES集群的仓库</li><li>从快照恢复</li></ul></li><li>reindex：跨索引、跨集群的数据迁移，应用于大量集群数据的迁移<ul><li>配置reindex.remote.whitelist参数，指明能够reindex的远程集群的白名单</li><li>调用reindex&nbsp;api</li></ul></li><li>logstash</li></ul><p>特点：</p><ol><li>elasticsearch-dump和logstash做跨集群数据迁移时，都要求用于执行迁移任务的机器可以同时访问到两个集群，不然网络无法连通的情况下就无法实现迁移。而使用snapshot的方式没有这个限制，因为snapshot方式是完全离线的。因此elasticsearch-dump和logstash迁移方式更适合于源ES集群和目标ES集群处于同一网络的情况下进行迁移，而需要跨云厂商的迁移，比如从阿里云ES集群迁移至腾讯云ES集群，可以选择使用snapshot的方式进行迁移，当然也可以通过打通网络实现集群互通，但是成本较高。</li><li>elasticsearchdump工具和mysql数据库用于做数据备份的工具mysqldump工具类似，都是逻辑备份，需要将数据一条一条导出后再执行导入，所以适合数据量小的场景下进行迁移；</li><li>snapshot的方式适合数据量大的场景下进行迁移。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不同方法的迁移步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch-dump：适合数据量不大，迁移索引个数不多的场景&lt;/li&gt;
&lt;li&gt;snapshot：适用数据量大的场景，原理就是从源ES集群创建数据快照，然后在目标ES集群中进行恢复
&lt;ul&gt;
&lt;li&gt;创建快照前</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="ES" scheme="https://jxch.github.io/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>15.海量数据</title>
    <link href="https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/15-hai-liang-shu-ju/"/>
    <id>https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/15-hai-liang-shu-ju/</id>
    <published>2023-07-11T10:22:23.000Z</published>
    <updated>2023-07-11T22:09:25.960Z</updated>
    
    <content type="html"><![CDATA[<h1>存储系统的技术选型</h1><h2 id="技术选型时应该考虑哪些因素">技术选型时应该考虑哪些因素</h2><p>首先需要确定的是系统的类型，<strong>是一个在线业务系统，还是一个分析系统</strong>？在线业务系统对应的术语是OLTP ( On-line Transaction Processing，在线事务处理)，分析系统对应的术语是OLAP( Off-line Analytical Processing，离线分析处理)。</p><p>第二个需要考量的维度是<strong>数据量</strong>，系统需要处理的数据在什么量级？这里的数据量不需要特别精确，能估计到量级就可以了。在估算系统数据量级的时候，需要考虑存量数据和增量数据两个部分，简单地说就是，现在有多少数据,未来还会新增多少数据。在估计系统数据量的时候，**不必对未来做过多的预留，一般来说按照未来两年，最多三年来估计就足够了。**不用担心因为预估不足，而无法支撑两年之后业务的问题。一般来讲，很少有新系统在上线之后两三年内，业务没有发生重大改变的。既然系统在不到两三年的时间内就要进行重构，那么存储只需要在重构时，也跟着进行相应的调整即可。退一步来讲，即使系统在两三年内没有进行重构，那么之前预估的两三年的数据量再撑个三四年问题也不大。因为大部分人在对未来业务和数据量做预估的时候，往往都会过于乐观。也就是说，两年后系统的实际数据量大概率要远少于两年前预估的数据量。</p><ol><li>1GB 以下量级，或者数据的条数在千万以下。对于这个量级内的数据来说，几乎所有的存储产品其性能都还不错，因此不需要过多考虑数据量和性能，重点考虑其他维度即可。</li><li>1GB 以上、10GB 以下量级，或者数据的条数在一亿以内。这个量级基本上是单机存储系统能够处理的上限。</li><li><strong>超过10GB 量级，或者数据的条数超过一亿。这个量级的数据必须使用分布式存储，只有将数据分片，才能获得可以接受的性能。</strong></li></ol><p>第三个需要考虑的维度，非常重要，但也最容易被忽略，那就是<strong>总体拥有成本</strong>(Total Cost of Ownership，TOC)。总体拥有成本是指，选择该存储产品，所需要付出的成本。虽然现在大部分存储系统都是开源免费的，但是无论使用哪一款产品，都是有成本的。成本主要来自如下三个方面。</p><ol><li>最重要的，团队是否熟悉该产品？如果不熟悉则意味着使用过程中可能要踩坑，然后填坑。踩坑和填坑的代价可能是系统宕机、丢数据或者开发进度延期。</li><li>需要考虑该产品是否简单、易于学习和使用。</li><li>需要考虑系统上线后的运维成本，比如，Hadoop 生态的一系列产品,维护工作相对来说就比较困难，要想让它们持续正常地运转，一般都需要一个有经验的运维人员专门负责维护。</li></ol><h2 id="在线业务系统如何选择存储产品">在线业务系统如何选择存储产品</h2><p>那些主要对数据库执行<strong>增删改查</strong>操作的系统</p><ol><li>由于需要频繁地对数据进行增删改的操作，因此存储产品需要有较好的<strong>写性能</strong>。</li><li>由于在线业务直接服务于前端，需要快速响应，因此每次存储访问必须要快，至少要达到<strong>毫秒级</strong>的响应。</li><li>另外，存储产品需要能够支撑足够多的<strong>并发请求</strong>，以满足大量用户同时访问的需求。</li><li>最后，很重要的一点是，由于在线业务系统的需求一直都在不停地变化，因此存储产品需要能够提供相对比较<strong>强大的查询能力</strong>，以便应对频繁变化的需求。否则，一旦业务需求稍微有一点儿变动，存储结构就不得不随之做出调整，这就非常麻烦了。</li></ol><p>没有这么完美的产品。但是如果把要求放宽一点，最接近上述要求的就是我们最常用的以MySQL为代表的关系型数据库。由于各关系型数据库产品的存储结构和实现原理都是类似的，因此它们在功能等方面的差别并不大，是可以相互替代的。考虑到成本等诸方面的因素，<strong>MySOL一般是我们的首选</strong>。</p><p>此外，一些KV 存储也可以用于在线业务，比如，Redis、Memcached 等等。Redis 这种基于内存的存储，具有非常好的读写性能，能提供有限的查询功能，但是其并不能保证数据的可靠性，一般来说,Redis 都是配合MySQL 数据库作为缓存来使用。所以，<strong>目前绝大多数的在线业务，仍然使用的是 MySQL(或者其他关系型数据库)加 Redis 这对经典组合</strong>，暂时还没有更好的选择。还有一些存储产品也可以用于在线业务，但大多数局限于特定的业务场景中,不具备通用性,比如,用于存储文档型数据的 <strong>MongoDB</strong>，等等。在线业务系统需要存储产品能够支持高性能写入、毫秒级响应以及高并发。MySOL 加 Redis 的经典组合可以应对大部分的场景需求。而<strong>分析系统则需要存储产品能够在海量数据，并且能够支持在海量数据上快速聚合、分析和查询，而对写入性能、响应时延和并发的要求并不高。</strong></p><p>一般来说量级在GB 以内的可以使田MySQL ；量级超过GB 的数据并且如果还是需要做实时的分析和查询，则可以优先考虑ES，Hbase、Cassandra 和ClickHouse 这些列式数据库也可以视情况选择。量级超过 TB 的数据，一般只能事先对数据做聚合计算，然后再在聚合计算的结果上进行实时查询，这种情况下，一般选择把数据保存在HDFS 中。</p><h2 id="如何存储前端埋点之类的海量数据">如何存储前端埋点之类的海量数据</h2><p>对于大部分互联网公司来说，数据量最大的几类数据是：<strong>前端埋点数据、监控数据和日志数据</strong>。“前端埋点数据”也称为“点击流”，是指在App、小程序和Web 页面上的埋点数据，这些埋点数据主要用于记录用户的行为，比如打开了哪个页面，点击了哪个按钮，在哪个商品上停留了多久等信息。上述三种数据都是真正的“海量”数据，相比于订单、商品之类的业务数据，点击流的数据量要多出2～3 个数量级。在头部大厂，这类数据每天产生的数据量很有可能会超过 TB( 1 TB = 1024 GB)级别，经过一段时间的累积，有些数据会达到PB（1 PB =1024 TB）级别。</p><p>早期对于海量原始数据的存储方案，都倾向于先计算再存储。也就是说，在接收原始数据的服务中，先对数据进行过滤和聚合等初步的计算，将数据压缩收敛之后再进行存储。这样可以降低存储系统的写入压力，同时还能节省磁盘空间。随着存储设备的成本越来越低，以及数据的价值被不断地重新挖掘，很多大型企业都倾向于<strong>先存储再计算</strong>。即直接保存海量的原始数据，再对数据进行实时或批量计算。这种方案成本较高但是优点很多，比如不需要二次分发，就可以同时为多个流和批计算任务提供数据；如果计算任务出现错误，则可以随时回滚，重新计算；如果对数据有新的分析需求，则上线之后，可以直接用历史数据计算出结果，而不用等待收集新的数据。不过先存储再计算的方式，对保存原始数据的存储系统提出了更高的要求：不仅要有足够大的容量，能够水平扩容，而且要求读写速度足够快，要能跟得上数据生产的速度，同时环要为下游计算提供低延迟的读服务。<strong>一般都会选择Kafka/RocketMQ 来存储。<strong>这类产品能够提供“无限”的消息堆积能力，具有招高的吞吐量，与大部分大数据生态圈的开源软件都有非常好的兼容性和集成度。如果是需要长时间(几个月到几年)保存的海量数据，适合用</strong>HDFS之类的分布式文件系统来存储</strong>。还有一类是时序数据库(Time Series Databases)，比如<strong>InfluxDB</strong>，不仅具有非常好的读写性能,还能提供简便的查询和聚合数据的能力。但是它们并不能存储所有类型的数据，而是<strong>专用于存储类似于监控之类的有时间特征，并且数据内容都是数值的数据</strong>。</p><h1>面对海量数据,如何才能查得更快</h1><p><strong>一是数据量太大了，二是目前没有很好的数据结构和查询能力可以支持业务系统的查询</strong></p><p>目前的一般做法是，通过<strong>流计算或批计算</strong>（也就是 MapReduce）对原始数批进行二次或多次讨滤、汇聚和计算的处理,然后<strong>把计算结果保存到另外一个存储系统</strong>中由该存储系统为业务系统提供查询支持。 有的业务计算后的数据变得非常少，比如，一些按大进行汇总的数据，或者排行榜类的数据，无论使用哪种存储，都能满足要求。还有一些业务，无法通过事先计算的方式解决所有的问题。<strong>比如，像点击流、监控和日志之类的原始数据，就属于“海量数据中的海量数据”</strong>，这些原始数据经过过滤汇总和计算之后，在大多数情况下，数据量会出现数量级的下降，比如，从TB 级别的数据量，下降到GB 级别，但仍然属于海量数据。除此之外，我们还要对这个海量数据，提供性能可以接受的查询服务。</p><h2 id="常用的分析类系统应该如何选择存储">常用的分析类系统应该如何选择存储</h2><p>查询海量数据的系统大多是<strong>离线分析类系统</strong>，可以简单地将其理解为类似于做报表的系统，也就是那些主要功能是对数据做统计分析的系统。这类系统大多是重度依赖于存储的。选择什么样的存储系统、使用什么样的数据结构来存储数据，将直接决定数据查询、聚合和分析的性能。分析类系统对存储的需求一般包含如下四点。</p><ol><li>用于分析的数据量一般会比在线业务的数据量高出几个数量级，这就要求存储系统能够<strong>保存海量数据</strong>。</li><li>并且还要能在海量数据上<strong>快速进行聚合、分析和查询的操作</strong>。注意，这里所说的“快速”，前提是处理GB、TB 甚至PB 级别的海量数据，在这么大的数据量上做分析，<strong>几十秒甚至几分钟都算是快速的了</strong>,这一点与在线业务要求的毫秒级速度是不一样的。</li><li>由于在大多数情况下，数据都是异步写入，因此系统<strong>对于写入性能和响应时延，要求一般不高</strong>。</li><li>由于分析类系统不用直接支撑前端业务，因此也<strong>不要求高并发</strong>。</li></ol><p>接下来我们看一下，可供选择的存储产品有哪些。如果系统的数据量在<strong>GB 量级以下，那么MySOL 依然是可以考虑的</strong>，因为它的查询能力足以应付大部分分析系统的业务需求。而且可以与在线业务系统合用一个数据库，不用做ETL(数据抽取),更简便而且实时性更好。当然最好能为分析系统配置单独的MySQL 实例，以避免影响在线业务。</p><p>如果数据量级已经<strong>超过了MySQL 的极限，则还可以选择一些列式数据库，比如Hbase、Cassandra、ClickHouse 等</strong>。这些产品对海量数据都有非常好的查询性能，在正确使用的前提下，<strong>10GB 量级的数据查询基本上可以做到秒级返回</strong>。不过，这些数据库对数据的组织方式会有一些限制，在查询方式上也没有MySQL那么灵活。还可以考虑Elasticsearch (ES)，<strong>ES 本来是一个为了搜索而生的存储产品</strong>，但是其<strong>也支持结构化数据的存储和查询，也支持分布式并行查询</strong>，因此其在海量结构化数据查询方面的性能也非常好。最重要的是ES 对数据组织方式和查询方式的限制,不像其他列式数据库那么死板。也就是说，ES 的查询能力和灵活性是要强于上述这些列式数据库的。不过,<strong>ES 也有一个缺点，那就是需要具有大内存的服务器</strong>，硬件成本比较高。</p><p>当数据量级<strong>超过TB 级的时候</strong>，对这么大量级的数据做统计分析,无论使用哪种存储系统，速度都快不了，这里的性能瓶颈主要在于磁盘IO 和网络带宽，这种情况下肯定做不了实时的查询和分析，这里可以采用的解决方案具定期对数据讲行聚合和计算，然后把结果保存起来，在需要时再对结果做一次查询。这么大量级的数据，一般是选择<strong>存储在HDFS 中，配合Spark、Hive 等大数据生态圈产品，对数据进行聚合和计算</strong>。</p><h2 id="转变思想：根据查询选择存储系统">转变思想：根据查询选择存储系统</h2><p>面对海量数据仅根据数据量级来选择存储系统是远远不够的。因为在过去几十年的时间里,存储技术和分布式技术，在基础理论方面并没有本质上的突破。技术发展更多的是体现在应用层面上，比如集群管理更加简单，查询更加自动化,像MapReduce 之类的产品就是如此。**不同的存储系统之间并没有本质的差异。它们的区别只在于，存储引擎的数据结构、存储集群的构建方式，以及提供的查询能力等这些方面的差异。这些差异，使得不同的存储系统只有在它所擅长的那些领域或场景下，才会有很好的性能表现。**比如我们前面说过的RocksDB 和LevelDB，它们的存储结构LSM-Tree 其实就是日志和跳表的组合，单从数据结构的时间复杂度上来说，相较于MySQL 所采用的B+树，LSM-Tree 并没有本质上的提升，它们的时间复杂度都是O(log n)。但是，LSM-Tree 在某些情况下利用日志能有更好的写性能表现。也就是说没有哪种存储能在所有情况下，都具有明显的性能优势，所以说，存储系统没有银弹，不要指望简单地更换一种数据库就可以解决数据量大、查询慢的问题。不过在特定的场景下，通过一些优化方法，把查询性能提升几十倍甚至几百倍这一点还是有可能的。这里有个很重要的思想就是，根据查询来选择存储系统和数据结构。比如我们经常用Elasticsearch 构建商品搜索系统，就是把这个思想实践得很好的一个例子。ES 采用的倒排索引的数据结构，并没有比 MySQL 的B+树更快,或者说更先进，但是面对“全文搜索”这个查询需求，相较于使用其他的存储系统和数据结构，使用ES 的倒排索引在性能上能高出几十倍。</p><p>说个大厂的实际例子，京东的物流速度是非常快的。京东的物流之所以能够做到这么快，有一个很重要的原因，那就是它有一套<strong>智能的补货系统</strong>。**根据历史的物流数据，对未来的趋势做出预测，来为全国的每个仓库补货。**这样京东就可以做到用户下单购买的商品，有很大概率就在离用户不远的京东仓库里，这样自然就能很快送达了。**这个系统在后台需要分析每天几亿条的物流数据，每条物流数据又细分为几段到几十段，因此每天的物流数据就是几十亿的量级。<strong>这份物流数据的用途非常大，比如</strong>智能补货系统要用；运力调度的系统也要用；评价每个站点、每个快递小哥的时效达成情况要用；物流规划人员同样也要用这个数据进行分析,并对物流网络做持续优化。**那么，采用什么样的存储系统来保存这些物流数据，才能满足这些查询的需求呢？显然，任何一种存储系统都无法满足这么多种查询的需求。需要根据每种需求的具体情况，专门为其选择适合的存储系统；定义适合的数据结构,解决各自的问题。而不是用一种数据结构及一个数据库去解决所有的问题。对于智能补货和运力调度这两个系统，**由于它们具有很强的区域性，因此京东把数据按照区域(省或地市)做分片，再汇总成一份全国的跨区域物流数据，这样绝大部分查询都可以落在一个分片上，查询性能就会很好。**<strong>对于站点和快递人员的时效达成情况，由于这种业务的查询方式大多以点查询为主，因此可以考虑在计算的时候，事先按照站点和快递人员把数据汇总好,存放到分布式KV 存储中，基本上就可以达到毫秒级查询的性能。而对于物流规划的查询需求，查询方式是多变的，把数据放到Hive 表中，按照时间进行分片。物流规划人员可以在上面执行一些分析类的查询任务，这样的查询任务即使是花上数小时的时间，用于验证一个新的规划算法，也是可以接受的。</strong></p><h1>商品系统的存储架构设计</h1><p>电商的商品系统所包含的主要功能就是增、删、改、查商品信息，业务逻辑比较简单，支撑的主要页面就是商品详情页。但是在设计商品系统的存储架构时,仍然需要着重考虑如下两个方面的问题。</p><ol><li>需要考虑<strong>高并发的问题</strong>。不管是哪种电商系统，商品详情页一定是整个系统中DAU(Daily Active User，日均访问人数)最高的页面之一。商品详情页DAU高的原因与用户使用电商App 的习惯息息相关，绝大部分用户浏览完商品详情页之后不一定会购买，但购买之前一定会浏览很多同类商品的详情页，正所谓“货比三家”。所以商品详情页的浏览次数要远高于系统的其他页面。如果在设计商品系统的存储架构时，没有考虑到高并发的问题，那么在电商系统举办大促活动（不是秒杀）的时候，海量的浏览请求会在促销开启的那一刻同时涌向系统，支撑商品详情页的商品系统必然是第一个被流量冲垮的系统。</li><li>需要考虑<strong>商品数据规模的问题</strong>。一般情况下，商品详情页的数据规模，对B2C 的电商系统来说，数量多，体量大。<ul><li>为什么说“数量多”？在国内一线的电商平台中，SKU 的数量大约在几亿到几十亿这个量级。商品数量级这么大的原因有很多，比如，同一个商品通常会有数种不同的版本型号，再比如商家为了促销需要，可能会反复上下架同一个商品，或者为同一个商品加上不同的“马甲”，这些原因都导致了SKU 数量巨大。</li></ul></li></ol><h2 id="商品系统需要保存哪些数据">商品系统需要保存哪些数据</h2><p>商品详情页一般展示的信息有：</p><ul><li>基本信息：标题、副标题、原价、价格、促销价、颜色〔规格型号）…….</li><li>详细信息：商品参数、商品介绍、图片视频…….</li><li>其他信息：促销信息、推荐商品、评价、评论、配送信息、店铺信息</li></ul><p>一般来说其他信息来自电商平台的其他系统，比如促销等等。我们暂且不讨论；基本信息和详细信息都是商品系统需要存储的内容。应该如何存储这么多内容呢?能不能像保存订单数据那样，设计一张商品表，把这些数据全部存放进去？或者说，一张表存不下就再加几张子表，这样存储行不行？其实并不是不可以。现今的一线电商企业，在发展的早期阶段采用的就是这种存储结构。而现今它们所采用的复杂的分布式存储架构，都是在发展的过程中逐步演进而来的。**用数据库表存储的好处就是“糙、快、猛”，简单、可靠而且容易实现，但是缺点是，表能支撑的数据量有限，以及无法满足高并发的需求。如果只是低成本且快速构建一个小规模的电商，这可能会是相对比较合理的选择。**当然规模一旦变大，就不能再采用数据库表存储这种简单粗暴的方案了。如果不能用数据库,那么我们应该选择哪种存储系统来保存这么复杂的商品数据呢？在目前的情况下，<strong>任何一种存储方案都无法完全满足全部需求，最好的解决方案是分而治之，即把商品系统需要存储的数据，按照特点分成商品基本信息、商品参数、图片视频和商品介绍几个部分，分别进行存储。</strong></p><h2 id="如何存储商品的基本信息">如何存储商品的基本信息</h2><p>首先我们分析一下商品的基本信息，其中主要包括商品的主副标题、价格、颜色等一些最基本、最主要的属性。这些属性都是固定的，不太可能会因为需求改变或不同的商品而变化，而且这部分数据不会太大，所以<strong>可以在数据库中建一张表来保存商品的基本信息</strong>。然后，我们还需要<strong>在数据库前面加一个缓存</strong>，以帮助数据库抵挡绝大部分的读请求。当然对于缓存数据的一致性，可以采用Cache Aside 更新策略。但是设计商品基本信息表的时候，需要特别注意的一点是，一定要记得<strong>保留商品数据的每一个历史版本。<strong>因为商品数据是随时变化的，但是</strong>订单中关联的商品数据，必须是下单那个时刻的商品数据</strong>。解决方案则是，在对商品数据进行修改时，要为每个历史版本的商品数据保存一个快照，<strong>可以创建一个历史表保存到MySQL 中，或者其他的存储系统都可以。</strong></p><h2 id="使用-MongoDB-保存商品参数">使用 MongoDB 保存商品参数</h2><p>商品参数就是商品的特征,比如,电脑的内存大小、手机的屏幕尺寸、酒的度数、口红的色号等等。与商品的基本属性一样，参数也是结构化的数据。关于参数需要解决的一个难题是，不同类型的商品其参数是完全不一样的。如果要设计一个商品参数表，那么这个表所要包含的字段就太多了，并且每增加一个品类的商品，这个表就要加入新的字段，所以这个方案行不通。大多数数据库都要求数据表要有一个固定的结构，但MongoDB 没有这个要求，特别适合用于保存像“商品参数”这种属性不固定的数据。MongoDB 最大的特点是，它的“表结构”是不需要事先定义的或者说MongoDB 中根本就没有表结构。由于没有表结构，因此 MongoDB 可以把任意数据都放在同一张表里。MongoDB 也支持按照数据的某个字段进行查询。<strong>MongoDB 可以很好地满足商品参数信息数据量大、数据结构不统一等特性，而且我们也不需要对商品参数进行事务和多表联查</strong>，所以商品参数比较适宜存入MongoDB。</p><h2 id="使用对象存储保存商品图片和视频">使用对象存储保存商品图片和视频</h2><p>图片和视频所占用的存储空间比较大，因此一般的存储方式是<strong>在数据库中只保存图片和视频的ID 或URL</strong>，实际的图片和视频则以文件的方式单独存储。现今，图片和视频的存储技术已经非常成熟了，首选的方式是保存在对象存储（Object Storage）中。各大云厂商都提供了对象存储服务，对图片和视频都进行了大量有针对性的优化。比如，国内的七牛云、阿里云等等。这样上传图片和视频的时候，可以直接保存到对象存储中，然后把对应的键保存在商品系统。访问图片和视频的时候，真正的图片和视频文件，也不需要经过商品系统的后端服务进行读取，而是在Web 页面上通过对象存储提供的URL 直接访问，而且几乎所有的对象存储云服务都自带CDN (Content Delivery Network，内容分发网络)加速服务，响应时间比直接请求业务的服务器更短。</p><h2 id="商品介绍静态化">商品介绍静态化</h2><p>商品介绍在商品详情页中所占的比重是最大的，其中包含了大量的带格式文字、图片和视频。图片和视频自然要存放在对象存储中，而关于商品介绍的文本这部分内容基本上是不会频繁改变的，则一般是随着商品详情页一起静态化，保存在HTML 文件中。<strong>商品详情页静态化之后，不仅可以节省服务器资源，还可以利用CDN 加速</strong>，把商品详情页放到离用户最近的CDN 服务器上，让商品详情页的访问变得更快。至于商品价格、促销等变动的信息，由于不能将其静态化到页面中因此可以在前端而面使用AJAX 请求商品系统动态获取。我们的秒杀系统就使用了商详页的静态化，在一般的大厂会有<strong>专门的CMS（内容管理系统）负责商详页的静态化</strong>。</p><h1>购物车系统的存储架构</h1><p>购物车系统主要用于在用户选购商品时暂存用户想要购买的商品。购物车系统对数据可靠性的要求不高，对性能也没有特别的要求，在整个电商系统中属于相对比较容易设计和实现的一个子系统。购物车系统主要包含如下功能。<strong>把商品加入购物车。展示购物车列表页，发起结算下单</strong>。<strong>购物车实体的主要属性包括SKUID(商品ID)、数量、加购时间和勾选状态</strong>。其中,“勾选状态”属性，即购物车界面中每件商品前面的那个小对号，表示在结算下单时是否要包含这件商品。<strong>至于商品的价格和总价，以及商品介绍等信息，可以从电商的其他系统中实时获取，不需要购物车系统专门保存。</strong></p><h2 id="设计购物车系统的存储架构时需要把握什么原则">设计购物车系统的存储架构时需要把握什么原则</h2><p>请思考下面这几个问题</p><ol><li>如果用户没有登录网站，而是直接在浏览器中将商品加入购物车，那么关闭浏览器后再次打开购物网站，刚才加入购物车的商品是否还在？</li><li>如果用户没有登录网站，而是直接在浏览器中将商品加入购物车、然后再登录，那么刚才加入购物车的商品是否还在？</li><li>再打开手机App，用相同的用户账号登录，第2步中加入购物车的商品是否还在？</li></ol><p>一般情况下：</p><ol><li>即使用户没有登录网站,加入购物车的商品信息也会保存在用户的电脑里，这样关闭浏览器后再打开，购物车的商品仍然存在。</li><li>如果用户先加入购物车，再登录购物网站，那么登录前加入购物车的商品就会自动归并到用户名下的购物车中，所以登录后购物车中仍然有登录前加入购物车的商品。</li><li>使用手机App 登录相同的用户账号,看到的就是该用户的购物车，这时无论是在手机App、电脑还是微信中登录,只要是相同的用户，看到的就是同一个购物车，所以第2 步中加入购物车的商品是存在的。</li></ol><p>所以总之</p><ol><li><strong>如果用户未登录，则需要暂存购物车中的商品</strong>。</li><li><strong>用户登录时，系统需要把暂存在购物车中的商品合并到用户的购物车中,并且清除暂存的购物车</strong>。</li><li>用户登录后,购物车中的商品需要在浏览器、手机App 和微信等终端中<strong>保持同步</strong>。</li></ol><p>也就是说，<strong>购物车系统需要保存两类购物车，一类是未登录情况下的“暂存购物车”，另一类是登录后的“用户购物车”</strong>。当然如果系统业务约束用户必须登录后才能将物品放入购物车，那就没有暂存购物车一说了，<strong>早期的淘宝和京东都是允许用户未登录的暂存购物车，现在已经要求用户必须登录了</strong>。会不会被劫持攻击？黑客向你的暂存购物车中注入商品。</p><h2 id="如何设计“暂存购物车”的存储">如何设计“暂存购物车”的存储</h2><p>暂存购物车的数据应该保存在客户端还是服务端？如果保存在服务端，那么每个暂存购物车都需要有一个全局唯一的标识，这个标识不太好设计，而且还会浪费服务端的资源。所以<strong>将暂存购物车的数据保存在客户端</strong>会更好，既可以节约服务器的存储资源，也不用考虑购物车标识的问题，因为各个客户端只需要保存自己唯一一个购物车就可以了，所以不需要额外标识。浏览器客户端可以选择的存储并不多，只有Session、Cookie 和LocalStorage。暂存购物车的数据存在哪里最合适呢？保存在Session 中是不太合适的，因为Session 的保留时间较短,而且 Session 的数据实际上还是保存在服务端。剩余的两种存储Cookie 和 LocalStorage 都可以用来保存购物车数据，选择哪种方式更好呢？答案是各有优劣。在上述场景中，使用Cookie 和LocalStorage 最关键的区别是，<strong>客户端与服务端的每次交互都会自动带着Cookie 数据往返，这样服务端就可以读写客户端Cookie 中的数据了，而LocalStorage 中的数据只能通过客户端访问。</strong></p><p>使用Cookie 存储实现起来比较简单。在加减购物车、合并购物车的过程中,由于服务端可以读写Cookie，因此全部逻辑都可以在服务端实现，而且客户端和服务端请求的次数相对也少一些。使用LocalStorage 存储，实现相对复杂一些，客户端和服务端都要实现一些业务逻辑，但<strong>使用LocalStorage 的好处是，它的存储容量比Cookie 的4KB 上限要大得多</strong>，而且不用像Cookie 那样，无论用不用得上，每次请求都要带着Cookie，因此<strong>LocalStorage 更能节省带宽</strong>。所以选择Cookie 或LocalStorage 来存储暂存购物车都是可以的，我们可以根据自己的需求来选择。<strong>如果是个小型电商系统，那么选择Cookie 来存储，实现起来会更简单。但如果电商系统面对的用户需要或者喜欢加购大量的商品（比如批发的行业用户），这种情况下选择LocalStorage 更合适。</strong></p><h2 id="用户购物车的存储">用户购物车的存储</h2><p>因为用户购物车必须保证多端的数据同步，所以其数据必须保存在服务端。常规的思路是设计一张购物车表，把数据存在MySQL 中。但是要注意要在user_id 上建一个索引，因为查询购物车表时，是以user_id作为查询条件来进行操作的。也可以选择更快的Redis，以用户ID 作为Key，以一个HASH 作为Value 来保存购物车中的商品。从读写性能上来说Redis 比MySQL 快很多，但是MySQL 的数据可靠性是要好于Redis 的。不过**购物车里的数据，其对可靠性的要求并没有那么苛刻，丢失少量数据的后果也就是个别用户的购物车少了几件商品，问题通常不是很大。所以,在购物车的场景下，Redis 的数据可靠性不高这个缺点并不是不能接受的。**不过,每个电商系统都有其个性化的需求，如果需要以其他方式访问购物车的数据，比如，**统计某一天加入购物车的商品总数，那么使用MySOL.存储数据很容易就能实现,而使用Redis 存储，查询起来就会非常麻烦且低效。**综合比较下来，<strong>考虑到需求总是会不断发生变化这个普遍情况，一般还是推荐使用MySQL 来存储购物车的数据。如果追求高性能，或者支持高并发，则可以加入Redis 来抗压力，比如在用户登录时将用户购物车数据加载入缓存，对购物车的变化可以直接操作缓存，异步的方式写入数据库。</strong></p><p>总的来说，存储架构的设计过程就是一个不断做选择题的过程。很多情况下，可供选择的方案不止一套，选择的时候需要考虑实现的复杂度、性能、系统可用性、数据可靠性、可扩展性等多方面的影响因素。需要强调的是,<strong>这些因素中的每一个都是可以根据业务适当牺牲的</strong>。比如我们一般都会认为数据是绝对不可以丢失的，也就是说不能牺牲数据的可靠性。但是像用户购物车的存储，<strong>使用Redis 替代MySQL 就是牺牲了数据的可靠性来换取高性能。即在购物车这样的场景下，很低概率地丢失少量数据是可以接受的。如果性能提升带来的收益远大于丢失少量数据所付出的代价，那么这个选择就是合理的。如果说不考虑需求变化的因素，牺牲一点点数据可靠性换取大幅度的性能提升，那么选择Redis 是最优解。</strong></p><h1>总结梳理</h1><h2 id="存储系统的技术选型">存储系统的技术选型</h2><ol><li><p><strong>在线业务系统? 分析系统?</strong></p></li><li><p><strong>数据量.</strong> 不必对未来做过多的预留, 最多三年来估计就足够了</p><ol><li><p>1GB以下或数据量在千万以下：都可以</p></li><li><p>1-10G或数据量在一亿以内：单机存储系统的上限</p></li><li><p><strong>超过10GB或数据量超过一亿：分布式存储，数据分片</strong></p></li></ol></li><li><p>**总体拥有成本：**团队是否熟悉该产品；是否简单、易于学习和使用；运维成本</p></li></ol><h2 id="在线业务系统（增删改查）">在线业务系统（<strong>增删改查</strong>）</h2><ul><li><p><strong>MySOL一般是首选：写性能、毫秒级、并发、强大的查询能力</strong></p></li><li><p>存储选型</p><ul><li><p>GB级：MySQL</p></li><li><p>超过GB级：ES，Hbase、Cassandra、ClickHouse</p></li><li><p>超过TB级：HDFS；只能事先对数据做聚合计算，然后再在聚合计算的结果上进行实时查询</p></li></ul></li><li><p><strong>商品系统（高并发、SKU数据规模）</strong></p><ul><li><p><strong>小规模的电商：用数据库表存储</strong></p></li><li><p><strong>分而治之：把商品系统需要存储的数据，按照特点分别进行存储</strong></p><ul><li><p><strong>可以在数据库中建一张表来保存商品的基本信息，在数据库前面加一个缓存</strong></p></li><li><p><strong>保留商品数据的每一个历史版本：订单中关联的商品数据，必须是下单那个时刻的商品数据</strong></p></li><li><p><strong>使用 MongoDB 保存商品参数（参数信息数据量大、数据结构不统一，不需要对商品参数进行事务和多表联查）</strong></p></li><li><p><strong>使用对象存储保存商品图片和视频（在数据库中只保存图片和视频的ID或URL）</strong></p></li><li><p><strong>商品介绍静态化+CDN：CMS（内容管理系统）</strong></p></li></ul></li></ul></li><li><p><strong>购物车系统（展示、结算）：存储SKUID(商品ID)、数量、加购时间和勾选状态。商品的价格和总价，以及商品介绍等信息，可以从电商的其他系统中实时获取，不需要购物车系统专门保存</strong></p><ul><li><p><strong>暂存购物车（用户未登录时加入的购物车）</strong></p><ul><li><p><strong>小型电商系统：Cookie存储</strong></p></li><li><p><strong>节省带宽：LocalStorage</strong></p></li></ul></li><li><p><strong>用户购物车（保持同步）</strong></p><ul><li><p>复杂查询：MySQL</p></li><li><p>高性能高并发：Redis（对可靠性要求不高），异步写入DB</p></li></ul></li></ul></li><li><p>选择方案：复杂度、性能、系统可用性、数据可靠性、可扩展性</p><ul><li><p><strong>这些因素中的每一个都是可以根据业务适当牺牲的</strong></p></li><li><p><strong>如果性能提升带来的收益远大于丢失少量数据所付出的代价，那么这个选择就是合理的</strong></p></li></ul></li></ul><h2 id="离线分析系统-（海量数据的存储和计算）">离线分析系统 （海量数据的存储和计算）</h2><ul><li><p>前端海量数据（<strong>前端埋点数据、监控数据和日志数据</strong>）：<strong>先存储再计算</strong></p><ul><li><p><strong>一般都会选择Kafka/RocketMQ 来存储</strong></p></li><li><p>如果是需要长时间(几个月到几年)保存的海量数据，适合用<strong>HDFS之类的分布式文件系统来存储</strong></p></li><li><p>时序数据库<strong>InfluxDB：专用于存储类似于监控之类的有时间特征，并且数据内容都是数值的数据</strong></p></li></ul></li><li><p><strong>提高查询速度：流计算或批计算，几十秒甚至几分钟都算是快速的</strong></p><ul><li><p><strong>把计算结果保存到另外一个存储系统</strong></p></li><li><p><strong>对于写入性能和响应时延，要求一般不高，也不要求高并发</strong></p></li><li><p>数据库选型</p><ul><li><p>GB级以下：MySQL</p></li><li><p>超过MySQL极限：<strong>Hbase、Cassandra、ClickHouse</strong></p><ul><li><strong>10GB量级的数据查询基本上可以做到秒级返回</strong></li></ul></li><li><p><strong>ES：支持结构化数据的存储和查询，也支持分布式并行查询</strong></p><ul><li>缺点：需要具有大内存的服务器</li></ul></li><li><p>超过TB级：<strong>HDFS、Spark、Hive</strong></p></li></ul></li></ul></li><li><p><strong>根据查询选择存储系统：不同的存储系统之间并没有本质的差异，只有在它所擅长的那些领域或场景下，才会有很好的性能表现</strong></p></li><li><p><strong>京东智能的补货系统：根据历史的物流数据，对未来的趋势做出预测，为全国的每个仓库补货（几十亿的量级）</strong></p><ul><li><p><strong>按照区域做分片，再汇总</strong></p></li><li><p><strong>站点和快递人员的时效达成情况：事先按照站点和快递人员把数据汇总好,存放到分布式KV存储中</strong></p></li><li><p><strong>物流规划：把数据放到Hive 表中，按照时间进行分片</strong></p><ul><li>物流规划人员可以在上面执行一些分析类的查询任务，这样的查询任务即使是花上数小时的时间，用于验证一个新的规划算法，也是可以接受的</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;存储系统的技术选型&lt;/h1&gt;
&lt;h2 id=&quot;技术选型时应该考虑哪些因素&quot;&gt;技术选型时应该考虑哪些因素&lt;/h2&gt;
&lt;p&gt;首先需要确定的是系统的类型，&lt;strong&gt;是一个在线业务系统，还是一个分析系统&lt;/strong&gt;？在线业务系统对应的术语是OLTP ( On-line</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="海量数据" scheme="https://jxch.github.io/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>01.RockDB</title>
    <link href="https://jxch.github.io/2023/07/11/architect/03.xing-neng-diao-you/04.rockdb/01-rockdb/"/>
    <id>https://jxch.github.io/2023/07/11/architect/03.xing-neng-diao-you/04.rockdb/01-rockdb/</id>
    <published>2023-07-11T08:23:49.000Z</published>
    <updated>2023-07-11T22:19:35.972Z</updated>
    
    <content type="html"><![CDATA[<p>RocksDB 是Facebook 开源的一个高性能、持久化的KV存储引擎，最初是Facebook 的数据库工程师团队基于Google LevelDB 开发。一般来说我们很少见到过哪个项目直接使用RocksDB 来保存数据，即使未来大概也不会像Redis 那样被业务系统直接使用。</p><p>但是越来越多的新生代数据库都选择RocksDB 作为它们的存储引擎。比如：</p><ul><li>CockroachDB（中文名蟑螂，一个开源、可伸缩、跨地域复制且兼容事务的ACID特性的分布式数据库，思路源自Google 的全球性分布式数据库 Spanner。其理念是将数据分布在多数据中心的多台服务器上）</li><li>YugabyteDB，Tidb 作为CockroachDB 的竞争产品，底层也是RocksDB开源项目MyRocks 使用RocksDB 给MySQL 做存储引擎，目的是取代现有的InnoDB 存储引擎。</li><li>MySQL 的亲兄弟 MariaDB 也已经接纳了MyRocks，作为它的存储引擎。</li><li>实时计算引擎Flink，其State 就是一个KV 存储,它使用的也是RocksDB。</li><li>此外包括MongoDB、Cassandra、Hbase 等在内的很多数据库,都在开发基于RocksDB 的存储引擎。</li><li></li></ul><p>这其中的主要原因就是RocksDB 高性能、支持事务。随机读最高可以达到19W/S，平均水平13W/S，覆盖操作可以达到9W/S，多读单写的情况下在10W/S 左右。批量写入5000 万数据，RocksDB 只花了1m26.9s，在几个对照引擎中（LevelDB与RocksDB 与HyperLevelDB 与LMDB），RocksDB 读取和删除方面表现最好，InfluxDB 也认为根据测试用例，RocksDB 作为存储引擎是个非常好的选择</p><h1>RocksDB VS Redis</h1><p>说到KV存储,我们最熟悉的就是Redis了。RocksDB 和 Redis 都是KV 存储。其实Redis 和 RocksDB 之间并没有可比性，一个是缓存，一个是数据库存储引擎。Redis 是一个内存数据库，它的性能非常好，主要原因之一是它的数据全都保存在内存中。按照 Redis 官方网站提供的测试数据来看，它的随机读写性能大约为50 万次/秒，当然我们普遍的认可的说法是10W/S。从我们上面的文字可以看到RocksDB 相应的随机读写性能大约为20 万次/秒，<strong>虽然其性能还不如 Redis，但是已经可以算是在同一个量级水平了，毕竟一个是内存操作，另一个是磁盘IO操作。</strong></p><p>但是我们也知道，Redis 只是一个内存数据库，并不是一个可靠的存储引擎。在Redis 中，数据写到内存中就算成功了，其并不能保证将数据安全地保存到磁盘上。而 RocksDB 则是一个持久化的KV 存储引擎，它需要保证每条数据都已安全地写到磁盘上。这种情况下，RocksDB 的优势就很明显，磁盘的读写性能与内存的读写性能本就相差了一两个数量级，读写磁盘的RocksDB 能达到与读写内存的Redis 相近的性能这就是RocksDB 的价值所在了。一个存储系统的读写性能主要取决于它的存储结构，也就是数据是如何组织的。RocksDB 采用了一个非常复杂的数据存储结构，并且这个存储结构采用了内存和磁盘混合存储的方式，它使用磁盘来保证数据的可靠存储的,并且会利用速度更快的内存来提升读写性能。</p><p>RocksDB 为什么能实现这么高的写入性能呢？大多数存储系统为了能够实现快速查找都会采用树或哈希表之类的存储结构。数据在写入的时候必须写到特定的位置上。比如,我们在向B+树中写入一条数据时，必须按照B+树的排序方式,写到某个固定的节点下面。哈希表也与之类似，必须要写到特定的哈希槽中。这样的数据结构会导致在写入数据的时候,不得不先在磁盘的这里写一部分，再到那里写一部分这样跳来跳去地写，即我们所说的“随机写”。MySQL 为了减少随机读写，下了不少功夫。<strong>而RocksDB 的数据结构，可以保证写入磁盘的绝大多数操作都是顺序写入的。</strong></p><p>Kafka 所采用的也是顺序读写的方式，所以读写性能也非常好。凡事有利也有弊，这种数据基本上是没法查询的因为数据没有结构,只能采用遍历的方式。RocksDB 究竟如何在保证数据顺序写入的前提下，还能兼顾很好的查询性能呢?？其实使用了数据结构LSM-Tree。</p><h1>LSM-Tree 如何兼顾读写性能</h1><p>LSM-Tree 的全称是The Log-Structured Merge-Tree，是一种非常复杂的复合数据结构。它包含了WAL (Write Ahead Log)、跳表(SkipList)和一个分层的有序表(Sorted String Table, SSTable)，LSM-tree 专门为key-value 存储系统设计的，以牺牲部分读取性能为代价提高写入性能，通常适合于写多读少的场景。</p><p>数据的写入过程。当LSM-Tree 收到一个写请求时，比如“PUT foo bar”，即把Key foo 的值设置为bar，这条操作命令会被<strong>写入磁盘的 WAL 日志中</strong>，图中右侧的Log，<strong>这是一个顺序写磁盘的操作</strong>，性能很好。这个日志的<strong>唯一作用就是从故障中恢复系统数据</strong>，一旦系统宕机，就可以根据日志把内存中还没有来得及写入磁盘的数据恢复出来。写完日志之后，数据可靠性的问题就解决了**。然后数据会被写入内存的MemTable 中**，这个 <strong>MemTable 就是一个按照Key 组织的跳表</strong>(SkipList)，跳表的查找性能与平衡树类似，但实现起来更简单一些。写MemTable 是一项内存操作，速度也非常快。</p><p>数据<strong>写入MemTable 之后就可以返回写入成功</strong>的信息了。不过LSM-Tree 在处理写入数据的过程中会<strong>直接将Key 写入 MemTable，而不会预先查看MemTable中是否已经存在该Key</strong>。很明显MemTable 不能无限制地写入内存，一是内存的容量毕竟有限，另外，<strong>MemTable 太大会导致读写性能下降</strong>。所以MemTable 有一个固定的上限大小,一般是<strong>32MB</strong>。<strong>MemTable 写满之后，就会转换成Immutable(不可变的)MemTable，然后再创建一个空的MemTable 继续写</strong>。这个Immutable MemTable 是只读的MemTable，它与MemTable 的数据结构完全一样唯一的区别就是不允许再写入了。<strong>Immutable MemTable 也不能在内存中无限地占地方，而是会有一个后台线程，不停地把Immutable MemTable 复制到磁盘文件中，然后释放内存空间。每个Immutable MemTable 对应于一个磁盘文件</strong>，MemTable 的数据结构跳表本身就是一个有序表，写入文件的数据结构也是按照Key 来排序的，<strong>这些文件就是SSTable</strong>。由于把MemTable 写入 SSTable 的这个写操作,是把整块内存写入整个文件中，因此该操作同样也是一个顺序写操作。虽然数据已经保存到磁盘上了，而且<strong>这些SSTable 文件中的Key 是有序的,但是文件之间却是完全无序的，所以还是无法查找。SSTable 采用了一个分层合并机制来解决这个问题。SSTable 被分为很多层，每一层的容量都有一个固定的上限。</strong></p><p>一般来说，<strong>下一层的容量是上一层的10 倍</strong>。<strong>当某一层写满时，就会触发后台线程往下一层合并，数据合并到下一层之后，本层的SSTable 文件就可以删除了。合并的过程也是排序的过程，除了Level 0 以外，每层中的文件都是有序的</strong>,文件内的KV 也是有序的，这样就比较便于查找了。**LSM-Tree 查找的过程也是分层查找，先在内存中的 MemTable 和Immutable MemTable 中查找，然后再按照顺序依次在磁盘的每层SSTable 文件中查找，一旦找到了就直接返回。<strong>看起来这样的查找方式很低效的，可能需要多次查找内存和多个文件才能找到一个Key，但实际上这样一个分层的结构，它会天然形成一个非常有利于查找的状况，即</strong>越是经常被读写到的热数据，它在这个分层结构中就越靠上，对这样的Key 查找就越快。**比如最经常读写的Key 很大概率会在内存中，这样不用读写磁盘就能完成查找。即使在内存中查不到真正需要穿透很多层SSTable，一直查到最底层的请求,实际也还是很少的。另外在工程实现上，还会做很多优化。</p><p>比如RocksDB 里，<strong>为存储的数据逻辑分族，独特的filter 对读优化，使用多个memtable 并在immutbale memtable 提前进行数据合并的优化</strong>，<strong>在内存中缓存SSTable文件的Key用布隆过滤器避免无谓的查找等，以加速查找过程</strong>；不同的合并算法，SSTFile-Indexing 机制，针对sstfile 有自己的block cache 和table cache。这样综合优化下来最终的性能，尤其是查找会相对较好。</p><h2 id="流程总结">流程总结</h2><ol><li>操作命令写入磁盘的 WAL 日志中（顺序写）：唯一作用就是从故障中恢复系统数据</li><li>写入内存的MemTable中（按照Key组织的跳表，MemTable 太大会导致读写性能下降，一般是32MB）<ol><li>直接将Key 写入 MemTable，而不会预先查看MemTable中是否已经存在该Key</li><li>写入MemTable之后就可以返回写入成功</li></ol></li><li>MemTable写满之后，就会转换成Immutable(不可变的)MemTable，然后再创建一个空的MemTable继续写<ol><li>Immutable MemTable也不能在内存中无限地占地方，而是会有一个后台线程，不停地把Immutable MemTable复制到磁盘文件中，然后释放内存空间。</li><li>每个Immutable MemTable 对应于一个磁盘文件，这些文件就是SSTable（这些SSTable文件中的Key是有序的,但是文件之间却是完全无序的，所以还是无法查找）</li></ol></li><li>SSTable 采用分层合并机制，SSTable被分为很多层，每一层的容量都有一个固定的上限。下一层的容量是上一层的10倍。<ol><li>当某一层写满时，就会触发后台线程往下一层合并</li><li>数据合并到下一层之后，本层的SSTable文件就可以删除了</li><li>合并的过程也是排序的过程，除了Level 0以外，每层中的文件都是有序的</li></ol></li><li>LSM-Tree 查找的过程也是分层查找<ol><li>先在内存中的 MemTable 和Immutable MemTable 中查找，然后再按照顺序依次在磁盘的每层SSTable 文件中查找，一旦找到了就直接返回</li><li>越是经常被读写到的热数据，它在这个分层结构中就越靠上，对这样的Key 查找就越快</li><li>在内存中缓存SSTable文件的Key用布隆过滤器避免无谓的查找等，以加速查找过程</li><li>使用多个memtable并在immutbale memtable提前进行数据合并的优</li><li>为存储的数据逻辑分族，独特的filter 对读优化</li></ol></li></ol><h1>总结梳理</h1><p>虽然其性能还不如 Redis，但是已经可以算是在同一个量级水平了，毕竟一个是内存操作，另一个是磁盘IO操作。RocksDB 的数据结构，可以保证写入磁盘的绝大多数操作都是顺序写入的。</p><h2 id="LSM-Tree-如何兼顾读写性能">LSM-Tree 如何兼顾读写性能</h2><ol><li><p>操作命令写入磁盘的 WAL 日志中（顺序写）：唯一作用就是从故障中恢复系统数据</p></li><li><p>写入内存的MemTable中（按照Key组织的跳表，MemTable 太大会导致读写性能下降，一般是32MB）</p><ol><li><p>直接将Key 写入 MemTable，而不会预先查看MemTable中是否已经存在该Key</p></li><li><p>写入MemTable之后就可以返回写入成功</p></li></ol></li><li><p>MemTable写满之后，就会转换成Immutable(不可变的)MemTable，然后再创建一个空的MemTable继续写</p><ol><li><p>Immutable MemTable也不能在内存中无限地占地方，而是会有一个后台线程，不停地把Immutable MemTable复制到磁盘文件中，然后释放内存空间。</p></li><li><p>每个Immutable MemTable 对应于一个磁盘文件，这些文件就是SSTable（这些SSTable文件中的Key是有序的,但是文件之间却是完全无序的，所以还是无法查找）</p></li></ol></li><li><p>SSTable 采用分层合并机制，SSTable被分为很多层，每一层的容量都有一个固定的上限。下一层的容量是上一层的10倍。</p><ol><li><p>当某一层写满时，就会触发后台线程往下一层合并</p></li><li><p>数据合并到下一层之后，本层的SSTable文件就可以删除了</p></li><li><p>合并的过程也是排序的过程，除了Level 0以外，每层中的文件都是有序的</p></li></ol></li><li><p>LSM-Tree 查找的过程也是分层查找</p><ol><li><p>先在内存中的 MemTable 和Immutable MemTable 中查找，然后再按照顺序依次在磁盘的每层SSTable 文件中查找，一旦找到了就直接返回</p></li><li><p>越是经常被读写到的热数据，它在这个分层结构中就越靠上，对这样的Key 查找就越快</p></li><li><p>在内存中缓存SSTable文件的Key用布隆过滤器避免无谓的查找等，以加速查找过程</p></li><li><p>使用多个memtable并在immutbale memtable提前进行数据合并的优</p></li><li><p>为存储的数据逻辑分族，独特的filter 对读优化</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RocksDB 是Facebook 开源的一个高性能、持久化的KV存储引擎，最初是Facebook 的数据库工程师团队基于Google LevelDB 开发。一般来说我们很少见到过哪个项目直接使用RocksDB 来保存数据，即使未来大概也不会像Redis 那样被业务系统直接</summary>
      
    
    
    
    <category term="性能调优" scheme="https://jxch.github.io/categories/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    
    <category term="RockDB" scheme="https://jxch.github.io/tags/RockDB/"/>
    
  </entry>
  
  <entry>
    <title>14.高并发读写</title>
    <link href="https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/14-gao-bing-fa-du-xie/"/>
    <id>https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/14-gao-bing-fa-du-xie/</id>
    <published>2023-07-11T07:22:44.000Z</published>
    <updated>2023-07-11T22:19:16.539Z</updated>
    
    <content type="html"><![CDATA[<ul><li>侧重于“高并发读”的系统<ul><li>搜索引擎</li><li>电商的商品搜索</li><li>电商系统的商品描述、图片和价格</li></ul></li><li>侧重于“高并发写”的系统<ul><li>广告扣费系统</li></ul></li><li>同时有“高并发读”和“高并发写”的系统<ul><li>电商的库存系统和秒杀系统</li><li>支付系统和微信红包</li><li>IM、微博和朋友圈</li></ul></li></ul><h1>高并发读</h1><ul><li>加缓存/读副本<ul><li>本地缓存或集中式缓存（主动更新/被动更新）<ul><li>高可用问题</li><li>不回源策略：缓存为空时直接返回空，不设置缓存的过期时间</li><li>回源策略：缓存为空时查库更新缓存<ul><li>缓存穿透/缓存击穿/热Key过期/缓存雪崩</li></ul></li></ul></li><li>MySQL 的 Master/Slave</li><li>CDN/静态文件加速/动静分离</li></ul></li><li>并发读<ul><li>异步RPC</li><li>冗余请求：100台机器每台延迟率为1%，则C端延迟率为 (1-99%<sup>100</sup>)=63.4%<ul><li>客户端同时向多台服务器发送请求，哪个返回得快就用哪个（但是会调用量翻倍）</li><li>对冲请求<ul><li>如果客户端在一定的时间内（内部服务95%请求的响应时间）没有收到服务端的响应，则马上给另一台（或多台）服务器发送同样的请求</li><li>采用这种方法，可以仅用2%的额外请求将系统99.9%的请求响应时间从1800ms 降低到74ms</li></ul></li><li>捆绑请求<ul><li>当一个上游系统向下游系统分发请求时，将请求分发给任务队列较短，负载较轻的服务器，因为服务抖动一个常见的来源是请求被执行前在服务端的排队延迟</li><li>但是探测负载后服务器负载会发生变化，而且多个服务探测到一个低负载服务时，会使该服务瞬间过热<ul><li>上游系统同时发送两个一样的请求给下游多个服务器，当下游服务器处理完成后，通知其他服务器不用再处理该请求。</li><li>为了防止由于任务队列为空而导致的所有服务器同时处理任务的情况，上游系统需要在发给下游多个系统的两个请求之间引入一个延迟，该延迟时间要足够第一个系统处理完任务并通知其他系统。</li></ul></li></ul></li><li>不要在底层设置太长的任务队列，而由上层基于任务的优先级进行动态的下发<ul><li>自己维护一个队列允许服务器跳过那些更早到来的非延迟敏感的批处理操作，优先往下传那些高优先级的交互请求</li></ul></li><li>将需要长时间运行的任务拆成多个短时间运行的任务</li><li>控制好定时任务和后台运行的任务<ul><li>将后台的大任务拆分成一系列的小任务，在后台任务运行的时候首先确认系统的负载，如果负载太高，则延迟运行后台任务等</li></ul></li></ul></li></ul></li><li>重写轻读<ul><li>微博Feeds流：不是查询的时候再去聚合，而是提前为每个user_id准备一个Feeds流，或者叫收件箱，每个用户都有一个发件箱和收件箱<ul><li>写扩散：发布1条微博后，只写入自己的发件箱就返回成功。然后后台异步地把这条微博推送到1000个粉丝的收件箱</li><li>限制数量：Redis最多保存2000条，2000条以外的丢弃。2000个以前的数据持久化存储并且支持分页查询<ul><li>DB分库分表同时按user_id和时间范围进行分片</li><li>DB二级索引：记录<code>&lt;user_id,月份,count&gt;</code>，快速地定位到offset = 5000的微博发生在哪个月份，也就是哪个数据库的分片</li></ul></li><li>推拉结合：大V的粉丝太多了<ul><li>对于粉丝数多的用户，只推送给在线的粉丝们，离线用户上线时主动去拉</li></ul></li></ul></li><li>多表的关联查询：宽表与搜索引擎<ul><li>分库分表下的关联查询：提前把关联数据计算好，存在一个地方，读的时候直接去读聚合好的数据，而不是读取的时候再去做Join</li><li>可以另外准备一张宽表：把要关联的表的数据算好后保存在宽表里<ul><li>可以定时算，也可能任何一张原始表发生变化之后就触发一次宽表数据的计算</li><li>ES搜索引擎：把多张表的Join结果做成一个个的文档</li></ul></li></ul></li></ul></li><li>读写分离（CQRS 架构）<ul><li>分别为读和写设计不同的数据结构</li><li>写-分库分表；读-缓存；join宽表存ES</li><li>读和写的串联<ul><li>定时任务定期把业务数据库中的数据转换成适合高并发读的数据结构</li><li>写的一端把数据的变更发送到消息中间件，然后读的一端消费消息</li><li>直接监听业务数据库中的 Binlog，监听数据库的变化来更新读的一端的数据</li></ul></li><li>读比写有延迟（最终一致性）<ul><li>但是对对于用户自己的数据，自己写自己读，在用户体验上肯定要保证自己修改的数据马上能看到<ul><li>读和写完全同步</li><li>异步的，但要控制读比写的延迟非常小,用户感知不到</li></ul></li><li>保证数据不能丢失、不能乱序</li></ul></li></ul></li></ul><h1>高并发写</h1><ul><li>数据分片：对要处理的数据或请求分成多份并行处理<ul><li>分库分表</li><li>ES分布式索引：并行地在n个索引上查询，再把查询结果进行合并</li></ul></li><li>异步化：凡是不阻碍主流程的业务逻辑，都可以异步化，放到后台去做<ul><li>短信验证码注册或登录：60s之后没有收到短信，用户会再次点击</li><li>电商的订单系统：拆单<ul><li>支付完成后，服务器会立即返回成功，而不是等1个拆成3个之后再返回成功</li></ul></li><li>广告计费系统<ul><li>在扣费之前其实还有一系列的业务逻辑要处理，比如判断是否为机器人在刷单</li><li>实际上用户的点击请求或浏览请求首先会以日志的形式进行落盘。一般是支持持久化的消息队列</li><li>落盘之后，立即给客户端返回数据。后续的所有处理，当然也包括扣费，全部是异步化的，而且会使用流式计算模型完成后续的所有工作。</li></ul></li><li>写内存 + Write-Ahead 日志：MySQL 中为了提高磁盘IO 的写性能，使用了Write-Ahead 日志，也就是Redo Log。<ul><li>高并发地扣减 MySOL 中的账户余额，或者电商系统中扣库存，如果直接在数据库中扣，数据库会扛不住，则可以在Redis 中扣，同时落一条日志（日志可以在一个高可靠的消息中间件或数据库中插入一条条的日志）。当Redis 宕机，把所有的日志重放完毕，再用数据库中的数据初始化Redis 中的数据。</li></ul></li></ul></li><li>批量写<ul><li>广告计费系统的合并扣费<ul><li>扣费模块一次性地从持久化消息队列中取多条消息，对多条消息按广告主的账号ID进行分组，同一个组内的消息的扣费金额累加合并，然后从数据库里扣除</li></ul></li><li>MySQL 的小事务合并机制<ul><li>比如扣库存，对同一个SKU，本来是扣10 次、每次扣1 个，也就是10 个事务；在MySQL 内核里面合并成1 次扣10 个，也就是10 个事务变成了1 个事务。</li><li>我们同样可以借鉴这一点，比如我们的Canal 同步代码中，首页广告内容的更新就采用同样的机制</li><li>在多机房的数据库多活（跨数据中心的数据库复制）场景中，事务合并也是加速数据库复制的一个重要策略</li></ul></li></ul></li></ul><h1>总结梳理</h1><h2 id="高并发读">高并发读</h2><ul><li><p>加缓存/读副本</p><ul><li><p>本地缓存或集中式缓存（主动更新/被动更新）</p><ul><li><p>高可用问题</p></li><li><p>不回源策略：缓存为空时直接返回空，不设置缓存的过期时间</p></li><li><p>回源策略：缓存为空时查库更新缓存</p><ul><li>缓存穿透/缓存击穿/热Key过期/缓存雪崩</li></ul></li></ul></li><li><p>MySQL 的 Master/Slave</p></li><li><p>CDN/静态文件加速/动静分离</p></li></ul></li><li><p>并发读</p><ul><li><p>异步RPC</p></li><li><p>冗余请求：100台机器每台延迟率为1%，则C端延迟率为 (1-99%100)=63.4%</p><ul><li><p>客户端同时向多台服务器发送请求，哪个返回得快就用哪个（但是会调用量翻倍）</p></li><li><p>对冲请求</p><ul><li><p>如果客户端在一定的时间内（内部服务95%请求的响应时间）没有收到服务端的响应，则马上给另一台（或多台）服务器发送同样的请求</p></li><li><p>采用这种方法，可以仅用2%的额外请求将系统99.9%的请求响应时间从1800ms 降低到74ms</p></li></ul></li><li><p>捆绑请求</p><ul><li><p>当一个上游系统向下游系统分发请求时，将请求分发给任务队列较短，负载较轻的服务器，因为服务抖动一个常见的来源是请求被执行前在服务端的排队延迟</p></li><li><p>但是探测负载后服务器负载会发生变化，而且多个服务探测到一个低负载服务时，会使该服务瞬间过热</p><ul><li><p>上游系统同时发送两个一样的请求给下游多个服务器，当下游服务器处理完成后，通知其他服务器不用再处理该请求。</p></li><li><p>为了防止由于任务队列为空而导致的所有服务器同时处理任务的情况，上游系统需要在发给下游多个系统的两个请求之间引入一个延迟，该延迟时间要足够第一个系统处理完任务并通知其他系统。</p></li></ul></li></ul></li><li><p>不要在底层设置太长的任务队列，而由上层基于任务的优先级进行动态的下发</p><ul><li>自己维护一个队列允许服务器跳过那些更早到来的非延迟敏感的批处理操作，优先往下传那些高优先级的交互请求</li></ul></li><li><p>将需要长时间运行的任务拆成多个短时间运行的任务</p></li><li><p>控制好定时任务和后台运行的任务</p><ul><li>将后台的大任务拆分成一系列的小任务，在后台任务运行的时候首先确认系统的负载，如果负载太高，则延迟运行后台任务等</li></ul></li></ul></li></ul></li><li><p>重写轻读</p><ul><li><p>微博Feeds流：不是查询的时候再去聚合，而是提前为每个user_id准备一个Feeds流，或者叫收件箱，每个用户都有一个发件箱和收件箱</p><ul><li><p>写扩散：发布1条微博后，只写入自己的发件箱就返回成功。然后后台异步地把这条微博推送到1000个粉丝的收件箱</p></li><li><p>限制数量：Redis最多保存2000条，2000条以外的丢弃。2000个以前的数据持久化存储并且支持分页查询</p><ul><li><p>DB分库分表同时按user_id和时间范围进行分片</p></li><li><p>DB二级索引：记录<code>&lt;user_id,月份,count&gt;</code>，快速地定位到offset = 5000的微博发生在哪个月份，也就是哪个数据库的分片</p></li></ul></li><li><p>推拉结合：大V的粉丝太多了</p><ul><li>对于粉丝数多的用户，只推送给在线的粉丝们，离线用户上线时主动去拉</li></ul></li></ul></li><li><p>多表的关联查询：宽表与搜索引擎</p><ul><li><p>分库分表下的关联查询：提前把关联数据计算好，存在一个地方，读的时候直接去读聚合好的数据，而不是读取的时候再去做Join</p></li><li><p>可以另外准备一张宽表：把要关联的表的数据算好后保存在宽表里</p><ul><li><p>可以定时算，也可能任何一张原始表发生变化之后就触发一次宽表数据的计算</p></li><li><p>ES搜索引擎：把多张表的Join结果做成一个个的文档</p></li></ul></li></ul></li></ul></li><li><p>读写分离（CQRS 架构）</p><ul><li><p>分别为读和写设计不同的数据结构</p></li><li><p>写-分库分表；读-缓存；join宽表存ES</p></li><li><p>读和写的串联</p><ul><li><p>定时任务定期把业务数据库中的数据转换成适合高并发读的数据结构</p></li><li><p>写的一端把数据的变更发送到消息中间件，然后读的一端消费消息</p></li><li><p>直接监听业务数据库中的 Binlog，监听数据库的变化来更新读的一端的数据</p></li></ul></li><li><p>读比写有延迟（最终一致性）</p><ul><li><p>但是对对于用户自己的数据，自己写自己读，在用户体验上肯定要保证自己修改的数据马上能看到</p><ul><li><p>读和写完全同步</p></li><li><p>异步的，但要控制读比写的延迟非常小,用户感知不到</p></li></ul></li><li><p>保证数据不能丢失、不能乱序</p></li></ul></li></ul></li></ul><h2 id="高并发写">高并发写</h2><ul><li><p>数据分片：对要处理的数据或请求分成多份并行处理</p><ul><li><p>分库分表</p></li><li><p>ES分布式索引：并行地在n个索引上查询，再把查询结果进行合并</p></li></ul></li><li><p>异步化：凡是不阻碍主流程的业务逻辑，都可以异步化，放到后台去做</p><ul><li><p>短信验证码注册或登录：60s之后没有收到短信，用户会再次点击</p></li><li><p>电商的订单系统：拆单</p><ul><li>支付完成后，服务器会立即返回成功，而不是等1个拆成3个之后再返回成功</li></ul></li><li><p>广告计费系统</p><ul><li><p>在扣费之前其实还有一系列的业务逻辑要处理，比如判断是否为机器人在刷单</p></li><li><p>实际上用户的点击请求或浏览请求首先会以日志的形式进行落盘。一般是支持持久化的消息队列</p></li><li><p>落盘之后，立即给客户端返回数据。后续的所有处理，当然也包括扣费，全部是异步化的，而且会使用流式计算模型完成后续的所有工作。</p></li></ul></li><li><p>写内存 + Write-Ahead 日志：MySQL 中为了提高磁盘IO 的写性能，使用了Write-Ahead 日志，也就是Redo Log。</p><ul><li>高并发地扣减 MySOL 中的账户余额，或者电商系统中扣库存，如果直接在数据库中扣，数据库会扛不住，则可以在Redis 中扣，同时落一条日志（日志可以在一个高可靠的消息中间件或数据库中插入一条条的日志）。当Redis 宕机，把所有的日志重放完毕，再用数据库中的数据初始化Redis 中的数据。</li></ul></li></ul></li><li><p>批量写</p><ul><li><p>广告计费系统的合并扣费</p><ul><li>扣费模块一次性地从持久化消息队列中取多条消息，对多条消息按广告主的账号ID进行分组，同一个组内的消息的扣费金额累加合并，然后从数据库里扣除</li></ul></li><li><p>MySQL 的小事务合并机制</p><ul><li><p>比如扣库存，对同一个SKU，本来是扣10 次、每次扣1 个，也就是10 个事务；在MySQL 内核里面合并成1 次扣10 个，也就是10 个事务变成了1 个事务。</p></li><li><p>我们同样可以借鉴这一点，比如我们的Canal 同步代码中，首页广告内容的更新就采用同样的机制</p></li><li><p>在多机房的数据库多活（跨数据中心的数据库复制）场景中，事务合并也是加速数据库复制的一个重要策略</p></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;侧重于“高并发读”的系统
&lt;ul&gt;
&lt;li&gt;搜索引擎&lt;/li&gt;
&lt;li&gt;电商的商品搜索&lt;/li&gt;
&lt;li&gt;电商系统的商品描述、图片和价格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;侧重于“高并发写”的系统
&lt;ul&gt;
&lt;li&gt;广告扣费系统&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="高并发" scheme="https://jxch.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>13.Sentinel限流</title>
    <link href="https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/13-sentinel-xian-liu/"/>
    <id>https://jxch.github.io/2023/07/11/architect/06.dian-shang-xi-tong/13-sentinel-xian-liu/</id>
    <published>2023-07-11T01:46:23.000Z</published>
    <updated>2023-07-11T22:18:22.993Z</updated>
    
    <content type="html"><![CDATA[<p>针对电商系统，在遇到大流量时，更多考虑的是运行阶段如何保障系统的稳定运行，常用的手段：<strong>限流，降级，拒绝服务</strong>。</p><h1>限流</h1><p>客户端限流</p><ul><li>好处：可以限制请求的发出，通过减少发出无用请求从而减少对系统的消耗。</li><li>缺点：当客户端比较分散时，没法设置合理的限流阈值：如果阈值设的太小，会导致服务端没有达到瓶颈时客户端已经被限制；而如果设的太大，则起不到限制的作用。</li></ul><p>服务端限流</p><ul><li>好处：可以根据服务端的性能设置合理的阈值</li><li>缺点：被限制的请求都是无效的请求，处理这些无效的请求本身也会消耗服务器资源。</li></ul><p>在限流的实现手段上来讲，基于&nbsp;QPS&nbsp;和线程数的限流应用最多，最大&nbsp;QPS&nbsp;很容易通过压测提前获取。线程数限流在客户端比较有效，例如在远程调用时我们设置连接池的线程数，超出这个并发线程请求，就将线程进行排队或者直接超时丢弃。限流必然会导致一部分用户请求失败，因此在系统处理这种异常时一定要设置超时时间，防止因被限流的请求不能&nbsp;fast&nbsp;fail（快速失败）而拖垮系统。</p><p>限流的方案</p><ul><li>前端限流</li><li>接入层nginx限流</li><li>网关限流<ul><li>基于redis+lua脚本限流（RequestRateLimiter过滤器工厂，令牌桶）</li><li>sentinel限流<ul><li>route维度限流<ul><li>针对请求属性进行流控</li></ul></li><li>API维度限流</li><li>规则持久化<ul><li>启动持久化改造后的Sentinel控制台（指定端口和nacos配置中心地址）</li><li>网关规则改造的坑<ul><li>网关规则实体转换<ul><li>RuleEntity#toRule</li><li>ApiDefinitionEntity#toApiDefinition</li><li>GatewayFlowRuleEntity#toGatewayFlowRule</li></ul></li><li>json解析丢失数据<ul><li>ApiDefinition的属性<code>Set&lt;ApiPredicateItem&gt;&nbsp;predicateItems</code>中元素是接口类型，JSON解析丢失数据</li><li>重写实体类MyApiDefinition,再转换为ApiDefinition</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>应用层限流<ul><li>微服务接入sentinel<ul><li>匀速排队限流<ul><li>Sentinel<strong>匀速排队</strong>方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</li><li>这种方式主要用于处理间隔性突发的流量（匀速排队模式暂时不支持&nbsp;QPS&nbsp;&gt;&nbsp;1000&nbsp;的场景）</li></ul></li><li>热点参数限流<ul><li>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。</li><li>热点规则需要使用<code>@SentinelResource("resourceName")</code>注解，否则不生效</li><li>参数必须是7种基本数据类型才会生效</li></ul></li></ul></li></ul></li></ul><h1>降级</h1><p>降级就是当系统的容量达到一定程度时，限制或者关闭系统的某些非核心功能，从而把有限的资源保留给更核心的业务。降级的核心目标是牺牲次要的功能和用户体验来保证核心业务流程的稳定，是一个不得已而为之的举措。</p><p>服务降级的策略</p><ul><li>自动化运维<ul><li>自动开关降级（超时、失败次数、故障、限流）</li><li>手动开关降级</li></ul></li><li>功能维度：读服务降级、写服务降级</li><li>系统层次维度：JS降级开关、接入层降级开关、应用层降级开关（OpenFeign整合Sentinel）</li></ul><h1>拒绝服务</h1><p>拒绝服务可以说是一种不得已的兜底方案，用以防止最坏情况发生，防止因把服务器压跨而长时间彻底无法提供服务。</p><ul><li>系统资源过载保护</li><li><a href="https://github.com/alibaba/nginx-http-sysguard">Nginx过载保护</a></li><li>Sentinel自适应限流<ul><li>Load&nbsp;自适应（仅对&nbsp;Linux/Unix­like&nbsp;机器生效）：系统的&nbsp;load1&nbsp;作为启发指标，进行自适应系统保护。当系统&nbsp;load1&nbsp;超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR&nbsp;阶段）。系统容量由系统的&nbsp;maxQps * minRt&nbsp;估算得出。设定参考值一般是&nbsp;CPU cores * 2.5。</li><li>CPU&nbsp;usage（1.5.0+&nbsp;版本）：当系统&nbsp;CPU&nbsp;使用率超过阈值即触发系统保护（取值范围&nbsp;0.0-­1.0），比较灵敏。</li><li>平均&nbsp;RT：当单台机器上所有入口流量的平均&nbsp;RT&nbsp;达到阈值即触发系统保护，单位是毫秒。</li><li>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口&nbsp;QPS：当单台机器上所有入口流量的&nbsp;QPS&nbsp;达到阈值即触发系统保护。</li><li>系统规则持久化yml配置<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">system‐rules</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>  <span class="token key atrule">server‐addr</span><span class="token punctuation">:</span> 192.168.65.103<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">dataId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>‐system‐rules  <span class="token key atrule">groupId</span><span class="token punctuation">:</span> SENTINEL_GROUP  <span class="token key atrule">data‐type</span><span class="token punctuation">:</span> json  <span class="token key atrule">rule‐type</span><span class="token punctuation">:</span> system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1>总结梳理</h1><h2 id="限流">限流</h2><ul><li><p>前端限流</p></li><li><p>接入层nginx限流</p></li><li><p>网关限流</p><ul><li><p>基于redis+lua脚本限流（RequestRateLimiter，令牌桶）</p></li><li><p>sentinel限流</p><ul><li><p>route维度限流：针对请求属性进行流控</p></li><li><p>API维度限流</p></li><li><p>规则持久化</p><ul><li><p>改造Sentinel控制台（指定端口和nacos配置中心地址）</p></li><li><p>网关规则实体转换： RuleEntity#toRule； ApiDefinitionEntity#toApiDefinition； GatewayFlowRuleEntity#toGatewayFlowRule</p></li><li><p>json解析丢失数据：重写实体类MyApiDefinition,再转换为ApiDefinition</p></li></ul></li></ul></li></ul></li><li><p>应用层限流（微服务接入sentinel）</p><ul><li><p>匀速排队限流：处理间隔性突发的流量（漏桶算法）</p><ul><li>暂时不支持&nbsp;QPS&nbsp;&gt;&nbsp;1000&nbsp;的场景</li></ul></li><li><p>热点参数限流（<code>@SentinelResource("resourceName")</code>）</p><ul><li>参数必须是7种基本数据类型才会生效</li></ul></li></ul></li></ul><h2 id="降级">降级</h2><ul><li><p>自动化运维</p><ul><li><p>自动开关降级（超时、失败次数、故障、限流）</p></li><li><p>手动开关降级</p></li></ul></li><li><p>功能维度：读服务降级、写服务降级</p></li><li><p>系统层次维度：JS降级开关、接入层降级开关、应用层降级开关（OpenFeign整合Sentinel）</p></li></ul><h2 id="拒绝服务">拒绝服务</h2><ul><li><p>系统资源过载保护</p></li><li><p><a href="https://github.com/alibaba/nginx-http-sysguard">Nginx过载保护</a></p></li><li><p>Sentinel自适应限流</p><ul><li><p>Load&nbsp;自适应（Linux/Unix­like）：参考值 CPU cores * 2.5</p></li><li><p>CPU&nbsp;usage：比较灵敏</p></li><li><p>平均&nbsp;RT：单位是毫秒</p></li><li><p>并发线程数</p></li><li><p>入口&nbsp;QPS</p></li><li><p>系统规则持久化（system‐rules.nacos）</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;针对电商系统，在遇到大流量时，更多考虑的是运行阶段如何保障系统的稳定运行，常用的手段：&lt;strong&gt;限流，降级，拒绝服务&lt;/strong&gt;。&lt;/p&gt;
&lt;h1&gt;限流&lt;/h1&gt;
&lt;p&gt;客户端限流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好处：可以限制请求的发出，通过减少发出无用请求从而减少</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Sentinel" scheme="https://jxch.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>12.秒杀系统</title>
    <link href="https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/12-miao-sha-xi-tong/"/>
    <id>https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/12-miao-sha-xi-tong/</id>
    <published>2023-07-10T07:06:35.000Z</published>
    <updated>2023-07-11T22:08:33.537Z</updated>
    
    <content type="html"><![CDATA[<p>秒杀系统的挑战:巨大的瞬时流量、热点数据问题、刷子流量</p><ol><li>CDN</li><li>将Nginx 的职责放大，前置用来做Web 网关，承担部分业务逻辑校验，并且可能增加黑白名单、限流和流控的功能<ul><li>刷子:无效:正常请求 = 6:1:3</li></ul></li></ol><h1>秒杀业务流程梳理</h1><p>1．运营人员在秒杀系统的运营后台，根据指定商品，创建秒杀活动，指定活动的开始时间、结束时间、活动库存等。<br>2．活动开始之前，由秒杀系统运营后台开启秒杀，会同时往商城系统的RedisCluster 集群写入首页秒杀活动信息和往秒杀系统的Redis主从集群写诸如秒杀商品库存等信息。<br>3．用户进入到秒杀商详页准备秒杀。<br>4．商详页可以看到立即抢购的按钮，这里我们可以通过增加一些逻辑判断来限制按钮是否可以点击，比如是否设置了抢购用户等级限制，是否还有活动库存，是否设置了预约等等。如果都没限制，用户可以点击抢购按钮，进入到秒杀结算页。<br>5．在结算页，用户可更改购买数量，切换地址、支付方式等，这里的结算元素也需要按实际业务来定，更复杂的场景还可以支持积分、优惠券、红包、配送时效等，并且这些都会影响最终价格的计算。<br>6．确认无误后，用户提交订单，在这里后端服务可以调用风控、限购等接口，来完善校验，都通过之后，完成库存的扣减和订单的生成。<br>7.订单完成后，根据用户选择的支付方式跳转到对应的页面，比如在线支付就跳转到收银台，货到付款的话，就跳到下单成功提示页。</p><h1>秒杀的隔离</h1><p>因为秒杀流量是突发式的，而且流量规模很难提前准确预估，如果混合在一起，势必会对普通商品的交易造成比较大的冲击。需要单独搭建秒杀系统，它天然为流量而生。</p><h2 id="业务隔离">业务隔离</h2><p>大部分的电商平台，会有一个专门的<strong>提报系统</strong>(提报系统的建设不是秒杀的核心部分，我们系统没有实现)，商家或者业务可以根据自己的运营计划在提报系统里进行活动提报，提供参与秒杀的商品编号、活动起止时间、库存量、限购规则、风控规则以及参与活动群体的地域分布、预计人数、会员级别等基本信息。电商平台的提报过程和这些基本信息，对于大厂是比较重要的，有了这些信息作为输入，<strong>技术部门就能预估出大致的流量、并发数等</strong>，并结合系统当前能支撑的容量情况，评估是否需要扩容，是否需要降级或者调整限流策略等，因此业务隔离重要性也很高。</p><h2 id="系统隔离">系统隔离</h2><p>比较常见的实践是<strong>对会被流量冲击比较大的核心系统进行物理隔离</strong>，而相对链路末端的一些系统，经过前面的削峰之后，流量比较可控了，这些系统就可以不做物理隔离。<br>用户的秒杀一定是首先进入商品详情页（很多电商的秒杀系统还会在商详页进行倒计时等待，时间到了点击秒杀按钮进行抢购）。因此第一个需要关注的系统就是商品详情页，我们需要申请<strong>独立的秒杀详情页域名，独立的 Nginx 负载均衡器，以及独立的详情页后端服务</strong>。<br>如有可能，还需要对域名进行隔离，可以申请一个独立的域名，专门用来承接秒杀流量，流量从专有域名进来之后，分配到专有的负载均衡器，再路由到专门的微服务分组，这样就做到了应用服务层面从入口到微服务的流量隔离。<br>一般来说，秒杀中流量冲击比较大的核心系统就是<strong>秒杀详情页、秒杀结算页、秒杀下单库存扣减</strong>是需要我们重点关注的对象，而相对链路末端的一些系统，经过前面的削峰之后，流量比较可控了，如收银台、支付系统，物理隔离的意义就不大，反而会增加成本。</p><h2 id="数据隔离">数据隔离</h2><p>数据层的专有部署，需要结合秒杀的场景来设计部署拓扑结构，比如 Redis缓存，一般的场景一主一从就够了，但是在秒杀场景，需要<strong>一主多从来扛读热点数据</strong>。</p><h1>Nginx(OpenResty)</h1><p>Nginx 有5 大优点，即模块化、事件驱动、异步、非阻塞、多进程单线程。</p><p>OpenResty 是一个基于 Nginx 与Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能Web 应用系统。Lua的线程模型是单线程多协程的模式，而Nginx 刚好是单进程单线程</p><h2 id="原理">原理</h2><p>Nginx 服务器启动后，产生一个 Master 进程（Master Process），Master 进程执行一系列工作后产生一个或者多个 Worker 进程（Worker Processes）。其中，**Master 进程用于接收来自外界的信号，并向各 Worker 进程发送信号，同时监控Worker 进程的工作状态。**当 Worker 进程退出后(异常情况下)，Master 进程也会自动重新启动新的 Worker 进程。Worker 进程则是外部请求真正的处理者。<br>多个 Worker 进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。<strong>一个请求，只可能在一个 Worker 进程中处理，一个 Worker 进程不可能处理其它进程的请求</strong>。Worker 进程的个数是可以设置的，<strong>一般我们会设置与机器CPU 核数一致</strong>。同时，Nginx 为了更好的利用多核特性，具有 CPU 绑定选项，我们可以将某一个进程绑定在某一个核上，这样就不会因为进程的切换带来cache 的失效（CPU affinity）。所有的进程的都是单线程（即只有一个主线程）的，进程之间通信主要是通过共享内存机制实现的。</p><p>OpenResty 本质上是将LuaJIT 的虚拟机嵌入到Nginx 的管理进程和工作进程中，<strong>同一个进程内的所有协程都会共享这个虚拟机</strong>，并在虚拟机中执行Lua 代码。在性能上，OpenResty 接近或超过 Nginx 的C 模块，而且开发效率更高。<br>Nginx 将HTTP 请求的处理过程划分为多个阶段。这样可以使一个HTTP 请求的处理过程由很多模块参与处理，每个模块只专注于一个独立而简单的功能处理，可以使性能更好、更稳定，同时拥有更好的扩展性。</p><ol><li>ngx_http_post_read_phase：接收到完整的http 头部后处理的阶段，它位于uri 重写之前。</li><li>ngx_http_server_rewrite_phase：uri 与location 匹配前，修改uri 的阶段，用于重定向。</li><li>ngx_http_find_config_phase：根据uri 寻找匹配的location 块配置项阶段，该阶段使用重写之后的uri 来查找对应的location，值得注意的是该阶段可能会被执行多次，因为也可能有location 级别的重写指令。</li><li>ngx_http_rewrite_phase：上一阶段找到location 块后再修改uri，location 级别的uri 重写阶段，该阶段执行location 基本的重写指令，也可能会被执行多次。</li><li>ngx_http_post_rewrite_phase：防止重写url 后导致的死循环，location 级别重写的后一阶段，用来检查上阶段是否有uri 重写，并根据结果跳转到合适的阶段。</li><li>ngx_http_preaccess_phase：下一阶段之前的准备，访问权限控制的前一阶段，该阶段在权限控制阶段之前，一般也用于访问控制，比如限制访问频率，链接数等。</li><li>ngx_http_access_phase：让http 模块判断是否允许这个请求进入nginx 服务器，访问权限控制阶段，比如基于ip 黑白名单的权限控制，基于用户名密码的权限控制等。标准模块 ngx_access、第三方模块 ngx_auth_request 以及第三方模块ngx_lua 的 access_by_lua 指令就运行在这个阶段。</li><li>ngx_http_post_access_phase：访问权限控制的后一阶段，该阶段根据权限控制阶段的执行结果进行相应处理。</li><li>ngx_http_try_files_phase：为访问静态文件资源而设置，try_files 指令的处理阶段，如果没有配置try_files 指令，则该阶段被跳过。</li><li>ngx_http_content_phase：处理http 请求内容的阶段，大部分http 模块介入这个阶段，内容生成阶段，该阶段产生响应，并发送到客户端。Nginx 的 content 阶段是所有请求处理阶段中最为重要的一个，因为运行在这个阶段的配置指令一般都肩负着生成“内容”（content）并输出HTTP 响应的使命。</li><li>ngx_http_log_phase：log 阶段处理，比如记录访问量/统计平均响应时间。log_by_lua处理完请求后的日志记录阶段，该阶段记录访问日志。</li></ol><p>以上11个阶段中，http 无法介入的阶段有4 个：3）ngx_http_find_config_phase、5）ngx_http_post_rewrite_phase、8）ngx_http_post_access_phase、9）ngx_http_try_files_phase。</p><p>OpenResty 在HTTP 处理阶段基础上分别在Rewrite/Access 阶段、Content 阶段、Log 阶段注册了自己的handler，加上系统初始阶段master 的两个阶段，共11 个阶段为Lua 脚本提供处理介入的能力。</p><ol><li>init_by_lua*：Master 进程加载Nginx 配置文件时运行，一般用来注册全局变量或者预加载Lua 模块。</li><li>init_worker_by_lua*：每个worker 进程启动时执行，通常用于定时拉取配置/数据或者进行后端服务的健康检查。</li><li>set_by_lua*：变量初始化。</li><li>rewrite_by_lua*:可以实现复杂的转发、重定向逻辑。</li><li>access_by_lua*:IP 准入、接口权限等情况集中处理。</li><li>content_by_lua*:内容处理器，接收请求处理并输出响应。</li><li>header_filter_by_lua*:响应头部或者cookie 处理。</li><li>body_filter_by_lua*:对响应数据进行过滤，如截断或者替换。</li><li>log_by_lua*:会话完成后，本地异步完成日志记录</li></ol><h2 id="秒杀系统中的OpenResty">秒杀系统中的OpenResty</h2><p>所以我们秒杀的OpenResty 就不仅仅承担着反向代理和负载均衡的职能。还承担着网关、静态模板化网页访问、静态资源访问、流量管控、防刷等一系列职能。这些都需要我们使用Lua 脚本来完成，配置一下对Lua 脚本的支持</p><h2 id="商详页的静态化">商详页的静态化</h2><p>首先当然是生成静态html，我们使用freemarker 来处理，将通用的产品模板文件product.ftl 变为确定的商品Html<br>命名规则为seckill_+秒杀活动id + “_” + 秒杀产品ID，如 seckill_1_3.html，并保存在本地磁盘。<br>然后将产生的商品Html 上传到Nginx 服务器，用 jsch 组件<br>利用sftp 进行上传，注意，因为秒杀的Nginx服务器可能有多台，所以要循环服务器列表依次上传。</p><h2 id="OpenResty中的处理">OpenResty中的处理</h2><p>还需要把访问链接和实际的Html 页面进行对应，而且在把页面作为结果返回给用户之前，我们可能还有一些其他的事情要做，这就需要在Nginx 中再将已经生成的seckill_1_3.html 作为模板文件再处理一次。于是我们引入第三方的模板文件处理Lua 脚本，并放置到Nginx 服务器Lua 库目录下<br>当用户访问秒杀的商详页时，还需要告诉Nginx 返回给用户的网页内容需要由product.lua 进行处理</p><h2 id="商详页的库存获取">商详页的库存获取</h2><p>用户访问秒杀的商详页，我们用静态网页展示给了用户，但是有些数据还是需要动态获取的，比如秒杀商品的库存。</p><ol><li>直接让Nginx 访问Redis 来获得商品的当前库存</li><li>让Redis 的从库和Nginx在部署在同一台服务器<ol><li>如果本地Redis 宕机的情况，需要我们回源到微服务中查询主Redis 或者数据库</li></ol></li><li>还可以直接使用Unix Domain Socket 来避免真实的网络通讯实现下占用网络连接、并且需要经过网络协议栈，需要打包拆包、计算校验和、维护序号和应答等TCPIP 协议固有要求，进一步提高访问效率。</li></ol><h1>秒杀前期流量管控</h1><p>通过对秒杀流量的隔离，我们已经能够把巨大瞬时流量的影响范围控制在隔离的秒杀环境里了。接下来，我们开始考虑隔离环境的高可用问题，通俗点说，普通商品交易流程保住了，现在就要看怎么把秒杀系统搞稳定，来应对流量冲击，让秒杀系统也不出问题。方法很多，有流量控制、削峰、限流、缓存热点处理、扩容、熔断等一系列措施。</p><p>先来看流量控制。<strong>在库存有限的情况下，过多的用户参与实际上对电商平台的价值是边际递减的</strong>。举个例子，1 万的荣耀手机，100 万用户进来秒杀和1000万用户进来秒杀，对电商平台而言，所带来的经济效益、社会影响不会有10 倍的差距。相反，用户越多，一方面消耗机器资源越多；另一方面，越多的人抢不到商品，电商平台的客诉和舆情压力也就越大。当然如果为了满足用户，让所有用户都能参与，秒杀系统也可以通过堆机器扩容来实现，但是成本太高，ROI 不划算，所以我们需要，也可以提前对流量进行管控。</p><p>一般来说，很多电商平台，特别是头部电商很多时候会用“<strong>预约＋秒杀</strong>”作为主流营销玩法。预约期内，开放用户预约，获取秒杀抢购资格，秒杀期内，具备抢购资格的用户真正开始秒杀。<strong>在预约期内，关键是锁定用户</strong>，这也是做前期流量管控的核心。</p><h2 id="预约系统设计">预约系统设计</h2><p>先从角色看，参与的有运营方，提供商品，进行预约活动的计划安排；终端用户，进行预约和秒杀行为；以及支撑预约活动的交易链路系统。</p><ol><li>需要一个预约管理后台，进行活动的设置和关闭；</li><li>需要一个预约系统向预约过的用户发短信或消息提醒；</li><li>需要一个面向终端的预约核心微服务，提供给用户预约和取消预约能力；</li><li>商详在展示时获取预约信息的能力，比如当前商品是否预约，当前预约人数等等；</li><li>秒杀下单时检查用户预约资格的能力。</li></ol><p>所以在数据库层面，对预约来讲，核心就是两个维度：<strong>预约活动和用户预约关系</strong>。所以需要两张表，一张是预约活动信息表，记录预约活动本身的信息，比如预约活动的开始结束时间，预约活动对应的秒杀活动信息，预约的商品信息等等；另一张是用户预约关系表，比如用户的ID，预约的活动ID，预约的商品等等。</p><h2 id="预约系统优化">预约系统优化</h2><p>传统的预约模式，预约期是固定的时间段，用户在这个阶段内都可以预约;但在秒杀场景下，为了能够准确把控流量，控制预约人数上限，我们需要拓展预约期的定义，<strong>除了时间维度外，还要加入预约人数上限的维度</strong>，一旦达到上限，预约期就即时结束。<br>这实际上是给预约活动添加了一个自动熔断的功能，一旦活动太火爆，到达上限后系统自动关闭预约入口，提前进入等待秒杀状态。这样就可以准确把控人数，从而为秒杀期护航。但是当用户都知道必须有预约才能参加秒杀时，用户就会在预约期抢占预约资格，那么此时的<strong>预约系统也具备一定程度秒杀系统的特点了。不过预约人数的把控不需要那么精确，只需要即时熔断即可</strong>，比如准备预约人数为100 万，实际105 万或者110 万都没有什么问题。对于头部电商平台，<strong>每次预约人数都可以达到千万量级的，因此为了更好的性能，往往还需要对数据库分库分表，主要是用户预约关系表</strong>。另外，<strong>对于预约历史数据，也需要有个定时任务进行结转归档，以减轻数据库的压力</strong>。但是仅仅分库分表还是不够的，对高并发系统来说，要扛住大流量，肯定不能让流量击穿到数据库，所以需要设计缓存来抵挡。首先是预约活动信息表，这是个很明显的读热点，所有的预约商品展示的时候都需要这份数据，很自然我们可以将数据在 Redis 缓存里存储，如果 Redis 缓存也扛不住，可以使用Redis <strong>一主多从</strong>来扛，也可以使用服务的<strong>本地缓存</strong>。对于用户预约关系表，是跟着用户走的，没有读热点问题，只要用户登录或者合适的时机将该用户的本次预约关系加载到Redis 缓存即可，在预约商品展示时从Redis 读取然后告诉用户是否已经预约。用户进行预约的时候怎么办呢？虽然用户预约关系表可以做分库分表，本身又是个纯粹的insert 操作，MySQL 执行相对来说速度较快，但是要考虑某些热门商品会短时间挤入大量的用户，这个时候可以考虑使用<strong>消息中间件异步写入，做好消息的防重防丢失，同时前端提醒用户“预约排队中”。</strong><br>另外，一般预约系统在业务设计上，需要在商详页展示<strong>当前预约人数</strong>给用户看，以营造商品火爆的气氛。我们自然就想到了可以在Redis 里记录一个预约人数的记录。商详页展示氛围的时候，会从Redis 里获取到这个记录进行提示，而用户点击“立即预约”按钮进行预约时，会往这个key 进行累加操作。这个设计在预约流量没那么聚集时没什么问题，因为一般 Redis 单片也能扛个七八万的OPS。而当预约期每秒中十几万，甚至几十万预约呢？显然这个Redis key 就是典型的写热 key 问题了。考虑到这个预约人数并不需要非常精确，这个热key 问题的解决我们可以考虑<strong>在本地缓存中累加，然后批量的方式写入Redis</strong>，比如累加了1000 个人后一次性在Redis 中incr 1000，这样就把对Redis 的写压力降低了1000 倍。通过预约来控制流量属于事前管控</p><h1>秒杀的事中流量管控</h1><h2 id="流量削峰">流量削峰</h2><p>我们已经知道了秒杀有隔离和事前流量控制，其目的是降低流量的相互耦合和量级，减少对系统的冲击。秒杀系统事中流量管控——削峰和限流让系统更加稳健。<br>真实场景下的秒杀流量一般几秒内爬升到峰值，然后很快往平常值回归。我们现在需要做的就是通过削峰和限流，把这超大的瞬时流量平稳地承接下来，落到秒杀系统里。<br>削峰填谷概念一开始出现在电力行业，是调整用电负荷的一种措施，在互联网分布式高可用架构的演进过程中，也经常会采用类似的削峰填谷手段来构建稳定的系统。<br>削峰的方法有很多，可以分为无损和有损削峰。本质上，限流是一种有损技术削峰；而引入验证码、问答题以及异步化消息队列可以归为无损削峰，不过我们习惯上会把限流和削峰分开来说，所以我们这里也分开阐述。</p><p>我们已经知道秒杀的业务特点是库存少，最终能够抢到商品的人数取决于库存数量，而参与秒杀的人越多，并发数就越高，随之无效请求也就越多。在秒杀开始的时刻，会出现巨大的瞬时流量，这个流量对资源的消耗也是巨大且瞬时的。<br>我们支撑秒杀系统的硬件资源是一定是有限的，它的处理能力也是恒定的，当有秒杀活动的时候，很容易繁忙导致请求处理不过来，而没有活动的时候，机器又是低负载运转。但是为了保证用户的秒杀体验，一般情况下我们的处理资源只能按照忙的时候来预估，这会导致资源的一个浪费。因此我们需要设计一些规则，延缓并发请求，甚至过滤掉无效的请求，让真正可以下单的请求越少越好。总结来说，<strong>削峰的本质，一是让服务端处理变得更加平稳，二是节省服务器的机器成本。</strong></p><h3 id="验证码和问答题">验证码和问答题</h3><p>在秒杀交易流程中，引入验证码和问答题，有两个目的：<strong>一是快速拦截掉部分刷子流量，防止机器作弊，起到防刷的作用；二是平滑秒杀的毛刺请求，延缓并发，对流量进行削峰。</strong> 让用户在秒杀前输入验证码或者做问答题，不同用户的手速有快有慢，这就起到了让1s 的瞬时流量平均到30s 甚至1 分钟的平滑流量中，这样就不需要堆积过多的机器应对1s 的瞬时流量了。</p><p><strong>从session 共享角度来说，验证码应该放入Redis</strong><br>还需注意的是验证码放入主Redis 后，如果选择从Nginx 直接读取从Redis 的方式，需要注意Redis 主从同步的延迟问题，解决方案可以在Lua 脚本中引入以下两者之一：1. 休眠后重试”os.execute("sleep " … n)”；<strong>读从Redis 未果，则读主Redis</strong></p><p>当然，<strong>验证码本身也可以独立为一个微服务</strong>，因为当生成验证码本身成为性能瓶颈，可以验证码服务集群化或者预生成批量验证码并缓存，但是缓存的内容除了验证码的文字结果外，验证图片也要缓存。很多大厂就有独立的验证码服务集群，这个时候直接调用即可。</p><h3 id="消息队列">消息队列</h3><p>如果服务A 的流量非常高(假设10 万QPS)，远远大于服务B 所能支持的能力(假设1 万QPS)，那么服务B 的CPU 很快就会升高，TP99 也随之变高，最终服务B 被服务A 的流量冲垮。这个时候，消息队列就派上用场了，我们把一步调用的直接紧耦合方式，通过消息队列改造成两步异步调用，让超过服务B 范围的流量，暂存在消息队列里，由B 根据自己的服务能力来决定处理快慢，这就是通过消息队列进行调用解耦的常见手段。</p><p>而在秒杀系统拉取消息队列进行处理的时候，也有个小技巧，那就是<strong>当前面的请求已经把库存消耗光之后，在缓存里设置占位符，让后续的请求快速失败</strong>，从而最快地进行响应。</p><h2 id="限流">限流</h2><p>主流的做法是从上游开始，对流量进行<strong>逐级限流，分层过滤</strong>，优质的有效的流量最终才能参与下单。</p><p>通过一系列的<strong>逐级限流，分层过滤</strong>，比如风控和防刷筛选刷子流量，通过限购和预约校验过滤无效流量，通过限流丢弃多余流量，最终秒杀系统给到下游的流量就是非常优质且少量的了。限流常用的算法有<strong>令牌桶和漏桶</strong></p><h3 id="Nginx-限流">Nginx 限流</h3><p>Nginx 本身也提供了非常强大的限流功能，比如有两个专门的限流模块<strong>HttpLimitzone 和HttpLimitReqest</strong>，HttpLimitzone 用来限制一个客户端的并发连接数，HttpLimitReqest 通过漏桶算法来限制用户的连接频率，我们用HttpLimitReqest来说明如何限流。</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">http {     limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;     server {        location /search/ {            limit_req zone=one burst=2 nodelay;         }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>limit_req_zone 是指令名称，也就是关键字，只能在http 块中使用；</li><li>$binary_remote_addr 是Nginx 内置绑定变量，比如$remote_port 是客户端端口号；</li><li>zone=one:10m zone 是关键字，one 是自定义的规则名称，后续代码中可以指定使用哪个规则；10m 是指声明多大内存来支撑限流的功能，从理论上说一个1MB 的区域可以包含大约16000 个会话状态；</li><li>rate=1r/s rate 是关键字，可以指定限流的阈值，r/s 意为每秒允许通过的请求数，我们这里就限定了每秒1 请求。</li></ul><p>再看两个实际例子：</p><ul><li><p><code>limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;</code></p><ul><li>表示同一ip 不同请求地址，进入名为one 的zone，限制速率为5 请求/秒。</li></ul></li><li><p><code>limit_req_zone $binary_remote_addr $uri zone=two:10m rate=1r/s;</code></p><ul><li>同一ip 同一请求地址，进入名为two 的zone，限制速率为1 请求/秒。</li></ul></li><li><p>limit_req 是指令名称，可在http，server，location 块中使用，这个指令主要用于设置共享的内存zone 和最大的突发请求大小；</p></li><li><p>zone=one 使用名为one 的zone，这个zone 之前使用limit_req_zone 声明过；</p></li><li><p>burst=2 burst 用于指定最大突发请求数，超过这个数目的请求会被延时；</p></li><li><p>nodelay 设置了nodelay，在突发请求数大于burst 时，会立刻丢弃掉这部分请求，一般情况下会给客户端返回503 状态。</p></li></ul><p><strong>在秒杀的场景下，一般会把 rate 和 burst 设置的很低，可以都为 1，即要求1 个IP 1 秒内只能访问1 次</strong>。<br>这种设置一般对公司用户不太友好，公司内用户，他们的出口 IP 就那么几个，很容易就触发了限流，所以大家在参与头部电商的秒杀活动时，最好切换到自己的手机网络，避免被“误杀”。</p><h3 id="应用-服务层限流">应用/服务层限流</h3><ul><li><strong>线程池限流: 配置最大连接数</strong>，以请求处理队列长度以及拒绝策略等参数来达到限流的目的。当处理队列满，而且最大线程都在处理时，多余的请求就会被拒绝策略丢弃，也就是被限流了。</li><li><strong>API 限流: 我们希望根据QPS多少来进行限流</strong>，这时就不能用线程池策略了但是可以用Google 提供的 <strong>RateLimiter</strong> 开源包，自己手写一个基于令牌桶的限流注解和实现，在业务API 代码里使用。<ul><li>现在大家用的<strong>Sentinel</strong> 流量治理组件会比较多，可以从从流量路由、流量控制、流量整形、熔断降级、系统自适应过载保护、热点流量防护等多个维度来帮助保障微服务的稳定性</li></ul></li><li>自定义限流<ul><li>在用户进入订单结算页面时，前端页面会先调用生成订单号的服务得到一个订单号，在用户提交订单的时候，在创建订单的请求中带着这个订单号</li><li>如果每个用户的请求都去申请一个订单号，在秒杀高并发的情况下是无法应对的</li><li><strong>用一个线程安全的ConcurrentLinkedQueue 预先存放一批订单ID，这样的话订单的ID 无需去远程获取了。ConcurrentLinkedQueue 中订单号的刷新则是通过定时任务刷新。</strong></li><li>目前设定是100 毫秒刷新一次，1 秒钟最多从生成订单号的服务获得2000个订单ID，以常数的形式的写死在代码中的，这两个值其实可以写入<strong>配置中心进行热部署</strong>，方便秒杀根据实际情况来调整。而从生成订单号的服务获得批量订单ID 数，则是通过公式计算出来的，按照缺省值ConcurrentLinkedQueue 每100 毫秒最多有200 个订单ID，这其实就起了一个限流的作用，因为在从ConcurrentLinkedQueue 获得订单ID 的时候，<strong>如果没有获取到，会直接返回中断用户的请求处理，返回一个处理失败。</strong></li></ul></li></ul><h3 id="分层过滤">分层过滤</h3><p>仔细考察秒杀的流量特征，比如某个秒杀商品1000 个，秒杀时间为5 分钟，现在有10 万人来抢，2 分钟内商品抢购完毕，那么后面3 分钟其实商品已经无库存了。但是对<strong>后面3 分钟的人发出的请求对于我们系统来说，其实是无效的请求，是没有必要把请求链路全部完成一遍的</strong>，这对资源其实是很大的浪费，所以我们可以在请求链路上层层过滤，把这部分无效请求提前筛选掉。</p><ul><li>Nginx 中，启用了本地缓存</li><li>与之相配合的，商详页中会根据这个返回值提示用户“秒杀商品已无库存，秒杀结束”，并关闭秒杀按钮。</li><li>在服务层，不管是秒杀确认单处理服务还是秒杀订单处理服务都会对库存进行检查<ul><li>作用就是在实际下单和扣减库存前中断用户的请求链路的执行，起到一个层层过滤的作用</li></ul></li></ul><h1>限购</h1><p>对于像秒杀这种大流量、高并发的业务场景，更不适合直接将全部流量打到库存服务，所以这个时候就需要有个系统能够承接大流量，并且只放和商品库存相匹配的请求量到库存服务，而限购就能够承担这样的角色。限购之于库存，就像秒杀之于下单，前者都是后者的过滤网和保护伞。<br>限购的主要功能就是做商品的限制性购买。因为参加秒杀活动的商品都是爆品、稀缺品，所以为了让更多的用户参与进来，并让有限的投放量惠及到更多的人，所以往往会对商品的售卖做限制，一般限制的维度主要包括两方面。<br>商品维度限制：最基本的限制就是<strong>商品活动库存的限制</strong>，即每次参加秒杀活动的商品投放量。如果再细分，还可以支持针对不同地区做投放的场景，比如我只想在北京、上海、广州、深圳这些一线城市投放，那么就只有收货地址是这些城市的用户才能参与抢购，而且各地区库存量是隔离的，互不影响。<br><strong>个人维度限制</strong>：就是以个人维度来做限制，这里不单单指同一用户ID，还会从同一手机号、同一收货地址、同一设备IP 等维度来做限制。比如限制同一手机号每天只能下1 单，每单只能购买1 件，并且一个月内只能购买2 件等。个人维度的限购，体现了秒杀的公平性。<br>有了这些功能支持之后，再做一个热门秒杀活动时，首先会在限购系统中配置活动库存以及各种个人维度的限购策略；<strong>然后在用户提单时，走下限购系统，通过限购的请求，再去做真实库存的扣减，这个时候可以减少到库存服务的量。</strong></p><h1>库存扣减</h1><p>用户成功购买一个商品，对应的库存就要完成相应的扣减。而库存的扣减主要涉及到两个核心操作，**一个是查询商品库存，另一个是在活动库存充足的情况下，做对应数量的扣减。**两个操作拆分开来，都是非常简单的操作，但是在高并发场景下，不好的事情就发生了。</p><p>库存超卖的问题主要是由两个原因引起的，<strong>一个是查询和扣减不是原子操作，另一个是并发引起的请求无序</strong>。</p><h2 id="数据库方案">数据库方案</h2><ul><li>行锁机制<ol><li>查询和扣减放在一个事务中，在查询库存的时候使用<code>for update</code>，事务结束行锁释放。</li><li>通过SQL 语句，比如where 语句的条件，保证库存不会被减到 0 以下</li></ol></li><li>乐观锁<ol><li>每次查询库存的时候，除了库存值还有一个版本号，每次扣减库存时带上这个版本号进行扣减</li><li>扣减失败，则需要重新查询，重新扣减。但会加重数据库的负担</li></ol></li><li>数据库特性<ol><li>直接设置数据库的字段数据为无符号整数</li><li>这样减后库存字段值小于零时会直接执行SQL 语句来报错</li></ol></li></ul><p><strong>数据库方案简单安全，但是其性能比较差</strong>，无法适用于我们秒杀业务场景，在请求量比较小的业务场景下，是可以考虑的</p><h2 id="分布式锁方案">分布式锁方案</h2><p>不管通过哪种方式实现的分布式锁，都是有弊端的。以Redis 的实现来说，仅仅在设置锁的有效期问题上，就让人头大。如果时间太短，那么业务程序还没有执行完，锁就自动释放了，这就失去了锁的作用；而如果时间偏长，一旦在释放锁的过程中出现异常，没能及时地释放，那么所有的业务线程都得阻塞等待直到锁自动失效，这与我们要实现高性能的秒杀系统是相悖的。所以通过分<strong>布式锁的方式可以实现，但不建议使用</strong>。</p><h2 id="高并发的扣减">高并发的扣减</h2><p>当秒杀活动开启，流量洪峰来临时，交易系统压力陡增，具体表现一般会包括CPU 升高，IО 等待变长，请求响应时间TP99 指标变差，整个系统变得越来越不稳定。为了力保核心交易流程，我们需要对非核心的一些服务进行降级，减轻系统负担，这种降级一般是有损的，属于“弃卒保帅”。而秒杀的核心问题，是要解决单个商品的高并发读和高并发写的问题，这是典型的热点数据问题，我们需要有相应的机制，避免热点数据打垮系统。</p><h3 id="降级">降级</h3><p>降级其实和削峰一样，降级解决的也是有限的机器资源和超大的流量需求之间的矛盾。如果你的资源够多，或者你的流量不够大，就不需要对系统进行降级了；只有当资源和流量的矛盾突出时，我们才需要考虑系统的降级。降级一般是有损的，那么必然要有所牺牲，几种常见的降级:</p><ul><li>写服务降级：牺牲数据一致性获取更高的性能；</li><li>读服务降级：故障场景下紧急降级快速止损。</li></ul><h4 id="写服务降级">写服务降级</h4><p>在多数据源（MySQL 和Redis）的场景下，数据一致性一般是很难保证的。除非引入分布式事务，但分布式事务也会带来一些缺点，比如实现复杂、性能问题、可靠性问题等。因此一般在涉及金融资产类对一致性要求高的场景时，我们才会考虑分布式事务。</p><p>在流量不高的时候，我们的写请求可以直接先落入MySQL 数据库，再通过监听数据库的Binlog 变化，把数据更新进Redis 缓存，这种设计，缓存和数据库是最终一致的。通过缓存，我们可以扛更高流量的读操作，但是写操作仍然受制于数据库的磁盘IOPS，一般考虑一个数据库也就能支持3000~5000 TPS 的写操作。</p><p>当流量激增的时候，我们就需要对以上的写路径进行降级，<strong>由同步写数据库降级成同步写缓存、异步写数据库</strong>，利用Redis 强大的OPS 来扛流量，一般单个Redis 分片可达8~10 万的OPS，Redis 集群的OPS 就更高了。</p><p>写请求首先直接写入Redis 缓存，写入成功之后，发出写操作MQ（这一步可以放入另一个线程中操作），就可以返回客户端了。其他应用消费MQ，通过MQ 异步化写数据库。</p><h5 id="商城库存扣减的实现">商城库存扣减的实现</h5><p>这里根本没检查库存是否足够，是会导致超卖的。要知道，秒杀是一种促销活动，为了吸引更多的人气，更多的流量，是“赔本赚吆喝”，<strong>宁可少买，不可超卖！ 少买还可以再做一次“返场”活的，超卖肯定是不行的。</strong><br>要保证不超卖，查询和扣减需要是原子操作，正好Redis 本身就是单线程的，天生就可以支持操作的顺序性，如果我们能在一次Redis 的执行中，同时包含查询和扣减两个命令就行。而且Redis 可以执行Lua 脚本的，并且可以保证脚本中的所有逻辑会在一次执行中按顺序完成。</p><p>我们通过Redis 的高并发写能力，提升了系统性能，带来的牺牲就是缓存数据和数据库数据的一致性问题。为了追求高性能，牺牲一致性在大厂的设计中比较常见，对于异步造成的数据丢失等一致性问题，一般来说还会有定时任务一直在比对，以便最快发现问题，进行修复。</p><h4 id="读服务降级">读服务降级</h4><p>在做高可用系统设计时，要牢记就是微服务自身所依赖的外部中间件服务或者其他RPC 服务，随时都可能发生故障，因此**我们需要建设多级缓存，以便故障时能及时降级止损。**除了Redis 缓存之外，还可以增加MongoDB 或者ES 缓存。当然了，你可以建立多个缓存副本，比如主Redis 缓存外，再建立从Redis 缓存，这些都可以的，不过相应会增加资源成本和代码编写的复杂度。假设当秒杀的Redis 缓存出现故障时，我们就可以通过降级开关，快速将读请求降级到从Redis 缓存、MongoDB 或者ES 上。或者当Redis 和备份缓存同时出现故障时(现实中很少出现同时故障的场景)，我们还是可以通过降级开关将流量切换到数据库上，让数据库暂时承压来完成读请求服务。</p><h4 id="简化系统功能">简化系统功能</h4><p>简化系统功能就是指干掉一些不必要的流程，舍弃非核心功能，秒杀系统要求尽量简单，交互越少，数据越小，链路越短，离用户越近，响应就越快，因此非核心的功能在秒杀场景下都是可以降级的。</p><p>去除了普通商品详情页的很多信息，以加快商详页的显示，节约系统资源。不过，实际运用中，这种非核心功能的有损降级，要视具体的SKU 而定，一般为了降低影响范围，我们只对流量非常高的SKU 进行降级。比如，如果是手机秒杀，一般是不需要降级的，但是像口罩这样的爆品，就需要针对SKU 维度进行非核心功能的降级了。降级开关的怎么设计呢，其实比较简单，核心思路就是通过配置中心，对降级开关进行变更，然后推送到各个微服务实例上。</p><h3 id="热点数据">热点数据</h3><p>一般高并发的常规解决思路是：如果是数据库，可以通过分库分表来应对，如果是Redis，可以增加Redis 集群的分片来解决，而应用层一般是无状态的设计。所以从数据库、Redis '缓存到应用服务，都是可以通过增加机器来水平扩展服务能力，解决高并发的问题。</p><p>这样就能应对秒杀的挑战了吗？其实还不够，<strong>秒杀的核心问题是要解决单个商品的高并发读和高并发写问题</strong>，也就是要处理好热点数据问题。所谓热点数据，是从单个数据被访问的频次角度去看的。单位时间（1s）内，一个数据非常频繁的被访问，就可以称之为热点数据，反之可以归为一般数据或冷数据。那么单位时间内究竟多高的频次才能称为热点数据呢?实际上并没有一个明确的定义，可以根据你自己的系统吞吐能力而定。**热点商品在进行秒杀时，只有这个SKU 是热点，所以再怎么进行分库分表，或者增加Redis 集群的分片数，热点商品SKU 落在的那个分片的能力实际并没有提升，总会触达上限，把 Redis 打挂，最后可能引发缓存击穿、系统雪崩。**那我们应该怎么解决这个棘手的热点问题呢？</p><h4 id="读热点">读热点</h4><ol><li>增加热点数据的副本数;<ul><li><strong>就是增加Redis 从的副本数</strong>，然后业务层（Tomcat 集群）轮询查询不同的副本，提高同一数据的QPS。一般情况下，单个Redis 从，可提供8~10 万的查询，所以如果我们增加12 个副本，就可以提供百万QPS 的热点查询。这个方法能解决热点问题，但成本比较高，如果你的集群分片数比较多，那分片数*副本数就是一笔不小的开销。</li></ul></li><li>让热点数据离用户越近越好。<ul><li>我们把热点数据再上移，<strong>在服务内部做热点数据的本地缓存</strong>，也就是让业务层的每个实例里都有份数据副本，读请求数据的时候，无需去Redis 获取，直接从本地缓存里取。这时候，数据的副本数和服务一样多，另外请求链路减少了一层，而且也减少了对Redis 单片QPS 上限的依赖，具有更高的可靠性和更高的性能。这种方式热点数据的副本数随实例的增加而增加，非常容易扩展，扛高流量。但是本地缓存的数据延迟，业务要能够接受。</li></ul></li><li>直接短路返回<ul><li>某个商品秒杀的时候，这个SKU 是不支持使用优惠券的，那么优惠券系统在处理的时候，可以根据商品SKU 编码，直接返回空的券列表，这样基本上不怎么耗资源，效率非常高。当然了，<strong>这种方式和具体商品的活动方式有关，不具有通用性，但是在几百万的流量面前，简单有效</strong>。</li></ul></li></ol><h4 id="写热点">写热点</h4><p>点击“立即预约”的时候，会往“预约人数”这个Redis key 上进行累加操作，当几百万人同时预约的时候，这个key 就是热点写操作了。这个预约总人数有个特点，只是在前端给用户展示用，除此之外，没有其他用途，因此在并发的场景下，这个人数可以不用那么及时和精确，我们的思路就是<strong>先在JVM 内存里累加，延迟提交到 Redis，这样就可以把 Redis 的OPS 降低几十倍。</strong></p><p>写热点还有一个场景就是库存的扣减，有一种思路，可以通过<strong>把一个热 key拆解成多个key 的方式，避免热点问题</strong>。这种设计针对MySQL 和Redis 缓存都是适用的，但是涉及到对库存进行再细分，以及子库存挪动，非常复杂，而且边界问题比较多，容易出现库存不准的问题，需要谨慎小心的使用这种方法。</p><p>另一个思路就是**对单SKU 的库存直接在Redis 单分片上进行扣减，实际上，扣减库存在秒杀链路的末端，通过我们之前的削峰和限流的各种手段，真正到库存的流量是有限的，单片的Redis OPS 能承受得了。<strong>然后，我们可以</strong>针对单SKU的库存扣减进行单独限流，保证库存单片Redis 的压力。**这样双管齐下，单SKU的库存Redis 扣减压力就是可控的了。</p><h1>防刷</h1><p>秒杀的抢购原则无外乎两种，要么是绝对公平的，即先到的请求先处理，暂时处理不了的，会把你放入到一个等待队列，然后慢慢处理。要么是非公平的，暂时处理不完的请求会立即拒绝，让你回到开始的地方，和大家一起再比谁先到，如此往复，直至商品售完。</p><p>因此黑产的方法也很简单，就是想法设法比别人快，发出的请求比别人多，就像在一个赛道上，给自己制造很多的分身，不仅保证自己比别人快，同时还要把别人挤出赛道，确保自己能够到达终点。黑产对秒杀业务的威胁是巨大的，它不仅破坏了公平的抢购环境，而且给秒杀系统带来了庞大的性能开销，所以我们不能放任黑产流量对系统的肆意冲击，我们必须对抗它。既然黑产流量的特点是比正常流量快且频率高，那么我们也就可以从这两个方面来着手思考对策。</p><p>只针对第一个快的特点，其实在活动开始后，进来的流量我们都无法将其定义为非法流量，这个只能借助像风控这种多维度校验，才能将其识别出来，除非它跳步骤。而第二个高频率的特点，同时也是对秒杀系统造成危害最大的一种，我们还是有很多种手段来应对的。专门针对高频率以及跳步奏的非法手段常见的防刷方案有哪些呢？</p><ul><li>Nginx 有条件限流，是非常简单且直接的一种方式，这种方式可以有效解决黑产流量对单个接口的高频请求，但要想防止刷子不经过前置流程直接提单，还需要引入一个流程编排的Token 机制。</li><li>Token 机制，Token 一般都是用来做鉴权的。放到秒杀的业务场景就是，**对于有先后顺序的接口调用，我们要求进入下个接口之前，要在上个接口获得令牌，**不然就认定为非法请求。同时这种方式也可以防止多端操作对数据的篡改，如果我们在Nginx 层做Token 的生成与校验，可以做到对业务流程主数据的无侵入。比如可以通过header_filter_by_lua_block，在返回的header 里增加流程Token。Token 可以做MD5，加入商品编号、活动开始时间、自定义加密key 等。</li><li>黑名单机制，黑名单机制分为本地黑名单和集群黑名单两种。该机制顾名思义，就是通过黑名单的方式来拦截非法请求的，但我们的核心问题是黑名单从哪里来呢?<ul><li>从外部导入，可以是风控，也可以是别的渠道</li><li>自力更生，自己生成自己用<ul><li>比如前面介绍了Nginx 有条件限流会过滤掉超过阈值的流量，但不能完全拦截，所以索性就不限流，直接全部放进来。然后我们自己实现一套“逮捕机制”，即利用Lua 的共享缓存功能，去<strong>统计1 秒内这个用户或者IP 的请求频率，如果达到了我们设定的阈值，我们就认定其为黑产</strong>，然后将其放入到本地缓存黑名单。黑名单可以被所有接口共享，这样用户一旦被认定为黑产，其针对所有接口的请求，都将直接被全部拦截，实现刷子流量的0 通过。</li><li>本地黑名单机制的优点就是简单、高效。但也正因为基于单机，如果黑产将请求频率控制在1*Nginx 机器数以内，按请求理想散落的情况下，那么就不会被抓到，所以真要想通过频率来严格限制刷子请求，是可以<strong>借助Redis 来实现集群黑名单的</strong>。实现思路和单机的基本一致，就是使用的内存由本地变为了Redis，当然这也必然会影响接口的响应性能。</li></ul></li></ul></li></ul><h1>风控</h1><p>风控在秒杀业务流程中非常重要，但风控的建立却是非常困难的。成熟的风控体系需要建立在大量的数据之上，并且要通过复杂的实际业务场景考验，不断地做智能修正，才能逐步提高风险识别的准确率。风控的建设过程，其实就是一个不断完善用户画像的过程，而用户画像是建立风控的基础。一个用户画像的基础要素包括手机号、设备号、身份、IP、地址等，一些延展的信息还包括信贷记录、购物记录、履信记录、工作信息、社保信息等等。这些数据的收集，仅仅依靠单平台是无法做到的，这也是为什么风控的建立需要多平台、广业务、深覆盖，因为只有这样，才能够尽可能多地拿到用户数据。有了这些数据，所谓的风控，其实就是针对某个用户，在不同的业务场景下，检查用户画像中的某些数据，是否触碰了红线，或者是某几项综合数据，是否触碰了红线。而有了完善的用户画像，黑产用户风控中的判定自然就越准。</p><h1>容灾</h1><p>机房容灾其实不仅仅是秒杀系统需要思考的，重要的软件系统，不管是互联网应用，还是传统应用，比如银行系统等，都需要考虑机房容灾的问题。不同的场景，容灾的设计也不尽相同</p><p>容灾，一般是指搭建多套(两套或以上)相同的系统，当其中一个系统出现故障时，其他系统能快速进行接管，从而持续提供7*24 不间断业务。</p><p>在讨论容灾的时候，经常会听到“同城双活”“异地多活”等术语，它们都是不同的容灾方案，不同的方案，其技术要求、建设成本、运维成本都不一样。在多活架构下，对两套系统之间通信线路质量、时延要求很高，业内主流IT 厂家比较认可的是<strong>单向时延2ms 以内</strong>，超过这个时延，对“多活”的跨机房请求和数据同步的性能影响就会比较大。</p><p>因此，涉及跨城市的多活，当城市距离较大时，比如上海和北京，那么这种物理上的时延很难克服。为了保证数据库的一致性，就需要付出很高的时间成本，往返几个来回时延叠加，RT 就受不了了。所以异地多活单元化的设计其实非常复杂，成本高昂，即便是大厂也不一定能搭建好异地多活。“同城双活”相对就简单一些，同城双活是在同城或相近区域内建立两个机房。同城双机房距离比较近，通信线路质量较好，比较容易实现数据的同步复制，保证高度的数据完整性和数据零丢失。同城两个机房各承担一部分流量，一般入口流量完全随机，内部RPC 调用尽量通过就近路由闭环在同机房，相当于两个机房镜像部署了两个独立集群，同城双活因为物理距离短，机房间的时延是有保证的。数据仍然是单点写到主机房数据库，然后实时同步到另外一个机房，读流量则完全可以做到机房内闭环。双机房间的物理专线也必须是高可用的设计，至少需要两根以上进行互备，这样在专线故障时才有机会绕行避免不可用，这些在大厂里一般是运维团队在保障，我们稍微了解实现原理就可以。</p><h1>总结梳理</h1><p><strong>秒杀隔离: 业务隔离(提报系统)、系统隔离、数据隔离(一主多从)</strong></p><h2 id="页面静态化（Nginx）">页面静态化（Nginx）</h2><ul><li><p><strong>商详页静态化(freemarker)</strong></p></li><li><p>商详页库存获取</p><ul><li><p><strong>直接让Nginx(OpenResty - lua)访问Redis</strong></p></li><li><p><strong>Redis从库和Nginx在部署在同一台服务器</strong></p><ul><li><p>Unix Domain Socket</p></li><li><p>本地Redis宕机时, 回源到微服务中查询主Redis或者数据库</p></li></ul></li></ul></li></ul><h2 id="流量管控">流量管控</h2><ul><li><p>前期（<strong>预约系统</strong>）</p><ul><li><p><strong>固定时段、人数上限（即时熔断）</strong></p></li><li><p><strong>预约关系表：分库分表&amp;历史归档&amp;MQ异步写入</strong></p></li><li><p><strong>预约商品表：Redis一主多从&amp;本地缓存</strong></p></li><li><p><strong>页面预约人数：本地缓存累加，批量写入Redis</strong></p></li></ul></li><li><p>事中（服务平稳处理&amp;节省机器成本）</p><ul><li><p><strong>验证码和问答题（可以独立为一个微服务）</strong></p><ul><li><p><strong>从session 共享角度来说，验证码应该放入Redis</strong></p></li><li><p>Nginx Lua读时:**读从Redis未果则读主Redis；**或休眠后再读</p></li></ul></li><li><p><strong>消息队列</strong></p><ul><li>技巧：<strong>库存为0后在缓存里设置占位符，让后续请求快速失败</strong></li></ul></li></ul></li><li><p><strong>限流（逐级限流，分层过滤 - 令牌桶和漏桶）</strong></p><ul><li><p>Nginx 限流（<strong>HttpLimitzone 和 HttpLimitReqest</strong>）</p><ul><li><strong>1 个IP 1 秒内只能访问 1 次</strong></li></ul></li><li><p>应用/服务层限流</p><ul><li><p><strong>线程池限流（最大连接数）</strong></p></li><li><p><strong>API 限流（QPS - RateLimiter，Sentinel）</strong></p></li></ul></li><li><p>自定义限流</p><ul><li><strong>本地预先存放一批订单ID，通过定时任务刷新</strong></li></ul></li><li><p>分层过滤（秒杀5分钟，前2分钟抢完了，则<strong>后3分钟为无效请求</strong>）</p><ul><li><p><strong>Nginx本地缓存</strong>库存信息（商详页直接返回秒杀结束）</p></li><li><p>服务层：<strong>秒杀确认单和秒杀订单都会进行库存检查</strong></p><ul><li><strong>在实际下单和扣减库存前中断用户的请求链路</strong></li></ul></li></ul></li></ul></li><li><p><strong>限购（用户提单时，通过限购请求，再去做真实库存扣减）</strong></p><ul><li><p><strong>商品维度限制：不同地区的库存不同</strong></p></li><li><p><strong>个人维度限制：手机号、收货地、设备IP</strong></p></li></ul></li></ul><h2 id="库存扣减（先查询库存，再库存扣减）">库存扣减（先查询库存，再库存扣减）</h2><ul><li><p><strong>超卖：查询和扣减不是原子操作；并发引起的请求无序</strong></p></li><li><p>数据库方案（**简单安全，性能较差，**适合请求量较小的场景）</p><ul><li><p>行锁</p><ul><li><p>查询库存的时候使用<code>for update</code></p></li><li><p>where 条件，保证库存不会被减到 0 以下</p></li></ul></li><li><p>乐观锁</p><ul><li><p>查询库存时除了库存值还有版本号</p></li><li><p>每次扣减库存时带上这个版本号进行扣减</p></li><li><p>扣减失败，则需要重新查询，重新扣减（加重数据库的负担）</p></li></ul></li><li><p>将库存字段设为无符号整数（值小于零时直接报错）</p></li></ul></li><li><p>分布式锁方案（可以实现，但不建议）</p><ul><li>锁的有效期问题：时间太长太短都对业务有不利影响</li></ul></li><li><p><strong>高并发扣减方案（<strong>单个商品的高并发读和高并发写问题</strong>）</strong></p><ul><li><p><strong>写服务降级（<strong>牺牲数据一致性获取更高的性能</strong>）</strong></p><ul><li><p><strong>同步写缓存、MQ异步写数据库（定时任务比对）</strong></p></li><li><p><strong>宁可少买，不可超卖，少卖可以做返场（Lua脚本）</strong></p></li></ul></li><li><p><strong>读服务降级（<strong>故障场景下紧急降级快速止损</strong>）</strong></p><ul><li><p><strong>建设多级缓存（Redis, MongoDB, ES, 多副本）</strong></p></li><li><p>缓存全部故障时，切换到 DB 暂抗</p></li></ul></li><li><p><strong>简化系统功能（<strong>舍弃非核心功能</strong>）</strong></p><ul><li><p>交互少，数据小，链路短，离用户近</p></li><li><p><strong>只对流量非常高的SKU进行降级</strong></p></li></ul></li></ul></li></ul><h2 id="热点数据（单商品SKU落在的那个分片上性能总会达到上限）">热点数据（单商品SKU落在的那个分片上性能总会达到上限）</h2><ul><li><p><strong>读热点</strong></p><ul><li><p><strong>增加Redis从副本数</strong></p></li><li><p><strong>在服务内部做热点数据的本地缓存（<strong>但本地缓存有数据延迟</strong>）</strong></p></li><li><p><strong>不支持该活动的SKU直接短路返回</strong>（不通用，和具体商品有关）</p></li></ul></li><li><p><strong>写热点</strong></p><ul><li><p><strong>本地累加，延迟批量提交到Redis</strong></p></li><li><p><strong>一个热 key拆解成多个key（<strong>复杂</strong>）</strong></p></li><li><p><strong>对单SKU的库存直接在Redis单分片上进行扣减，进行单独限流</strong></p><ul><li><strong>扣减库存在秒杀链路的末端，流量有限</strong></li></ul></li></ul></li></ul><h2 id="防刷">防刷</h2><ul><li><p>Nginx限流</p></li><li><p>Token机制：<strong>对于有先后顺序的接口调用，我们要求进入下个接口之前，要在上个接口获得令牌</strong></p></li><li><p>黑名单（本地黑名单和集群黑名单）</p><ul><li><p>从外部导入，可以是风控，也可以是别的渠道</p></li><li><p>自己生成</p><ul><li><p>根据Nginx的流量进行分析，利用Lua共享缓存，**统计1秒内这个用户或者IP的请求频率，**放入本地缓存黑名单，但是如果黑产将请求频率控制在1*Nginx机器数以内，就不会被抓到</p></li><li><p><strong>借助Redis实现集群黑名单（<strong>影响接口响应性能</strong>）</strong></p></li></ul></li></ul></li></ul><h2 id="风控（不断完善用户画像）">风控（不断完善用户画像）</h2><ul><li>需要大量数据和复杂的实际业务场景</li></ul><h2 id="容灾（同城双活，异地多活）">容灾（同城双活，异地多活）</h2><ul><li><p><strong>单向时延2ms以内（物理专线至少两根以上）</strong></p><ul><li>异地多活成本太高，设计复杂</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;秒杀系统的挑战:巨大的瞬时流量、热点数据问题、刷子流量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;将Nginx 的职责放大，前置用来做Web 网关，承担部分业务逻辑校验，并且可能增加黑白名单、限流和流控的功能
&lt;ul&gt;
&lt;li&gt;刷子:无效:正常请求 = 6:1:3</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="秒杀" scheme="https://jxch.github.io/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>11.数据高可用</title>
    <link href="https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/11-shu-ju-gao-ke-yong/"/>
    <id>https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/11-shu-ju-gao-ke-yong/</id>
    <published>2023-07-10T05:59:06.000Z</published>
    <updated>2023-07-11T22:10:36.624Z</updated>
    
    <content type="html"><![CDATA[<p>缓存不命中：把<strong>全量数据</strong>都放在Redis 集群中，处理读请求的时候，只需要读取Redis，而不用访问数据库。很多大型互联网公司都在使用这种方法<br>更新缓存：</p><ul><li>启动一个更新缓存的服务接收数据变更的消息队列中的消息，然后注意解决消息的<strong>可靠性</strong>问题即可，这种方式实现起来很简单，也没有什么侵入性。</li><li>使用 Binlog 实时更新Redis 缓存（Canal）<ul><li>由于在整个缓存更新链路上，减少了一个收发消息队列的环节，从MySQL 更新到Redis 更新的时延变得更短，出现故障的可能性也更低，这也是为什么很多大型互联网企业更青睐于采用这种方案的原因。</li></ul></li></ul><h1>Canal 详解</h1><p><font color="green">它通过模拟MySOL主从复制的交互协议，<strong>把自己伪装成一个MySOL的从节点</strong>，向 MySOL 主节点发送dump 请求。</font>MySOL 收到请求后，就会向 Canal 开始推送Binlog，Canal 解析Binlog 字节流之后，将其转换为便于读取的结构化数据，供下游程序订阅使用。<br>Canal有个服务端，在模拟MySOL从节点获得数据库服务器的数据后，我们可以使用一个包含Canal Client的服务程序获得Canal服务端解析出的数据，也可以通过配置让Canal服务端直接将数据发送给MQ，当然我们的Canal Client 程序经过数据处理后也可以发送给MQ。不管是经过Canal Client程序还是直接发给MQ，接下来还可由第三方的服务或者存储系统进行后续处理。</p><h2 id="配置">配置</h2><ol><li><strong>先开启 Binlog 写入功能，配置binlog-format为ROW模式</strong></li><li><strong>给Canal 设置一个用来复制数据的MySQL账号</strong></li><li><font color="green"><strong>修改canal.properties 文件，比较关键的是canal.destinations</strong></font></li><li><font color="green"><strong>修改instance.properties</strong></font><ol><li><strong>MySQL 主服务的连接配置</strong></li><li><strong>要对哪些相关的业务表进行监视</strong></li></ol></li></ol><h2 id="跨系统实时数据同步">跨系统实时数据同步</h2><p>如果是按照关键字搜索，放在ES 中会比放在MySQL 中更合适。所以在大规模系统中，对于海量数据的处理原则都是根据业务对数据查询的需求反过来确定选择什么数据库、如何组织数据结构、如何分片数据等之类的问题，这样才能获得最优的查询性能。在大型互联网企业中、其核心业务数据，以不同的数据结构和存储方式，保存几十甚至上百份，都是非常正常的。</p><p>当然为了能够支撑下游的众多数据库，从 Canal 出来的Binlog 数据肯定不能直接写入下游的众多数据库中。原因也很明显：一是写不过来；二是下游的每个数据库，在写入之前可能还要处理一些数据转换和过滤的工作。所以一般我们会增加一个<font color="green"><strong>消息队列来解耦上下游</strong></font>。</p><h1>更换数据库</h1><p>既不能长时间停止服务，也不能丢失数据</p><h2 id="不停机更换数据库">不停机更换数据库</h2><p>我们在设计迁移方案的时候，<font color="green"><strong>一定要保证每一步都是可逆的</strong></font>。也就是必须保证，每执行完一个步骤,一旦出现任何问题，都能快速回滚到上一个步骤。</p><ol><li>首先要做的一点是，<font color="green"><strong>把旧库的数据全部复制到新库中</strong></font>。因为旧库还在服务线上业务，所以<strong>不断会有数据写入旧库</strong>，我们不仅要向新库复制数据，<font color="green"><strong>还要保证新旧两个库的数据是实时同步的</strong></font>。所以，需要用一个同步程序来实现新旧两个数据库的实时同步。可以使用Binlog 实现两个异构数据库之间数据的实时同步。<font color="green"><strong>这一步不需要回滚，因为这里只增加了一个新库和一个同步程序</strong></font>，对系统的旧库和程序没有任何改变。<font color="green"><strong>即使新上线的同步程序影响到了旧库，停掉同步程序也就可以了。</strong></font></li><li>改造DAO层<ol><li><font color="green"><strong>支持双写新旧两个库</strong></font>，并且预留<strong>热切换开关</strong>，能通过开关控制三种写状态:只写旧库、只写新库和同步双写</li><li><font color="green"><strong>支持读取新旧两个库</strong></font>，同样预留<strong>热切换开关</strong>，控制读取旧库还是新库</li></ol></li><li><font color="green">然后上线新版服务，这个时候服务仍然是<strong>只读写旧库</strong>，不读写新库。<strong>让新版服务稳定运行至少一到两周的时间</strong></font>，其间我们不仅要验证新版服务的稳定性，还要<font color="green"><strong>验证新旧两个库中的数据是否保持一致</strong></font>。这个过程中，如果新版服务<font color="green"><strong>出现任何问题，都要立即下线新版服务，回滚到旧版本的服务</strong></font>。<ul><li><font color="green"><strong>稳定一段时间之后，就可以开启订单服务的双写开关了</strong>。<strong>开启双写开关的同时，需要停掉同步程序</strong></font>。这里有一个需要特别注意的问题是，这里双写的业务逻辑，一定是<font color="green"><strong>先写旧库，再写新库，并且以旧库的结果为准</strong></font>。</li><li><font color="green"><strong>如果旧库写成功，新库写失败，则返回成功</strong>，但这个时候要记录日志，后续我们会根据这个日志来验证新库是否还有问题。<strong>如果旧库写失败，则直接返回失败</strong>，同时也不再写新库了。<strong>不能让新库影响到现有业务的可用性和数据准确性</strong>。如果<strong>出现任何问题都要关闭双写</strong>,回滚到只读写旧库的状态。</font></li><li>切换到双写之后,新库与旧库的数据可能会出现不一致的问题。<ul><li>停止同步程序和开启双写，这两个过程很难做到无缝衔接</li><li>双写的第略也不能保证新旧库的强一致性。对于这个问题,我们需要上线一个<font color="green"><strong>比对和补偿的程序</strong></font>，用于比对旧库最近的数据变更，然后检查新库中的数据是否一致，如果不一致，则需要进行补偿</li></ul></li><li>开启双写之后，还需要<strong>稳定运行至少几周的时间</strong>，并且在这期间我们需要不断地检查，以确保不能有旧库写成功、新库写失败的问题。如果在几周之后比对程序发现新旧两个库的数据没有不一致的情况，那就可以认为新旧两个库的数据一直都是保持同步的。</li></ul></li><li>接下来就可以用类似<font color="green"><strong>灰度发布的方式把读请求逐步切换到新库上</strong>。同样，运行期间如果<strong>出现任何问题，都要再切回到旧库</strong></font>。</li><li><font color="green">将<strong>全部读请求都切换到新库上之后，其实读写请求已经全部切换到新库上了</strong></font>，虽然实际的切换已经完成,但后续还有需要收尾的步骤。<ul><li><font color="green">**再稳定一段时间之后，就可以停掉比对程序，把订单服务的写状态改为只写新库。至此，旧库就可以下线了。**注意，在整个迁移过程中,<strong>只有这个步骤是不可逆的</strong>。</font>由于这一步的主要操作就是摘掉已经不再使用的旧库，因此对于正在使用的新库并不会有什么影响，实际出问题的可能性已经非常小了。</li><li>双写切换为新库单写这一步不可逆的主要原因是，一旦切换为新库单写，旧库的数据与新库的就不一致了，这种情况是无法再切换回旧库的。所以问题的关键是，切换为新库单写后，需要保证旧库的数据能与新库保持同步。<font color="green">这时双写需要增加一种过渡状态：**从双写以旧库为准过渡到双写以新库为准。然后把比对和补偿程序反过来，用新库的数据补偿旧库的数据。**这样就可以做到一旦出现问题，就直接切回到旧库上。</font>但是这样做一般成本比较高。</li></ul></li><li>至此们完成了在线更换数据库的全部流程。<font color="green">双写版本的服务也完成了它的历史使命，<strong>可以在下一次升级订单服务版本的时候下线双写功能</strong>。</font></li></ol><p><font color="green">数据表的变更，如果只是新增表，这个很简单，一般直接回退到旧版本程序即可；但如果牵涉到<strong>表字段的变化</strong>就麻烦些，但是也可以采用类似的思路，<strong>双写新旧表并设计热切换开关</strong>。</font></p><h2 id="实现比对和补偿程序">实现比对和补偿程序</h2><p>这个比对和补偿程序的实现难点在于，我们要比对的是两个随时都在变化的数据厍中的数据。</p><p>像订单这类时效性比较强的数据，是比较容易进行比对和补偿的。因为订单一旦完成之后，几乎就不会再改变了，比对和补偿程序就可以根据订单完成时间，每次只比对这个时间窗口内完成的订单。补偿的逻辑也很简单，<font color="green"><strong>发现不一致的情况后，直接用旧库的订单数据覆盖新库的订单数据就可以了</strong></font>。<br>这样，切换双写期间，对于少量不一致的订单数据，等到订单完成之后，补偿程序会将其修正。后续在双写的时候只要新库不是频繁写入失败，就可以保证两个库的数据完全一致。<br>比较麻烦的是更一般的情况，比如像商品信息之类的数据，随时都有可能会发生变化。如果数据上带有更新时间,那么比对程序就可以利用这个更新时间，<font color="green"><strong>每次从旧库中读取一个更新时间窗口内的数据，到新库中查找具有相同主键的数据进行比对</strong></font>，如果发现数据不一致，则还要比对一下更新时间。</p><ul><li><font color="green"><strong>如果新库数据的更新时间晚于旧库数据，那么很可能是比对期间数据发生了变化，这种情况暂时不要补偿，放到下个时间窗口继续进行比对即可。</strong></font></li><li><font color="green"><strong>时间窗口的结束时间不要选取当前时间，而是要比当前时间早一点，比如1分钟之前，这样就可以避免比对正在写入的数据了。</strong></font></li></ul><p><strong>如果数据没带时间戳信息，那就只能从旧库中读取Binlog</strong>，获取数据变化信息后到新库中查找对应的数据进行比对和补偿。</p><h1>安全地实现数据备份和恢复</h1><p>一般来说，由存储系统导致的比较严重的损失主要有两种情况。</p><ol><li><strong>数据丢失造成的直接财产损失</strong>。比如订单数据丢失造成了大量的坏账。为了避免这种损失，系统需要保证数据的<strong>高可靠性</strong>。</li><li><strong>存储系统的损坏</strong>，造成整个业务系统停止服务而带来的损失。比如，电商系统停服期间造成的收入损失。为了避免这种损失，系统需要保证存储服务的<strong>高可用性</strong>。</li></ol><p>保证数据安全，最简单且有效的方法就是<strong>定期备份数据</strong>，这样无论因为出现何种问题而导致的数据损失，都可以通过备份来恢复数据。</p><p>最简单的备份方式就是<strong>全量备份</strong>。备份的时候把所有的数据复制一份，存放到文件中，恢复的时候再把文件中的数据复制回去，这样就可以保证恢复之后,数据库中的数据与备份时的数据是完全一样的。在 MySQL 中，我们可以使用mysqldump 命令执行全量备份。</p><p><strong>不过全量备份的代价非常高</strong>：首先备份文件包含了数据库中的所有数据，占用的磁盘空间非常大；其次,每次备份操作都要拷贝大量的数据，备份过程中会占用数据库服务器大量的CPU和磁盘IO 资源、同时为了保证数据一致性，备份过程中很有可能会锁表。这此都会导致在备份期间数据库本身的性能严重下降。所以我们不能频繁地对数据库执行全量备份操作。</p><p>一般来说，在生产系统中每天执行一次全量备份就已经是非常频繁的了。这就意味着，如果数据库中的数据丢失了就只能恢复到最近一次全量备份的那个时间点，这个时间点之后的数据是无法找回的。也就是说，因为全量备份的代价比较高不能频繁地执行备份操作,所以<strong>全量备份不能做到完全无损的恢复</strong>。</p><p>相比于全量备份，<strong>增量备份每次只用备份相对于上一次备份发生了变化的那部分数据，所以增量备份的速度更快。</strong></p><p>MySQL 自带的 Binlog 就是一种实时的增量备份工具。Binlog 所记录的就是MySQL 数据变更的操作日志。开启 Binlog 之后，MySQL 中数据的每次更新操作，都会记录到Binlog 中。Binlog 是可以回放的，回放Binlog，就相当于是把之前对数据库中所有数据的更新操作，都按顺序重新执行一遍，回放完成之后数据自然就恢复了。这就是Binlog 增量备份的基本原理。很多数据库都有类似于MySQL Binlog 的日志工具，原理也与Binlog 相同，备份和恢复的方法也与之类似。<font color="green"><strong>通过定期的全量备份配合 Binlog，我们可以把数据恢复到任意一个时间点</strong></font></p><p>在执行备份和恢复的时候，需要特别注意如下两个要点：</p><ol><li>“<font color="green"><strong>不要把所有的鸡蛋放在同一个篮子中</strong></font>”，无论是全量备份还是Binlog，都不要与数据库存放在同一个服务器上。最好能存放到不同的机房，甚至不同城市离得越远越好。这样即使出现机房着火、光缆被挖断甚至地震也不怕数据丢失。</li><li>在回放 Binlog 的时候，<font color="green"><strong>指定的起始时间可以比全量备份的时间稍微提前一点儿</strong></font>，这样可以确保全量备份之后的所有操作都在恢复的Binlog 范围内，从而保证数据恢复的完整性。<ul><li><font color="green"><strong>为了确保回放的幂等性，需要将Binlog的格式设置为ROW格式</strong></font></li></ul></li></ol><h1>总结梳理</h1><h2 id="Canal：把自己伪装成一个MySOL的从节点">Canal：<strong>把自己伪装成一个MySOL的从节点</strong></h2><ol><li><p><strong>先开启 Binlog 写入功能，配置binlog-format为ROW模式</strong></p></li><li><p><strong>给Canal 设置一个用来复制数据的MySQL账号</strong></p></li><li><p><strong>修改canal.properties 文件，比较关键的是canal.destinations</strong></p></li><li><p><strong>修改instance.properties</strong></p><ol><li><p><strong>MySQL 主服务的连接配置</strong></p></li><li><p><strong>要对哪些相关的业务表进行监视</strong></p></li></ol></li></ol><h2 id="跨系统实时数据同步：息队列来解耦上下游">跨系统实时数据同步：<strong>息队列来解耦上下游</strong></h2><h2 id="不停机更换数据库（保证每一步都是可逆的）">不停机更换数据库（<strong>保证每一步都是可逆的</strong>）</h2><ol><li><p><strong>把旧库的数据全部复制到新库中，保证新旧两个库的数据是实时同步的</strong></p><ul><li><strong>这一步不需要回滚，停掉同步程序就可以了</strong></li></ul></li><li><p>改造DAO：<strong>支持双写和读取新旧两个库，并预留热切换开关</strong></p></li><li><p><strong>只读写旧库，验证新旧两个库中的数据是否保持一致</strong></p></li><li><p><strong>开启双写开关，停掉同步程序</strong></p><ul><li><p><strong>先写旧库，再写新库，并且以旧库的结果为准</strong></p></li><li><p><strong>如果旧库写成功，新库写失败，则返回成功</strong></p></li><li><p><strong>如果旧库写失败，则直接返回失败</strong>，同时也不再写新库了</p></li><li><p><strong>不能让新库影响到现有业务的可用性和数据准确性</strong></p></li><li><p>数据不一致：<strong>比对和补偿的程序</strong></p></li></ul></li><li><p><strong>灰度发布的方式把读请求逐步切换到新库上</strong></p></li><li><p><strong>全部读请求都切换到新库上之后</strong></p><ul><li><p><strong>停掉比对程序，把服务的写状态改为只写新库。至此，旧库就可以下线了（只有这个步骤是不可逆的）</strong></p></li><li><p>过渡状态：<strong>从双写以旧库为准过渡到双写以新库为准。然后把比对和补偿程序反过来，用新库的数据补偿旧库的数据（成本太高）</strong></p></li></ul></li><li><p><strong>在下一次升级服务版本时下线双写功能</strong></p></li></ol><p>关于数据表的变更：</p><ul><li><p>如果只是新增表，直接回退到旧版本程序</p></li><li><p>如果牵涉到<strong>表字段的变化</strong>，<strong>双写新旧表并设计热切换开关</strong>。</p></li></ul><h2 id="比对和补偿程序">比对和补偿程序</h2><ol><li><p><strong>发现不一致的情况后，直接用旧库的订单数据覆盖新库的订单数据就可以了</strong></p></li><li><p><strong>每次从旧库中读取一个更新时间窗口内的数据，到新库中查找具有相同主键的数据进行比对</strong></p><ol><li><p><strong>如果新库数据的更新时间晚于旧库数据，那么很可能是比对期间数据发生了变化，这种情况暂时不要补偿，放到下个时间窗口继续进行比对即可。</strong></p></li><li><p><strong>时间窗口的结束时间不要选取当前时间，而是要比当前时间早一点，比如1分钟之前，这样就可以避免比对正在写入的数据了。</strong></p></li></ol></li></ol><p><strong>如果数据没带时间戳信息，那就只能从旧库中读取Binlog</strong></p><h2 id="数据备份和恢复：通过定期的全量备份配合-Binlog，我们可以把数据恢复到任意一个时间点">数据备份和恢复：<strong>通过定期的全量备份配合 Binlog，我们可以把数据恢复到任意一个时间点</strong></h2><ol><li><p><strong>不要把所有的鸡蛋放在同一个篮子中</strong></p></li><li><p><strong>指定的起始时间可以比全量备份的时间稍微提前一点儿</strong></p><ul><li><strong>为了确保回放的幂等性，需要将Binlog的格式设置为ROW格式</strong></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;缓存不命中：把&lt;strong&gt;全量数据&lt;/strong&gt;都放在Redis 集群中，处理读请求的时候，只需要读取Redis，而不用访问数据库。很多大型互联网公司都在使用这种方法&lt;br&gt;
更新缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动一个更新缓存的服务接收数据变更的消息队列中的消息</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="缓存" scheme="https://jxch.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>10.高并发缓存</title>
    <link href="https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/10-gao-bing-fa-huan-cun/"/>
    <id>https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/10-gao-bing-fa-huan-cun/</id>
    <published>2023-07-10T00:35:31.000Z</published>
    <updated>2023-07-11T22:11:05.660Z</updated>
    
    <content type="html"><![CDATA[<p>缓存大体可以分为三类: 客户端缓存；服务端缓存；网络中的缓存。<br>根据规模和部署方式缓存也可以分为:单体缓存；缓存集群；分布式缓存。</p><p><strong>缓存一定是离用户越近越好</strong></p><p>缓存的分类：</p><ul><li>客户端缓存</li><li>页面缓存</li><li>浏览器缓存</li><li>APP缓存</li><li>网络缓存</li><li>Web代理缓存（Nginx）</li><li>边缘缓存（CDN）</li><li>服务端缓存</li><li>数据库缓存（innodb_buffer_pool_size）</li><li>应用级缓存（Caffeine，Ehcache）<ul><li>缓存预热</li></ul></li><li>平台级缓存（Redis）</li></ul><h1>缓存的数据一致性</h1><p>缓存更新方案：</p><ol><li>先更新缓存，再更新数据库（一般不考虑）<ul><li>更新缓存成功，更新数据库出现异常了，导致缓存数据与数据库数据完全不一致，而且很难察觉，因为缓存中的数据一直都存在。</li></ul></li><li>先更新数据库，再更新缓存（一般不考虑）<ul><li>原因跟第一个一样，数据库更新成功了，缓存更新失败，同样会出现数据不一致问题。</li></ul></li><li>先删除缓存，后更新数据库（不建议）<ul><li>A进程删除缓存后，还没来得及更新数据库，就被B进程查询数据库（缓存为空）后再次更新了缓存（相当于没删）<ul><li>解决方案：延时双删（删缓存 - 写数据库 - 休眠1s再删缓存）</li></ul></li><li>A进程删除缓存、写数据库后，主从同步时，被B从从库查数据（缓存为空，从库复制还未完成），再次更新了缓存（相当于没删）<ul><li>解决方案：1. 延时双删；2. 更新redis的查询操作，指向主库查询</li></ul></li><li>异步双删，增加吞吐量</li><li>不推荐的原因：1. 缓存穿透到DB；2. 休眠时间不好设置</li></ul></li><li><font color="green"><strong>先更新数据库，后删除缓存</strong></font><ul><li>依然有并发问题：进程A查询数据库（缓存为空）后写入缓存前，被进程B更新了数据库，导致缓存与DB不一致<ul><li>概率极低，因为需要让进程B写数据库的操作耗时比进程读数据库还短，而读库操作一般比写库要快</li><li>解决方案：1. 设置缓存失效时间；2. 异步延时删除；3. <font color="green"><strong>使用Canal监听binlog日志，更新缓存</strong></font></li></ul></li></ul></li></ol><p>删除缓存失败的解决方案：</p><ol><li>使用MQ再次删除</li><li>使用canal采集binlog日志，发送到MQ中，然后通过ACK机制确认处理删除缓存</li></ol><h2 id="缓存更新的设计模式">缓存更新的设计模式</h2><ul><li>Cache Aside （最常用，因为强一致的实现性能往往较差）：缓存失效时由调用方加载（上面的第四种方案）</li><li>Read/Write Through：把更新数据库操作由缓存自己代理了</li><li>Read Through：缓存失效时由用缓存服务自己来加载</li><li>Write Through：当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由Cache自己更新数据库。</li><li>Write Behind Caching：，在更新数据的时候，只更新缓存，不更新数据库，而我们的缓存会异步地批量更新数据库<ul><li>数据不是强一致性的，而且可能会丢失</li><li>实现复杂</li></ul></li></ul><h2 id="缓存数据一致性">缓存数据一致性</h2><ol><li>本地缓存<ul><li>设置失效时间（毛刺现象）</li><li><font color="green"><strong>设置双缓存</strong></font><ul><li>只有两份本地缓存都没有，才会到远程获得。</li><li>正式缓存是最后一次写入后经过固定时间过期</li><li>备份缓存是设置最后一次访问后经过固定时间过期</li><li>异步刷新：正式缓存只有无效才会被重新写入，备份缓存无论是否无效都会重新写入</li></ul></li><li>强制本地缓存失效和手动刷新本地缓存（CacheManagerController）</li></ul></li><li>Redis使用canal更新缓存</li></ol><h1>Redis集群</h1><h2 id="Redis-Cluster">Redis Cluster</h2><p>每个集群的槽数都是固定的16 384(即16×1024)个，客户端可以连接集群的任意一个节点来访问集群的数据，如果数据不在当前这个节点上，那就向客户端返回一个重定向的命令。支持主从复制（内部通过选举来确定有主节点的存活），支持读写分离（需要客户端的支持）。</p><h2 id="大厂不用Redis-Cluster构建集群">大厂不用Redis Cluster构建集群</h2><p>Redis Cluster 采用了一种去中心化的流言（Gossip）协议来传播集群配置的变化。传播速度比较慢，而且是集群规模越大，传播的速度就越慢。</p><p>比如说10个节点的状态信息约1kb。同时redis集群内节点，每秒都在发ping消息。在这种情况下，一个总节点数为200的Redis集群，默认情况下，这时ping/pong消息占用带宽达到25M，这还只是槽的范围是0 ～16383 的情况。其次redis 的集群主节点越多，心跳包的消息体内携带的数据越多。如果节点过1000 个，也会导致<strong>网络拥堵</strong>。因此redis 作者，不建议redis cluster 节点数量超过<strong>1000个</strong>。</p><h3 id="构建超大规模集群">构建超大规模集群</h3><h4 id="代理">代理</h4><p>比较常用的方法是采用一种基于代理的方式，即在客户端和Redis 节点之间</p><ol><li>负责在客户端和Redis 节点之间转发请求和响应。客户端只与代理服务打交道，代理收到客户端的请求之后，会转发到对应的Redis 节点上，节点返回的响应再经由代理转发返回给客户端。</li><li>负责监控集群中所有Redis 节点的状态，如果发现存在问题节点，就及时进行主从切换。</li><li>维护集群的元数据，这个元数据主要是集群所有节点的主从信息,以及槽和节点的关系映射表。像开源的Redis 集群方案twemproxy 和 Codis，采用的都是代理服务这种架构。</li></ol><p>优点：对客户端透明,从客户端的视角来看,整个集群就像是一个超大容量的单节点Redis 一样。除此之外,由于分片算法是受代理服务控制的，因此扩容比较方便，新节点加入集群后，直接修改代理服务中的元数据就可以完成扩容。</p><p>缺点：由于增加了一层代理转发，因此每次数据访问的链路变得更长了，这必然会导致一定的性能损失。而且代理服务本身也是集群的单点。当然，我们可以把代理服务也做成一个集群来解决单点问题，那样集群就更复杂了。</p><h4 id="客户端">客户端</h4><p><font color="green"><strong>把代理服务的寻址功能前移到客户端中。</strong></font>客户端在发起请求之前,首先会查询元数据，客户端可以自行缓存元数据，这样访问性能基本上就与单机版的Redis 一样了。如果某个分片的主节点宕机了，就会选举新的主节点，并更新元数据中的信息。对集样的扩容操作也比较简单，除了必须完成数据的迁移工作之外，再更新一下元数据就可以了。</p><p>当然元数据服务仍然是一个单点，但是它的数据量不大，访问量也不大，相对来说比较容易实现。利用已有的ZooKeeper、etcd 甚至MySQL 都可以被用来实现上述元数据服务。定制客户端的Redis 集群方案应该是最适合超大规模Redis 集群的方案，在性能、弹性、高可用等几个方面的表现都非常好，缺点是整个架构比较复杂，客户端不能通用，需要开发定制化的Redis 客户端，所以往往只有规模足够大的企业才能负担得起高昂的定制开发成本。</p><h1>总结梳理</h1><p><strong>缓存一定是离用户越近越好</strong></p><h2 id="Redis数据一致性">Redis数据一致性</h2><ul><li><p>先更新缓存，再更新数据库（更新DB异常）</p></li><li><p>先更新数据库，再更新缓存（更新缓存失败）</p></li><li><p>先删除缓存，后更新数据库（更新DB之前被其他进程更新了缓存）</p><ul><li><p>主从复制问题：更新缓存的查询指定为主库</p></li><li><p>异步延时双删</p></li></ul></li><li><p><strong>先更新数据库，后删除缓存（写入缓存之前被其他进程更新了DB）</strong></p><ul><li><p>低概率：要求写库操作快于读库</p></li><li><p>异步延时双删</p></li></ul></li><li><p><strong>使用Canal监听binlog日志，更新缓存</strong></p></li></ul><p><strong>本地缓存</strong></p><ul><li><p><strong>设置双缓存</strong></p></li><li><p>正式缓存是最后一次写入后经过固定时间过期</p></li><li><p>备份缓存是设置最后一次访问后经过固定时间过期</p></li><li><p>异步刷新：正式缓存只有无效才会被重新写入，备份缓存无论是否无效都会重新写入</p></li><li><p>缓存预热</p></li></ul><h2 id="大厂不用Redis-Cluster构建集群-2">大厂不用Redis Cluster构建集群</h2><ul><li><p>代理</p></li><li><p><strong>把代理服务的寻址功能前移到客户端中</strong></p><ul><li>ZooKeeper保存元数据</li></ul></li></ul><h2 id="设计模式">设计模式</h2><p>Cache Aside、Read/Write Through、Read Through、Write Through、Write Behind Caching</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;缓存大体可以分为三类: 客户端缓存；服务端缓存；网络中的缓存。&lt;br&gt;
根据规模和部署方式缓存也可以分为:单体缓存；缓存集群；分布式缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存一定是离用户越近越好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;缓存的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="缓存" scheme="https://jxch.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>09.分布式事务</title>
    <link href="https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/09-fen-bu-shi-shi-wu/"/>
    <id>https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/09-fen-bu-shi-shi-wu/</id>
    <published>2023-07-09T23:15:43.000Z</published>
    <updated>2023-07-11T22:17:51.687Z</updated>
    
    <content type="html"><![CDATA[<h1>Seata架构</h1><ul><li>TC&nbsp;(Transaction&nbsp;Coordinator)&nbsp;-&nbsp;事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM&nbsp;(Transaction&nbsp;Manager)&nbsp;-&nbsp;事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM&nbsp;(Resource&nbsp;Manager)&nbsp;-&nbsp;资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p>其中，TC&nbsp;为单独部署的&nbsp;Server&nbsp;服务端，TM&nbsp;和&nbsp;RM&nbsp;为嵌入到应用中的&nbsp;Client&nbsp;客户端。</p><p>一个分布式事务的生命周期：<br>1.&nbsp;TM&nbsp;请求&nbsp;TC&nbsp;开启一个全局事务。TC&nbsp;会生成一个&nbsp;XID&nbsp;作为该全局事务的编号。XID会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。<br>2.&nbsp;RM&nbsp;请求&nbsp;TC&nbsp;将本地事务注册为全局事务的分支事务，通过全局事务的&nbsp;XID&nbsp;进行关联。<br>3.&nbsp;TM&nbsp;请求&nbsp;TC&nbsp;告诉&nbsp;XID&nbsp;对应的全局事务是进行提交还是回滚。<br>4.&nbsp;TC&nbsp;驱动&nbsp;RM&nbsp;们将&nbsp;XID&nbsp;对应的自己的本地事务进行提交还是回滚。</p><h2 id="分库分表全局事务（ShardingSphere）">分库分表全局事务（ShardingSphere）</h2><p>不能简单的在全局事务发起方使用 <code>@GlobalTransactional</code>，因为seata找不到逻辑表对应的物理表，需要融入&nbsp;Apache&nbsp;ShardingSphere&nbsp;分布式事务</p><p>整合&nbsp;Seata&nbsp;AT&nbsp;事务时，需要将&nbsp;TM，RM&nbsp;和&nbsp;TC&nbsp;的模型融入&nbsp;Apache&nbsp;ShardingSphere&nbsp;的分布式事务生态中。&nbsp;在数据库资源上，Seata&nbsp;通过对接&nbsp;DataSource&nbsp;接口，让&nbsp;JDBC&nbsp;操作可以同&nbsp;TC&nbsp;进行远程通信。&nbsp;同样，Apache&nbsp;ShardingSphere&nbsp;也是面向&nbsp;DataSource&nbsp;接口，对用户配置的数据源进行聚合。&nbsp;因此，将&nbsp;DataSource&nbsp;封装为&nbsp;基于Seata&nbsp;的&nbsp;DataSource&nbsp;后，就可以将&nbsp;Seata&nbsp;AT&nbsp;事务融入到&nbsp;Apache&nbsp;ShardingSphere的分片生态中。</p><ol><li>引入依赖</li><li>配置seata.conf <pre class="line-numbers language-config" data-language="config"><code class="language-config">client&nbsp;{    application.id&nbsp;=&nbsp;tulingmall‐order‐curr    transaction.service.group&nbsp;=&nbsp;tuling‐order‐group}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>开启全局事务配置:<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// GlobalTransactional和ShardingTransactionType不能同时出现</span> <span class="token annotation punctuation">@ShardingTransactionType</span><span class="token punctuation">(</span><span class="token class-name">TransactionType</span><span class="token punctuation">.</span><span class="token constant">BASE</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Transactional</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>关闭Seata数据源自动代理<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>    <span class="token key atrule">enable‐auto‐data‐source‐proxy</span><span class="token punctuation">:</span> false <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1>柔性事务：可靠消息最终一致性</h1><h2 id="本地消息表方案">本地消息表方案</h2><ol><li>定时任务扫描日志<ul><li>启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。</li></ul></li><li>消费消息（幂等控制）<ul><li>可以使用MQ的ack（即消息确认）机制，消费者监听MQ，如果消费者接收到消息并且业务处理完成后向MQ发送ack（即消息确认），此时说明消费者正常消费消息完成，MQ将不再向消费者推送消息，否则消费者会不断重试向消费者来发送消息。</li><li>由于消息会重复投递，需要实现幂等性。</li></ul></li></ol><h2 id="Rocketmq事务消息">Rocketmq事务消息</h2><p>RocketMQ事务消息设计则主要是为了<strong>解决Producer端的消息发送与本地事务执行的原子性问题</strong>，RocketMQ的设计中broker与producer端的双向通信能力，使得broker天生可以作为一个事务协调者存在；而RocketMQ本身提供的存储机制为事务消息提供了持久化能力；RocketMQ的高可用机制以及可靠消息设计则为事务消息在系统发生异常时依然能够保证达成事务的最终一致性。在RocketMQ&nbsp;4.3后实现了完整的事务消息，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，解决Producer端的消息发送与本地事务执行的原子性问题。</p><ol><li>Producer发送事务消息<ul><li>Producer（MQ发送方）发送事务消息至MQ&nbsp;Server，MQ&nbsp;Server将消息状态标记为Prepared（预览状态），注意此时这条消息消费者（MQ订阅方）是无法消费到的。</li></ul></li><li>MQ&nbsp;Server回应消息发送成功<ul><li>MQ&nbsp;Server接收到Producer发送的消息则回应发送成功表示MQ已接收到消息。</li></ul></li><li>Producer执行本地事务</li><li>消息投递<ul><li>若Producer本地事务执行成功则自动向MQ&nbsp;Server发送commit消息</li><li>MQ&nbsp;Server接收到commit消息后将“该消息”状态标记为可消费，此时MQ订阅方即正常消费消息；</li><li>若Producer&nbsp;本地事务执行失败则自动向MQ&nbsp;Server发送rollback消息，MQ&nbsp;Server接收到rollback消息后将删除“该消息”。</li><li>MQ订阅方消费消息，消费成功则向MQ回应ack，否则将重复接收消息。这里ack默认自动回应，即程序执行正常则自动回应ack。</li></ul></li><li>事务回查<ul><li>如果执行Producer端本地事务过程中，执行端挂掉，或者超时，MQ&nbsp;Server将会不停的询问同组的其他Producer来获取事务执行状态，这个过程叫事务回查。MQ&nbsp;Server会根据事务回查结果来决定是否投递消息。</li></ul></li></ol><p>对用户则来说，用户需要分别实现本地事务执行以及本地事务回查方法（<code>RocketMQLocalTransactionListener</code>），因此只需关注本地事务的执行状态即可。</p><h1>总结梳理</h1><h2 id="Seata架构：TC、TM、RM">Seata架构：TC、TM、RM</h2><p>1.&nbsp;TM&nbsp;请求&nbsp;TC&nbsp;开启一个全局事务。TC&nbsp;会生成一个&nbsp;XID&nbsp;作为该全局事务的编号。XID会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。<br>2.&nbsp;RM&nbsp;请求&nbsp;TC&nbsp;将本地事务注册为全局事务的分支事务，通过全局事务的&nbsp;XID&nbsp;进行关联。<br>3.&nbsp;TM&nbsp;请求&nbsp;TC&nbsp;告诉&nbsp;XID&nbsp;对应的全局事务是进行提交还是回滚。<br>4.&nbsp;TC&nbsp;驱动&nbsp;RM&nbsp;们将&nbsp;XID&nbsp;对应的自己的本地事务进行提交还是回滚。</p><h2 id="分库分表全局事务（ShardingSphere）-2">分库分表全局事务（ShardingSphere）</h2><ol><li><p><strong>配置seata.conf</strong></p><ul><li><pre><code>  client&nbsp;{   &nbsp; &nbsp;application.id&nbsp;=&nbsp;tulingmall‐order‐curr   &nbsp; &nbsp;transaction.service.group&nbsp;=&nbsp;tuling‐order‐group  }</code></pre></li></ul></li><li><p><strong>开启全局事务配置</strong></p><ul><li><p>@ShardingTransactionType(TransactionType.BASE)</p></li><li><p>@Transactional</p></li></ul></li><li><p><strong>关闭Seata数据源自动代理</strong></p><ul><li>seata.enable‐auto‐data‐source‐proxy=false</li></ul></li></ol><h2 id="柔性事务：可靠消息最终一致性">柔性事务：可靠消息最终一致性</h2><h2 id="本地消息表方案-2">本地消息表方案</h2><ol><li><p><strong>定时任务扫描日志</strong></p><ul><li>启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。</li></ul></li><li><p><strong>消费消息（幂等控制）</strong></p><ul><li>使用MQ的ack（即消息确认）机制，消费者监听MQ，如果消费者接收到消息并且业务处理完成后向MQ发送ack（即消息确认），此时说明消费者正常消费消息完成，MQ将不再向消费者推送消息，否则消费者会不断重试向消费者来发送消息。</li></ul></li></ol><h2 id="Rocketmq事务消息-2">Rocketmq事务消息</h2><p>解决Producer端的<strong>消息发送与本地事务执行的原子性</strong>问题</p><ol><li><p>Producer发送事务消息</p><ul><li>Producer（MQ发送方）发送事务消息至MQ&nbsp;Server，MQ&nbsp;Server将消息状态标记为Prepared（预览状态），注意此时这条消息消费者（MQ订阅方）是无法消费到的。</li></ul></li><li><p>MQ&nbsp;Server回应消息发送成功</p><ul><li>MQ&nbsp;Server接收到Producer发送的消息则回应发送成功表示MQ已接收到消息。</li></ul></li><li><p>Producer执行本地事务</p></li><li><p>消息投递</p><ul><li><p>若Producer本地事务执行成功则自动向MQ&nbsp;Server发送commit消息</p></li><li><p>MQ&nbsp;Server接收到commit消息后将“该消息”状态标记为可消费，此时MQ订阅方即正常消费消息；</p></li><li><p>若Producer&nbsp;本地事务执行失败则自动向MQ&nbsp;Server发送rollback消息，MQ&nbsp;Server接收到rollback消息后将删除“该消息”。</p></li><li><p>MQ订阅方消费消息，消费成功则向MQ回应ack，否则将重复接收消息。这里ack默认自动回应，即程序执行正常则自动回应ack。</p></li></ul></li><li><p>事务回查</p><ul><li>如果执行Producer端本地事务过程中，执行端挂掉，或者超时，MQ&nbsp;Server将会不停的询问同组的其他Producer来获取事务执行状态，这个过程叫事务回查。MQ&nbsp;Server会根据事务回查结果来决定是否投递消息。</li></ul></li><li><p><strong>需要分别实现本地事务执行以及本地事务回查方法</strong></p><ul><li><code>RocketMQLocalTransactionListener</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Seata架构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;TC&amp;nbsp;(Transaction&amp;nbsp;Coordinator)&amp;nbsp;-&amp;nbsp;事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。&lt;/li&gt;
&lt;li&gt;TM&amp;nbsp;(Transaction&amp;n</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式事务" scheme="https://jxch.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>08.支付超时</title>
    <link href="https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/08-zhi-fu-chao-shi/"/>
    <id>https://jxch.github.io/2023/07/10/architect/06.dian-shang-xi-tong/08-zhi-fu-chao-shi/</id>
    <published>2023-07-09T21:19:18.000Z</published>
    <updated>2023-07-11T22:17:10.175Z</updated>
    
    <content type="html"><![CDATA[<h1>延迟任务（不推荐）</h1><ol><li>下单时增加一个定时任务，在五分钟后对订单进行超时判断。</li><li>超时判断时，可以先去支付宝上查询订单支付状态。</li></ol><p>如果已支付，则判断订单是否正常结束，这是因为在用户完成扫码支付后，支付宝正常会往图灵电商发送支付成功的通知。但是这个通知是没有事务保证的，所以是非常有可能失败的，这时就需要在订单超时判断时对状态进行对齐。<br>如果未支付，则需要释放库存，取消本地订单，然后通知支付宝取消支付订单。</p><p><strong>五分钟时间太长了，而支付宝的通知又没有事务保证</strong>，通常企业中的做法并不会等到订单超时时才去查询订单状态，而是<strong>在后台会多次频繁查询支付宝支付状态</strong>，这样可以更及时的获得支付结果。例如五分钟超时时间，至少需要半分钟或者一分钟去查一次支付宝订单状态，如果支付成功了，就及时结束后续等待处理过程。如果没有完成支付，就再开启下一个定时任务，等待下次检查。</p><h1>RocketMQ事务消息（推荐）</h1><p>RocketMQ事务消息机制的核心是对消息状态进行不断的确认。循环确认的过程就正好可以用来改造，解决上面说的频繁任务调度的问题。这样就可以专注于开发业务逻辑，而不用关注频繁复杂的任务调度逻辑。</p><ol><li>支付宝预下单时发送事务消息：通知下游服务进行订单取消</li><li>发送消息后，会先执行本地事务。<ul><li>将订单ID放到Redis中，这样可以在后续进行支付状态检查时，快速找到对应的业务信息。</li><li>只要下单成功，就会返回<code>UNKOWN</code>状态，这样RocketMQ会在之后进行状态回查（检查支付宝支付状态）。</li></ul></li><li>然后在事务状态回查时<ul><li>会自行记录回查次数，超过最大次数就直接取消订单（<code>transactionCheckInterval</code>，默认回查15次，间隔60s，超过<code>ROLLBACK</code>）<ul><li>如果没有超过最大次数，就可以去支付宝中查询订单支付状态。<ul><li>如果已经支付完成，则返回<code>ROLLBACK</code>状态，消息取消，后续就不会再进行本地订单取消了。</li><li>如果未支付，则记录回查次数后，返回<code>UNKNOWN</code>状态，等待下次回查。</li></ul></li></ul></li></ul></li><li>如果订单已经超时（事务消息成功发送出去了）<ul><li>下游的消费者就会完成取消本地订单，释放库存等操作。</li></ul></li><li>如果本地订单已经取消，而支付宝支付状态已经成功，则退款</li></ol><h2 id="通过聚合支付进行分布式事务控制">通过聚合支付进行分布式事务控制</h2><p>如果在对接过程中，直接使用支付宝的二维码通知用户进行当面支付。而用户使用支付宝扫码支付的过程，电商都是完全不知道的，也就没有办法对用户的支付动作进行控制。比如如果电商本地的订单已经超时，就要阻止用户进行扫码支付。可以在支付宝的回调接口判断订单状态，如果订单式已关闭，则发起订单回退。这样显然效率是不高的。</p><p>在很多电商项目中，会采用聚合支付的方式，统一对接多个第三方支付方。用户的支付动作就不是直接与支付宝这样的第三方支付公司交互完成，而是要经过电商后台转发请求完成。这时，就可以通过添加一些分布式锁机制，保证整个支付业务是串行执行的，以<strong>防止在电商进行订单超时回退后，用户再次扫码支付</strong>。</p><h2 id="正向通知与反向通知">正向通知与反向通知</h2><p>当前是通过事务消息通知下游服务订单取消，这其实就是一种反向通知的方式。但是其实最直观的方式还是使用正向通知，即通过事务消息通知下游服务进行订单支付确认，这样这个下单的消息就容易扩展更多的下游消费者。订单下单确认是用户完成支付后，支付宝发起的通知来确认的。这时，如果<strong>订单确认的下游服务实现了幂等控制</strong>，就完全可以将事务消息机制改为正向通知。即在事务消息回查过程中，确认用户已经完成了支付，就发送消息通知下游服务订单支付成功。这样也可以防止支付宝通知丢失造成的订单状态缺失。</p><p>而用户订单超时判断，则可以在事务消息的状态回查过程中，通过记录回查次数判断。如果已经超时，则返回Rollback。同时启动另外一个消息生产者，往下游服务发送一个订单取消的消息，这样也是可以的。</p><h2 id="兜底补偿机制">兜底补偿机制</h2><p>对于订单超时后的回退处理，不光通过RocketMQ的事务消息进行了通知，另外也部署<strong>定时任务</strong>，批量回退超时的订单。<br>这其实就是一种事务消息的兜底补偿机制，以处理那些事务消息机制有可能漏处理的超时订单。在设计金融相关业务时，这种兜底策略会显得尤为重要。</p><h1>总结梳理</h1><h2 id="延迟任务（不推荐）">延迟任务（不推荐）</h2><h2 id="RocketMQ事务消息（反向通知）">RocketMQ事务消息（反向通知）</h2><ol><li><p>支付宝预下单时发送事务消息：通知下游服务进行订单取消</p></li><li><p>发送消息后，会先执行本地事务。</p><ul><li><p>将订单ID放到Redis中，这样可以在后续进行支付状态检查时，快速找到对应的业务信息。</p></li><li><p>只要下单成功，就会返回<code>UNKOWN</code>状态，这样RocketMQ会在之后进行状态回查（检查支付宝支付状态）。</p></li></ul></li><li><p>然后在事务状态回查时</p><ul><li><p>会自行记录回查次数，超过最大次数就直接取消订单（<code>transactionCheckInterval</code>，默认回查15次，间隔60s，超过<code>ROLLBACK</code>）</p><ul><li><p>如果没有超过最大次数，就可以去支付宝中查询订单支付状态。</p><ul><li><p>如果已经支付完成，则返回<code>ROLLBACK</code>状态，消息取消，后续就不会再进行本地订单取消了。</p></li><li><p>如果未支付，则记录回查次数后，返回<code>UNKNOWN</code>状态，等待下次回查。</p></li></ul></li></ul></li></ul></li><li><p>如果订单已经超时（事务消息成功发送出去了）</p><ul><li>下游的消费者就会完成取消本地订单，释放库存等操作。</li></ul></li><li><p>如果本地订单已经取消，而支付宝支付状态已经成功，则退款</p></li></ol><h2 id="聚合支付平台（分布式锁）-防止在电商进行订单超时回退后，用户再次扫码支付">聚合支付平台（分布式锁）: <strong>防止在电商进行订单超时回退后，用户再次扫码支付</strong></h2><h2 id="正向通知-需要订单确认的下游服务实现幂等控制">正向通知: 需要<strong>订单确认的下游服务实现幂等控制</strong></h2><h2 id="兜底补偿机制：定时任务批量回退超时的订单">兜底补偿机制：<strong>定时任务</strong>批量回退超时的订单</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;延迟任务（不推荐）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;下单时增加一个定时任务，在五分钟后对订单进行超时判断。&lt;/li&gt;
&lt;li&gt;超时判断时，可以先去支付宝上查询订单支付状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果已支付，则判断订单是否正常结束，这是因为在用户完成扫码支付后，支付宝正</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="支付超时" scheme="https://jxch.github.io/tags/%E6%94%AF%E4%BB%98%E8%B6%85%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>07.订单系统设计</title>
    <link href="https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/07-ding-dan-xi-tong-she-ji/"/>
    <id>https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/07-ding-dan-xi-tong-she-ji/</id>
    <published>2023-07-08T21:57:56.000Z</published>
    <updated>2023-07-11T22:16:32.792Z</updated>
    
    <content type="html"><![CDATA[<h1>重复下单问题（幂等）</h1><ol><li>用户在点击“提交订单”的按钮时，不小心点了两下</li><li>网络错误也有可能会导致重传，很多RPC框架和网关都拥有自动重试机制</li></ol><h2 id="font-color-green-主键唯一约束-font"><font color="green">主键唯一约束</font></h2><p>为订单系统增加一个“生成订单号”的服务,这个服务没有参数,返回值就是一个新的、全局唯一的订单号。在用户进入创建订单的页面时，<font color="green"><strong>前端页面会先调用这个生成订单号的服务得到一个订单号，在用户提交订单的时候，在创建订单的请求中带着这个订单号。</strong></font>这个订单号就是订单表的主键，这样，无论是用户原因,还是网络原因等各种情况导致的重试,这些重复请求中的订单号都是相同的。订单服务在订单表中插入数据的时候，<strong>这些重复的INSERT语句中的主键，都是同一个订单号</strong>。数据库的主键唯一约束特性就可以保证，只有一次INSERT 语句的执行是成功的,这样就实现了创建订单服务的幂等性。</p><p>还有一点需要注意的是，在具体实现时，如果是因为重复订单导致插入订单表的语句失败，那么订单服务就不要再把这个错误返回给前端页面了。否则，就有可能会出现用户点击创建订单按钮后，页面提示创建订单失败，而实际上订单已经创建成功了。正确的做法是,遇到这种情况,订单服务直接返回“订单创建成功”的响应即可。要做到这一点，可以捕获 <code>java.sql.SQLIntegrityConstraintViolationException</code> 或者 <code>org.springframework.dao.DuplicateKeyException</code> 来实现。</p><h1>订单ABA问题（幂等）</h1><p>比如连续两次更新订单信息，第一次的更新由于网络问题发生重试，又覆盖了第二次的更新，导致ABA问题</p><h2 id="font-color-green-版本戳-font"><font color="green">版本戳</font></h2><p>数据库表添加<strong>version字段</strong>，每次查询订单的时候，版本号需要随着订单数据返回给页面。<font color="green"><strong>页面在更新数据的请求时,需要把该版本号作为更新请求的参数再带回给订单更新服务</strong></font>。订单服务在更新数据的时候需要<strong>比较订单当前数据的版本号与消息中的版本号是否一致</strong>，如果不一致就拒绝更新数据。如果版本号一致，则还需要在更新数据的同时，把版本号<strong>加1</strong>。当然需要特别注意的是，“比较版本号、更新数据和把版本号加1”这个过程必须在同一个事务里面执行，只有这一系列操作具备<strong>原子性</strong>，才能真正保证并发操作的安全性。<code>UPDATE orders set tracking_number = 666,version = version + 1 WHERE version = ?;</code></p><h1>读写分离</h1><p>使用Redis 作为MySQL 的前置缓存，可以帮助MySQL 挡住绝大部分的查询请求。但是与用户相关的系统,即使同一个功能界面，用户看到的数据也是不一样的。使用缓存的效果就没有那么好了.随着系统的用户数量越来越多,穿透到MySQL 数据库中的读写请求也会越来越多</p><p>读写分离是提升 MySQL 并发能力的<strong>首选方案</strong>，当单个MySQL 无法满足要求的时候，只能用多个MySQL 实例来承担大量的读写请求。MySQL 与大部分常用的关系型数据库一样,都是典型的单机数据库,不支持分布式部署。用一个单机数据库的多个实例组成一个集群,提供分布式数据库服务,是一件非常困难的事情。一个简单且非常有效的是用多个具有相同数据的MySOL 实例来分担大量查询请求，也就是“读写分离”。很多系统，特别是互联网系统，数据的读写比例严重不均衡，<strong>读写比例一般在9:1</strong>到几十比1，即平均每发生几十次查询请求，才会有一次更新请求，那就是说数据库需要应对的绝大部分请求都是只读查询请求。</p><p><font color="gray">分布式存储系统支持分布式写是非常困难的，因为很难解决好数据一致性的问题。但分布式读相对来说就简单得多，能够把数据尽可能实时同步到只读实例上，它们就可以分担大量的查询请求了。读写分离的另一个好处是，实施起来相对比较简单。把使用单机MySQL 的系统升级为读写分离的多实例架构非常容易，一般不需要修改系统的业务逻辑，只需要简单修改DAO (Data Access Object,一般指应用程序中负责访问数据库的抽象层)层的代码,把对数据库的读写请求分开，请求不同的MySQL 实例就可以了。通过读写分离这样一个简单的存储架构升级，数据库支持的并发数量就可以增加几倍到十几倍。所以，当系统的用户数越来越多时，读写分离应该是首要考虑的扩容方案。</font></p><h2 id="数据不一致问题">数据不一致问题</h2><p>读写分离的一个副作用是，可能会存在数据不一致的问题。原因是数据库中的数据在主库完成更新后，是异步同步到每个从库上的，这个过程会有一个微小的时间差。正常情况下，主从延迟非常小，以几毫秒计。但即使是这样小的延迟，也会导致在某个时刻主库和从库上数据不一致的问题。应用程序需要能够接受并克服这种主从不一致的情况，否则就会引发一些由于主从延迟而导致的数据错误。</p><p>回顾我们的订单系统业务，用户对购物车发起商品结算创建订单，进入订单页，打开支付页面进行支付，支付完成后，按道理应该再返回到支付之前的订单页。但如果这时马上自动返回到订单页，就很有可能会出现订单状态还是显示“未支付”的问题。因为支付完成后，订单库的主库中订单状态已经更新了，但订单页查询的从库中这条订单记录的状态可能还未更新，如何解决这种问题呢？其实这个问题并没有特别好的技术手段来解决，所以可以看到，稍微上点规模的电商网站并不会支付完成后自动跳到到订单页，而是<font color="green"><strong>增加了一个支付完成页面</strong></font>，这个页面其实没有任何新的有效信息，就是告诉你支付成功的信息。如果想再查看一下刚刚支付完成的订单，需要手动选择，这样就能很好地规避主从同步延迟的问题。</p><p><strong>如果是那些数据更新后需要立刻查询的业务，这两个步骤可以放到一个数据库事务中，同一个事务中的查询操作也会被路由到主库</strong>，这样就可以规避主从不一致的问题了，还有一种解决方式则是<strong>对查询部分单独指定进行主库查询</strong>。总的来说，对于这种因为主从延迟而带来的数据不一致问题，并没有一种简单方便且通用的技术方案可以解决，对此，我们需要重新设计业务逻辑，<font color="green"><strong>尽量规避更新数据后立即去从库查询刚刚更新的数据</strong></font>。</p><h1>分库分表</h1><p>绝大部分电商企业的在线交易类业务，比如订单、支付相关的系统，还是无法离开MySQL的。原因是只有MySOL之类的关系型数据库，才能提供金融级的事务保证。目前的分布式事务的各种解法方案多少都有些不够完善。</p><h2 id="如何规划分库分表">如何规划分库分表</h2><p>以订单表为例，首先,我们需要思考的问题是，选择分库还是分表，或者两者都有，分库就是把数据拆分到不同的MySQL 数据库实例中，分表就是把数据拆分到一个数据库的多张表里面。在考虑到底是选择分厍还是分表之前,我们需要首先明确一个原则，那就是<strong>能小拆就小拆</strong>. 原因很简单，数据拆得越分散,并发和维护就越麻烦，系统出问题的概率也就越大。</p><p>遵循上面这个原则，还需要进一步了解，哪种情况适合分表，哪种情况适合分库。选择分厍或是分表的目的是解决如下两个问题。</p><ol><li>是为了解决因数据量太大而导致查询慢的问题。这里所说的“查询”，其实主要是事务中的查询和更新操作，因为只读的查询可以通过缓存和主从分离来解决。分表主要用于解决因数据量大而导致的查询慢的问题。</li><li>是为了应对高并发的问题。如果一个数据库实例撑不住，就把并发请求分散到多个实例中，所以分库可用于解决高并发的问题。</li></ol><p>简单地说，<strong>如果数据量太大，就分表；如果并发请求量高，就分库</strong>。一般情况下,我们的解决方案大都需要同时做分库分表,我们可以根据预估的并发量和数据量，分别计算应该拆分成多少个库以及多少张表。</p><h2 id="分库分表案例">分库分表案例</h2><h3 id="数据量">数据量</h3><p>在设计系统，我们预估订单的数量每个月订单2000W，一年的订单数可达2.4 亿。而每条订单的大小大致为1KB，按照我们在MySQL 中学习到的知识，为了让B+树的高度控制在一定范围，保证查询的性能，<strong>每个表中的数据不宜超过2000W</strong>。在这种情况下，为了存下2.4 亿的订单，我们似乎应该将订单表分为16（12 往上取最近的2 的幂）张表。</p><p>但是这样设计，有个问题，我们只考虑了订单表，没有考虑<strong>订单详情表</strong>。我们预估一张订单下的商品平均为10 个，那既是一年的订单详情数可以达到24亿，同样以每表2000W 记录计算，应该订单详情表为128（120 往上取最近的2的幂）张，而订单表和订单详情表虽然记录数上是一对一的关系，但是表之间还是一对一，也就是说订单表也要为128 张。经过再三分析，我们最终将订单表和订单详情表的张数定为32 张。这会导致订单详情表单表的数据量达到8000W（但是我们会对历史数据进行数据迁移，比如迁移到Mongodb或es）</p><h3 id="选择分片键">选择分片键</h3><p>选择分片链有一个最重要的参考因素是我们的业务是如何访问数据的？</p><p>比如我们把订单ID 作为分片键来诉分订单表。那么拆分之后,如果按照订单ID 来查询订单,就需要先根据订单ID 和分片算法,计算所要查的这个订单具体在哪个分片上，也就是哪个库的哪张表中，然后再去那个分片执行查询操作即可。但是当用户打开“我的订单”这个页面的时候，它的查询条件是用户ID，由于这里没有订单ID，因此我们无法知道所要查询的订单具体在哪个分片上，也就没法查了。如果要强行查询的话，那就只能把所有的分片都查询一遍，再合并查询结果，这个过程比较麻烦，而且性能很差，对分页也很不友好。</p><p>这个问题的解决办法是，在生成订单ID的时候，<font color="green"><strong>把用户ID的后几位作为订单ID的一部分。这样按订单ID查询的时候，就可以根据订单ID中的用户ID找到分片。</strong></font><strong>所以在我们的系统中订单ID从唯一ID服务获取ID后，还会将用户ID的后两位拼接，形成最终的订单ID。</strong></p><p>然而，系统对订单的查询万式，肯定不只是按订单ID 或按用户ID 查询两种方式。比如如果有商家希望查询自家家店的订单，有与订单相关的各种报表。对订单做了分库分表，就没法解决了。这个问题又该怎么解决呢？</p><p>一般的做法是，<font color="green"><strong>把订单里数据同步到其他存储系统中</strong></font>，然后在其他存储系统里解决该问题。比如可以再<strong>构建一个以店铺ID作为分片键的只读订单库，专供商家使用</strong>。或者数据同步到Hadoop分布式文件系统（HDFS）中，然后通过一些大数据技术生成与订单相关的报表。</p><p>在分片算法上，我们知道常用的有按范围，比如时间范围分片，哈希分片，查表法分片。一旦做了分库分表，就会极大地限制数据库的查询能力，原本很简单的查询，分库分表之后，可能就没法实现了。分库分表一定是在数据量和并发请求量大到所有招数都无效的情况下，我们才会采用的<strong>最后一招</strong>。</p><h3 id="具体实现">具体实现</h3><ol><li>纯手工方式：修改应用程序的DAO 层代码，定义多个数据源，在代码中需要访问数据库的每个地方指定每个数据库请求的数据源。</li><li>组件方式：使用像<font color="green"><strong>Sharding-JDBC</strong></font>这些组件集成在应用程序内，用于代理应用程序的所有数据库请求，并把请求自动路由到对应的数据库实例上。</li><li>代理方式: 在应用程序和数据库实例之间部署一组数据库代理实例,比如Atlas 或Sharding-Proxy。对于应用程序来说,数据库代理把自己伪装成一个单节点的MySQL 实例,应用程序的所有数据库请求都将发送给代理，代理分离请求，然后将分离后的请求转发给对应的数据库实例。</li></ol><p>在这三种方式中一般推荐第二种，使用分离组件的方式。采用这种方式,<strong>代码侵入非常少</strong>,同时还能兼顾性能和稳定性。<br>如果应用程序是一个逻辑非常简单的微服务,简单到只有几个SQL,或者应用程序使用的编程语言没有合适的读写分离组件,那么也可以考虑通过纯手工的方式。<br>不推荐使用代理方式（第三种方式），原因是代理方式加长了系统运行时数据库请求的调用链路,会造成一定的性能损失，而且代理服务本身也可能会出现故障和性能瓶颈等问题。代理方式有一个好处，对应用程序完全透明。</p><h1>归档历史数据</h1><p>所谓归档，也是一种拆分数据的策略。简单地说，就是把大量的历史订单移到另外一张历史订单表或数据存储中。为什这么做呢？订单数据有个特点：具备时间属性的，并且随着系统的运行，数据累计增长越来越多。但其实订单数据在使用上有个特点，最近的数据使用最频繁，超过一定时间的数据很少使用，这被称之为<font color="green"><strong>热尾效应</strong></font>。</p><p>因为新数据只占数据息量中很少的一部分，所以把新老数据分开之后，新数据的数据量就少很多，查询速度也会因此快很多。虽然与之前的总量相比，老数据没有减少太多，但是因为老数据很少会被访问到，所以即使慢一点儿也不会有太大的问题，而且还可以使用其他的存储系统提升查询速度。</p><p>这样拆分数据的另外一个好处是，拆分订单时，<strong>系统需要改动的代码非常少</strong>。对订单表的大部分操作都是在订单完成之前执行的，这些业务逻辑都是完全不用修改的。即使是像退货退款这类订单完成之后的操作，也是有时限的，这些业务逻辑也不需要修改,还是按照之前那样操作订单即可。</p><p><strong>基本上只有查询统计类的功能会查到历史订单</strong>，这些都需要稍微做些调整。按照查询条件中的时间范围，选择去订单表还是历史订单中查询就可以了。很多大型互联网电商在逐步发展壮大的过程中，长达数年的时间采用的都是这种订单拆分的方案，正如我们前面看到的京东就是如此。</p><h2 id="分布式事务">分布式事务</h2><p>考察迁移的过程，我们是逐表批次删除，对于每张订单表，先从MySQL 从获得指定批量的数据，写入MongoDB，再从MySQL 中删除已写入MongoDB 的部分，这里存在着一个多源的数据操作，为了保证数据的一致性，看起来似乎需要分布式事务。<font color="green"><strong>但是其实这里并不需要分布式事务，解决的关键在于写入订单数据到MongoDB 时，我们要记住同时写入当前迁入数据的最大订单ID，让这两个操作执行在同一个事务之中。这样，在MySQL 执行数据迁移时，总是去MongoDB 中获得上次处理的最大OrderId，作为本次迁移的查询起始ID。当然数据写入MongoDB 后，还要记得删除MySQL 中对应的数据。</strong></font></p><p>在这个过程中，我们需要注意的问题是，<strong>尽量不要影响线上的业务</strong>。迁移如此大量的数据，或多或少都会影响数据库的性能，因此应该尽量选择在<strong>闲时迁移</strong>而且每次数据库操作的记录数不宜太多。按照一般的经验，对MySQL 的操作的记录条数<strong>每次控制在10000以下是比较合适</strong>，在我们的系统中缺省是2000 条。更重要的是，迁<strong>移之前一定要做好备份</strong>，这样的话，即使不小心误操作了，也能用备份来恢复。</p><h2 id="如何批量删除大量数据">如何批量删除大量数据</h2><p>虽然我们是按时间迁出订单表中的数据，<font color="green"><strong>但是删除最好还是按ID来删除，并且同样要控制住每次删除的记录条数</strong></font>，太大的数量容易遇到错误。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> ${orderTableName} o <span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>id <span class="token operator">&gt;=</span> <span class="token comment">#{minOrder!d} and o.id &lt;= #{maxOrderId} </span><span class="token keyword">order</span> <span class="token keyword">by</span> id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样每次删除的时候，由于条件变成了主键比较，而在MySQL 的InnoDB 存储引擎中，表数据结构就是按照主键组织的一棵B+树，同时B+树本身就是有序的，因此优化后不仅查找变得非常快,而且也不需要再进行额外的排序操作了。</p><p>为什么要加一个排序的操作呢？因为<font color="green"><strong>按ID排序后，每批删除的记录基本上都是ID连续的一批记录</strong></font>，由于B+树的有序性，这些ID 相近的记录，在磁盘的物理文件上，大致也是存放在一起的，这样删除效率会比较高，也便于MySQL 回收页。</p><p>关于大批量删除数据，还有一个点需要注意一下，<font color="green"><strong>执行删除语句后，最好能停顿一小会，因为删除后肯定会牵涉到大量的B+树页面分裂和合并</strong></font>，这个时候MySQL的本身的负载就不小了，停顿一小会，可以让MySQL的负载更加均衡。</p><h1>总结梳理</h1><h2 id="重复下单问题-主键唯一约束">重复下单问题: 主键唯一约束</h2><ul><li><strong>前端页面会先调用这个生成订单号的服务得到一个订单号，在用户提交订单的时候，在创建订单的请求中带着这个订单号。</strong></li></ul><h2 id="订单ABA问题-版本戳-verison-字段">订单ABA问题: 版本戳 (verison 字段)</h2><ul><li><strong>页面在更新数据的请求时,需要把该版本号作为更新请求的参数再带回给订单更新服务</strong></li></ul><h2 id="读写分离（提升DB并发能力的首选方案）-读写比例一般在9-1">读写分离（提升DB并发能力的<strong>首选方案</strong>）: <strong>读写比例一般在9:1</strong></h2><ul><li><p>数据不一致问题: <strong>增加一个支付完成页面</strong></p><ul><li><p>如果数据更新后需要立刻查询，这俩步骤可以放到一个事务中，或单独指定主库查询</p></li><li><p><strong>尽量规避更新数据后立即去从库查询刚刚更新的数据</strong></p></li></ul></li></ul><h2 id="分库分表（能小拆就小拆，最后一招）">分库分表（<strong>能小拆就小拆，最后一招</strong>）</h2><ul><li><p><strong>如果数据量太大，就分表；如果并发请求量高，就分库</strong></p></li><li><p>MySQL<strong>每个表中的数据不宜超过2000W</strong></p></li><li><p><strong>选择分片键</strong></p><ul><li><p><strong>把用户ID的后几位作为订单ID的一部分。这样按订单ID查询的时候，就可以根据订单ID中的用户ID找到分片（便于用户查询）</strong></p></li><li><p><strong>把订单里数据同步到其他存储系统中（比如以店铺ID分片供商家查询使用）</strong></p></li></ul></li><li><p>实现方式</p><ul><li><p>手工（简单业务推荐）</p></li><li><p><strong>Sharding-JDBC（推荐，代码侵入少）</strong></p></li><li><p>代理：Atlas Sharding-Proxy Mycat（不推荐，多了一层代理且代理层也可能出现故障）</p></li></ul></li></ul><h2 id="归档历史数据：热尾效应">归档历史数据：<strong>热尾效应</strong></h2><ul><li><p><strong>系统需要改动的代码非常少</strong></p></li><li><p><strong>基本上只有查询统计类的功能会查到历史订单</strong></p></li><li><p><strong>不需要分布式事务</strong></p><ul><li><p><strong>写入订单数据到MongoDB时，同时写入当前迁入数据的最大订单ID，让这两个操作执行在同一个事务之中</strong></p></li><li><p><strong>在MySQL执行数据迁移时，先去MongoDB中获得上次处理的最大OrderId，作为本次迁移的查询起始ID</strong></p></li><li><p><strong>写入后，删除MySQL中对应的数据（批量删除大量数据）</strong></p><ul><li><p><strong>按ID来删除，并且同样要控制住每次删除的记录条数</strong></p></li><li><p><strong>删除语句按ID排序，每批删除的记录基本上都是ID连续的</strong></p></li><li><p><strong>执行删除语句后，最好能停顿一小会，因为删除后会牵涉到大量的B+树页面分裂和合并</strong></p></li></ul></li></ul></li><li><p><strong>尽量不要影响线上的业务：闲时迁移</strong></p></li><li><p><strong>每次控制在10000以下是比较合适</strong></p></li><li><p><strong>移之前一定要做好备份</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;重复下单问题（幂等）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;用户在点击“提交订单”的按钮时，不小心点了两下&lt;/li&gt;
&lt;li&gt;网络错误也有可能会导致重传，很多RPC框架和网关都拥有自动重试机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;font-color-green-主键唯一约束-f</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="订单系统" scheme="https://jxch.github.io/tags/%E8%AE%A2%E5%8D%95%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>06.微服务网关整合OAuth2.0授权中心</title>
    <link href="https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/06-wei-fu-wu-wang-guan-zheng-he-oauth2-0-shou-quan-zhong-xin/"/>
    <id>https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/06-wei-fu-wu-wang-guan-zheng-he-oauth2-0-shou-quan-zhong-xin/</id>
    <published>2023-07-08T19:07:10.000Z</published>
    <updated>2023-07-08T19:37:12.576Z</updated>
    
    <content type="html"><![CDATA[<ol><li>配置授权服务器（AuthorizationServerConfigurerAdapte - 授权码/密码）<ol><li>DB模式</li><li>内存模式</li></ol></li><li>SpringSecurity（WebSecurityConfigurerAdapter）</li><li>JWT：头部（header）、载荷（payload）与签名（signature 加盐）<ol><li>一次性验证、无状态认证</li><li>注销续约复杂，不适合会话管理</li></ol></li><li>JWT非对称加密（公钥私钥）</li><li>扩展JWT中的存储内容（TokenEnhancer）</li><li>接入网关服务（GlobalFilter）<ol><li>过滤不需要认证的url</li><li>校验token（需要从授权服务获取公钥）<ul><li>不能直接通过@LoadBalancer配置RestTemplate去获取公钥，因为Spring容器启动过程中@LoadBalancer还未生效</li></ul></li><li>校验通过后，从token中获取的用户登录信息存储到请求头中</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;配置授权服务器（AuthorizationServerConfigurerAdapte - 授权码/密码）
&lt;ol&gt;
&lt;li&gt;DB模式&lt;/li&gt;
&lt;li&gt;内存模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SpringSecurity（WebSecurityCo</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="授权中心" scheme="https://jxch.github.io/tags/%E6%8E%88%E6%9D%83%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>05.分布式唯一ID</title>
    <link href="https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/05-fen-bu-shi-wei-yi-id/"/>
    <id>https://jxch.github.io/2023/07/09/architect/06.dian-shang-xi-tong/05-fen-bu-shi-wei-yi-id/</id>
    <published>2023-07-08T18:02:08.000Z</published>
    <updated>2023-07-11T22:11:49.009Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>全局唯一性</strong>：不能出现重复的ID号，既然是唯一标识，这是最基本的要求。</li><li><strong>趋势递增、单调递增</strong>：保证下一个ID一定大于上一个ID。</li><li><strong>信息安全</strong>：如果ID是连续的，恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定URL 即可；如果是订单号就更危险了，竞对可以直接知道我们一天的单量。所以在一些应用场景下，会需要ID 无规则、不规则。</li></ul><h1>常见方法</h1><h2 id="UUID">UUID</h2><p>UUID(Universally Unique Identifier)的标准型式包含 32 个 16 进制数字，以连字号分为五段，<strong>形式为 8-4-4-4-12 的 32 个字符</strong>，示例：<br>550e8400-e29b-41d4-a716-446655440000，到目前为止业界一共有5种方式生成UUID，详情见IETF 发布的UUID 规范 A Universally Unique IDentifier (UUID) URN Namespace。</p><ul><li>优点：性能非常高，本地生成，没有网络消耗。</li><li>缺点：<ul><li>不易于存储：UUID 太长，16 字节128 位，通常以36 长度的字符串表示，很多场景不适用。</li><li>信息不安全：基于 MAC 地址生成 UUID 的算法可能会造成 <font color="red"><strong>MAC 地址泄露</strong></font>，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</li></ul></li><li>ID 作为主键时在特定的环境会存在一些问题，比如做 DB 主键的场景下，UUID 就非常不适用<ul><li>MySQL 官方有明确的建议主键要尽量越短越好，36 个字符长度的 UUID 不符合要求。</li><li>对 MySQL 索引不利：如果作为数据库主键，在InnoDB 引擎下，UUID 的无序性可能会引起数据位置频繁变动，严重影响性能。在MySQL InnoDB 引擎中使用的是聚集索引，由于多数 RDBMS 使用 B-tree 的数据结构来存储索引数据，在主键的选择上面我们应该<font color="red"><strong>尽量使用有序的主键保证写入性能</strong></font>。</li></ul></li></ul><h2 id="雪花算法">雪花算法</h2><p>这种方案大致来说是一种以划分命名空间（UUID 也算，由于比较常见，所以单独分析）来生成ID 的一种算法，Snowflake 是Twitter 开源的分布式 ID 生成算法。Snowflake 把64-bit分别划分成多段</p><ul><li>第 0 位： 符号位（标识正负），始终为 0，没有用，不用管。</li><li>第 1~41 位 ：一共41位，用来表示<strong>时间戳</strong>，单位是毫秒，可以支撑 2 ^41 毫秒（约69 年）</li><li>第 42~52 位 ：一共10位，一般来说，<strong>前5位表示机房 ID，后5位表示机器ID</strong>（实际项目中可以根据实际情况调整），这样就可以区分不同集群/机房的节点，这样就可以表示32 个IDC，每个IDC 下可以有32 台机器。</li><li>第 53~64 位 ：一共12位，用来表示<strong>序列号</strong>。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器<strong>每毫秒最多可以生成4096个唯一ID</strong>。</li></ul><p>理论上snowflake 方案的QPS约为409.6w/s，这种分配方式可以保证在任何一个IDC的任何一台机器在任意毫秒内生成的ID都是不同的。</p><ul><li>优点：<ul><li>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</li><li>可以根据自身业务特性分配bit位，非常灵活。</li></ul></li><li>缺点：强依赖机器时钟，如果机器上<font color="red"><strong>时钟回拨</strong></font>，会导致发号重复或者服务会处于不可用状态。</li></ul><h2 id="Mongdb-ObjectID">Mongdb ObjectID</h2><p>它也可以算作是和snowflake类似方法，通过 “<strong>时间+机器码+pid+inc</strong>” 共12 个字节，通过4+3+2+3的方式最终标识成一个24长度的十六进制字符。</p><h2 id="Seata-UUID">Seata UUID</h2><p>Seata 内置了一个分布式 UUID 生成器，用于辅助生成全局事务 ID 和分支事务 ID，我们同样可以拿来使用，完整类名为：<code>io.seata.common.util.IdWorker</code></p><h2 id="数据库生成-MySQL">数据库生成 (MySQL)</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sequence_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>stub<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>stub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 stub 字段创建了唯一索引，保证其唯一性。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">REPLACE</span> <span class="token keyword">INTO</span> sequence_id <span class="token punctuation">(</span>stub<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'stub'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据这里，我们没有使用 insert into 而是使用 replace into 来插入数据。replace 是insert 的增强版，replace into 首先尝试插入数据到表中，</p><ol><li>如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。</li><li>否则，直接插入新数据。</li></ol><ul><li>优点：非常简单，利用现有数据库系统的功能实现，成本小，有DBA 专业维护。ID号单调自增，存储消耗空间小。</li><li>缺点：<ul><li>支持的并发量不大</li><li>存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）</li><li>ID 没有具体业务含义、安全问题（比如<font color="red"><strong>根据订单 ID 的递增规律就能推算出每天的订单量</strong></font>，商业机密啊！ ）</li><li>每次获取 ID 都要访问一次数据库（<font color="red"><strong>增加了对数据库的压力</strong></font>，获取速度也慢）</li></ul></li></ul><p>对于MySQL 性能问题，可用如下方案解决：在分布式系统中我们可以<strong>多部署几台机器，每台机器设置不同的初始值，且步长和机器数相等</strong>。比如有两台机器。设置步长step 为2，TicketServer1 的初始值为1（1，3，5，7，9，11…）、TicketServer2 的初始值为2（2，4，6，8，10…）。这是Flickr（雅虎旗下图片分享网站）团队在2010 年撰文介绍的一种主键生成策略（Ticket Servers: Distributed Unique Primary Keys on the Cheap ）。为了实现上述方案分别设置两台机器对应的参数，TicketServer1 从1 开始发号，TicketServer2 从2 开始发号，两台机器每次发号之后都递增2。假设我们要部署N 台机器，步长需设置为N，每台的初始值依次为0,1,2…N-1。</p><p>这种架构貌似能够满足性能的需求，但有以下几个缺点：</p><ul><li>系统<font color="red"><strong>水平扩展比较困难</strong></font>，比如定义好了步长和机器台数之后，如果要添加机器该怎么做？假设现在只有一台机器发号是1,2,3,4,5（步长是1），这个时候需要扩容机器一台。可以这样做：把第二台机器的初始值设置得比第一台超过很多，比如140（假设在扩容时间之内第一台不可能发到140），同时设置步长为2，那么这台机器下发的号码都是140 以后的偶数。然后摘掉第一台，把ID 值保留为奇数，比如7，然后修改第一台的步长为2。让它符合我们定义的号段标准，对于这个例子来说就是让第一台以后只能产生奇数。扩容方案看起来复杂吗？貌似还好，现在想象一下如果我们线上有100 台机器，这个时候要扩容该怎么做？简直是噩梦。所以系统水平扩展方案复杂难以实现。</li><li>ID <font color="red"><strong>没有了单调递增的特性</strong></font>，只能趋势递增，这个缺点对于一般业务需求不是很重要，可以容忍。</li><li><strong>数据库压力</strong>还是很大，每次获取ID 都得读写一次数据库，只能靠堆机器来提高性能。</li></ul><h2 id="Redis">Redis</h2><p>通过 Redis 的 incr 命令即可实现对 id 原子顺序递增。为了提高可用性和并发，我们可以使用 Redis Cluster。</p><p>除了高可用和并发之外，我们知道 Redis 基于内存，我们需要<strong>持久化数据</strong>，避免重启机器或者机器故障后数据丢失。很明显，Redis 方案性能很好并且生成的 ID 是有序递增的。不过，我们也知道，即使 Redis 开启了持久化，不管是快照（snapshotting，RDB）、只追加文件（append-only file, AOF）还是 RDB 和AOF 的混合持久化依然<font color="red"><strong>存在着丢失数据的可能，那就意味着产生的 ID 存在着重复的概率</strong></font>。</p><h1>分布式ID微服务</h1><h2 id="Leaf-segment">Leaf-segment</h2><p>Leaf-segment 方案，在使用数据库的方案上，做了如下改变：</p><ul><li>原 MySQL 方案每次获取 ID 都得读写一次数据库，造成数据库压力大。改为<strong>批量获取</strong>，每次获取一个segment(step 决定大小)号段的值。用完之后再去数据库获取新的号段，可以大大的减轻数据库的压力。</li><li><strong>各个业务不同的发号需求用 biz_tag 字段来区分</strong>，每个 biz-tag 的 ID 获取相互隔离，互不影响。如果以后有性能需求需要对数据库扩容，不需要上述描述的复杂的扩容操作，只需要对 biz_tag 分库分表就行。</li><li>biz_tag 用来区分业务，max_id 表示该 biz_tag 目前所被分配的 ID 号段的最大值，step 表示每次分配的号段长度。原来获取ID 每次都需要写数据库，现在只需要把step 设置得足够大，比如1000。那么只有当1000 个号被消耗完了之后才会去重新读写一次数据库。<strong>读写数据库的频率从1减小到了1/step</strong>。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Begin</span><span class="token keyword">UPDATE</span> <span class="token keyword">table</span> <span class="token keyword">SET</span> max_id<span class="token operator">=</span>max_id<span class="token operator">+</span>step <span class="token keyword">WHERE</span> biz_tag<span class="token operator">=</span>xxx<span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span> max_id<span class="token punctuation">,</span> step <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> biz_tag<span class="token operator">=</span>xxx<span class="token keyword">Commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点：<ul><li>Leaf 服务可以很方便的<strong>线性扩展</strong>，性能完全能够支撑大多数业务场景。ID 号码是趋势递增的8byte 的64 位数字，满足上述数据库存储的主键要求。</li><li>容灾性高：Leaf 服务内部有<strong>号段缓存</strong>，即使DB 宕机，短时间内Leaf 仍能正常对外提供服务。</li><li>可以自定义 max_id 的大小，非常方便业务从原有的ID方式上迁移过来。</li></ul></li><li>缺点：<ul><li>ID 号码不够随机，能够<font color="red"><strong>泄露发号数量</strong></font>的信息，不太安全。</li><li>TP999 数据波动大，当号段使用完之后还是会在获取新号段时在更新数据库的I/O依然会存在着等待，tg999 数据会出现<font color="red"><strong>偶尔的尖刺</strong></font>。</li><li><strong>DB 宕机</strong>会造成整个系统不可用。</li></ul></li></ul><h3 id="双buffer优化">双buffer优化</h3><p><font color="gray">Leaf 取号段的时机是在号段消耗完的时候进行的，也就意味着号段临界点的ID 下发时间取决于下一次从DB取回号段的时间，并且在这期间进来的请求也会因为DB号段没有取回来，导致线程阻塞。如果请求DB 的网络和DB 的性能稳定，这种情况对系统的影响是不大的，但是假如取DB 的时候网络发生抖动，或者DB 发生慢查询就会导致整个系统的响应时间变慢。为此，希望DB 取号段的过程能够做到无阻塞，不需要在DB 取号段的时候阻塞请求线程，即当号段消费到某个点时就异步的把下一个号段加载到内存中。而不需要等到号段用尽的时候才去更新号段。这样做就可以很大程度上的降低系统的TP999 指标。</font><br>采用双buffer 的方式，Leaf 服务内部有两个号段缓存区segment。<strong>当前号段已下发10%时</strong>，如果下一个号段未更新，则<strong>另启一个更新线程去更新下一个号段</strong>。<strong>当前号段全部下发完后</strong>，如果下个号段准备好了则<strong>切换到下个号段为当前segment接着下发</strong>，循环往复。<br>通常<strong>推荐segment长度设置为服务高峰期发号QPS 的600 倍（10 分钟），这样即使DB 宕机，Leaf 仍能持续发号10-20 分钟不受影响</strong>。每次请求来临时都会判断下个号段的状态，从而更新此号段，所以偶尔的网络抖动不会影响下个号段的更新。</p><h3 id="Leaf-高可用容灾">Leaf 高可用容灾</h3><p>对于第三点“DB 可用性”问题，可以采用<strong>一主两从</strong>的方式，同时分机房部署，Master 和Slave 之间采用半同步方式同步数据。美团内部使用了奇虎360 的Atlas 数据库中间件（已开源，改名为DBProxy）做主从切换。当然这种方案在一些情况会退化成异步模式，甚至在非常极端情况下仍然会造成数据不一致的情况，但是出现的概率非常小。如果要保证100%的数据强一致，可以选择使用“类Paxos算法”实现的强一致MySQL 方案，如MySQL 5.7 中的MySQL Group Replication。但是运维成本和精力都会相应的增加，根据实际情况选型即可。</p><h2 id="Leaf-snowflake">Leaf-snowflake</h2><p>Leaf-segment 方案可以生成趋势递增的ID，同时ID 号是可计算的，不适用于订单ID 生成场景，比如竞对在两天中午12 点分别下单，通过订单id 号相减就能大致计算出公司一天的订单量，这个是不能忍受的。面对这一问题，美团提供了Leaf-snowflake 方案。</p><p>Leaf-snowflake 方案完全沿用snowflake 方案的bit 位设计，即是“1+41+10+12”的方式组装ID 号。对于workerID 的分配，当服务集群数量较小的情况下，完全可以手动配置。Leaf 服务规模较大，动手配置成本太高。所以<strong>使用Zookeeper 持久顺序节点的特性自动对snowflake节点配置wokerID</strong>。</p><p>Leaf-snowflake 是按照下面几个步骤启动的：</p><ul><li>启动Leaf-snowflake 服务，连接Zookeeper，在leaf_forever 父节点下检查自己是否已经注册过（是否有该顺序子节点）。</li><li>如果有注册过直接取回自己的workerID（zk 顺序节点生成的int 类型ID 号），启动服务。</li><li>如果没有注册过，就在该父节点下面创建一个持久顺序节点，创建成功后取回顺序号当做自己的workerID 号，启动服务。</li></ul><h3 id="弱依赖ZooKeeper">弱依赖ZooKeeper</h3><p>除了每次会去ZK 拿数据以外，也会在<strong>本机文件系统上缓存一个workerID文件</strong>。当ZooKeeper 出现问题，恰好机器出现问题需要重启时，能保证服务能够正常启动。这样做到了对三方组件的弱依赖。</p><h3 id="解决时钟问题">解决时钟问题</h3><p>首先在启动时，服务会进行检查：</p><ol><li>新节点通过检查综合对比其余Leaf 节点的系统时间来判断自身系统时间是否准确，具体做法是取所有运行中的Leaf-snowflake 节点的服务IP：Port，然后通过RPC 请求得到所有节点的系统时间，计算<strong>sum(time)/nodeSize</strong>，然后看本机时间与这个平均值是否在阈值之内来确定当前系统时间是否准确，准确正常启动服务，不准确认为本机系统时间发生大步长偏移，启动失败并报警。</li><li>在ZooKeeper 中登记过的老节点，同样会<strong>比较自身系统时间和ZooKeeper上本节点曾经的记录时间以及所有运行中的Leaf-snowflake节点的时间，不准确同样启动失败并报警</strong>。</li><li>在运行过程中，<strong>每隔一段时间节点都会上报自身系统时间写入ZooKeeper</strong>。</li></ol><p>在服务运行过程中，机器的NTP 同步也会造成秒级别的回退，由于强依赖时钟，对时间的要求比较敏感，美团建议有三种解决方案，</p><ol><li>可以<strong>直接关闭NTP同步</strong>；</li><li>在时钟回拨的时候<strong>直接不提供服务直接返回ERROR_CODE，等时钟追上</strong></li><li><strong>做一层重试，然后上报报警系统</strong>，更或者是发现有时钟回拨之后<strong>自动摘除本身节点并报警</strong></li></ol><p>从美团的实际运行情况来看，在2017 年闰秒出现那一次出现过部分机器回拨，由于Leaf-snowflake 的策略保证，成功避免了对业务造成的影响。<br>Leaf 在美团点评公司内部服务包含金融、支付交易、餐饮、外卖、酒店旅游猫眼电影等众多业务线。目前Leaf 的性能在4C8G 的机器上QPS 能压测到近<strong>5万/s</strong>，TP999 1ms，已经能够满足大部分的业务的需求。每天提供亿数量级的调用量。</p><h1>总结梳理</h1><p>要求：全局唯一性、单调（趋势）递增、信息安全（不能泄露订单量）</p><h2 id="UUID：MAC-地址泄露、无序（数据库主键无序导致B树频繁变动）">UUID：MAC 地址泄露、无序（数据库主键无序导致B树频繁变动）</h2><h2 id="雪花算法：时钟回拨">雪花算法：<strong>时钟回拨</strong></h2><h2 id="Mongdb-ObjectID-2">Mongdb ObjectID</h2><h2 id="Seata-UUID：io-seata-common-util-IdWorker">Seata UUID：<code>io.seata.common.util.IdWorker</code></h2><h2 id="MySQL：泄露发号数量、增加数据库压力">MySQL：<strong>泄露发号数量、增加数据库压力</strong></h2><ul><li><p><strong>多部署几台机器，每台机器设置不同的初始值，且步长和机器数相等</strong></p><ul><li><p><strong>水平扩展比较困难</strong></p></li><li><p><strong>没有了单调递增的特性（不同机器只能保证趋势递增）</strong></p></li><li><p>每次只获取一个ID，数据库压力依然很大</p></li></ul></li></ul><h2 id="Redis：持久化数据时存在着丢失数据的可能">Redis：<strong>持久化数据时存在着丢失数据的可能</strong></h2><h2 id="Leaf-segment-2">Leaf-segment</h2><ul><li><p><strong>泄露发号数量</strong></p></li><li><p>TP999<strong>偶尔的尖刺</strong></p><ul><li><p><strong>双buffer优化：</strong></p><ul><li><p><strong>下发10%时更新下一个号段，下发完后切换到下个号段</strong></p></li><li><p><strong>segment长度设置为服务高峰期发号QPS的600倍（10 分钟），DB宕机时Leaf 仍能持续发号10-20 分钟</strong></p></li></ul></li><li><p>**Leaf 高可用容灾（一主两从）：**DBProxy(360), Paxos(强一致)</p></li></ul></li></ul><h2 id="Leaf-snowflake-2">Leaf-snowflake</h2><ul><li><p><strong>使用Zookeeper配置workerid，本地缓存workerid文件</strong></p></li><li><p><strong>解决时钟问题</strong></p><ul><li><p>新节点启动时计算<strong>sum(time)/nodeSize是否超过阈值</strong></p></li><li><p>老节点每隔一段时间上报自身系统时间</p></li><li><p>老节点比较zookeeper上本节点曾经的记录时间</p></li><li><p>老节点比较所有运行中的节点时间</p></li></ul></li><li><p>出现时钟回拨</p><ul><li><p><strong>直接关闭NTP同步</strong></p></li><li><p><strong>直接不提供服务返回ERROR_CODE，等时钟追上</strong></p></li><li><p><strong>做一层重试，然后上报报警系统</strong></p></li><li><p><strong>自动摘除本身节点并报警</strong></p></li></ul></li></ul><p>Leaf 的性能在4C8G 的机器上QPS 能压测到近<strong>5万/s</strong>，TP999 1ms</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局唯一性&lt;/strong&gt;：不能出现重复的ID号，既然是唯一标识，这是最基本的要求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;趋势递增、单调递增&lt;/strong&gt;：保证下一个ID一定大于上一个ID。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信息安全&lt;/st</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式唯一ID" scheme="https://jxch.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%94%AF%E4%B8%80ID/"/>
    
  </entry>
  
  <entry>
    <title>04.微服务全链路灰度发布</title>
    <link href="https://jxch.github.io/2023/07/08/architect/06.dian-shang-xi-tong/04-wei-fu-wu-quan-lian-lu-hui-du-fa-bu/"/>
    <id>https://jxch.github.io/2023/07/08/architect/06.dian-shang-xi-tong/04-wei-fu-wu-quan-lian-lu-hui-du-fa-bu/</id>
    <published>2023-07-08T08:59:10.000Z</published>
    <updated>2023-07-11T22:15:42.327Z</updated>
    
    <content type="html"><![CDATA[<p>灰度发布&nbsp;Gray&nbsp;Release（又名金丝雀发布&nbsp;Canary&nbsp;Release）。不停机旧版本，部署新版本，高比例流量（例如：95%）走旧版本，低比例流量（例如：5%）切换到新版本，通过监控观察无问题，逐步扩大范围，最终把所有流量都迁移到新版本上。属无损发布。</p><p>优点：灵活简单，不需要用户标记驱动。安全性高，新版本如果出现问题，只会发生在低比例的流量上<br>缺点：成本较高，需要部署稳定/灰度两套环境</p><p>微服务体系架构中，服务之间的依赖关系错综复杂，有时某个功能发版依赖多个服务同时升级上线。我们希望可以对这些服务的新版本同时进行小流量灰度验证，这就是微服务架构中特有的全链路灰度场景，通过构建从网关到整个后端服务的环境隔离来对多个不同版本的服务进行灰度验证。在发布过程中，我们只需部署服务的灰度版本，流量在调用链路上流转时，由流经的网关、各个中间件以及各个微服务来识别灰度流量，并动态转发至对应服务的灰度版本。<br>**无论是微服务网关还是微服务本身都需要识别流量，根据治理规则做出动态决策。当服务版本发生变化时，这个调用链路的转发也会实时改变。**相比于利用机器搭建的灰度环境，这种方案不仅可以节省大量的机器成本和运维人力，而且可以帮助开发者实时快速的对线上流量进行精细化的全链路控制。</p><h1>全链路灰度设计思路</h1><ol><li>链路上各个组件和服务能够根据请求流量特征进行<strong>动态路由</strong>。</li><li>需要对服务下的所有节点进行分组，能够区分版本。</li><li>需要对流量进行<strong>灰度标识、版本标识</strong>。</li><li>需要识别出不同版本的灰度流量。</li></ol><p>首先，需要支持动态路由功能，对于Spring&nbsp;Cloud、Dubbo开发框架，可以对出口流量实现自定义Filter，在该Filter中完成流量识别以及标签路由。同时需要借助分布式链路追踪技术完成流量标识链路传递以及流量自动染色。此外，需要引入一个中心化的流量治理平台，方便各个业务线的开发者定义自己的全链路灰度规则。实现全链路灰度的能力，无论是成本还是技术复杂度都是比较高的，以及后期的维护、扩展都是非常大的成本。</p><h2 id="标签路由">标签路由</h2><p>标签路由通过对服务下所有节点<strong>按照标签名和标签值不同进行分组</strong>，使得订阅该服务节点信息的服务消费端可以**按需访问该服务的某个分组，**即所有节点的一个子集。服务消费端可以使用服务提供者节点上的任何标签信息，根据所选标签的实际含义，消费端可以将标签路由应用到更多的业务场景中。</p><h2 id="节点打标">节点打标</h2><p><strong>给服务节点添加不同的标签</strong>：</p><ul><li><strong>K8S</strong>：在使用Kubernetes&nbsp;Service作为服务发现的业务系统中，服务提供者通过向ApiServer提交Service资源完成服务暴露，服务消费端监听与该Service资源下关联的Endpoint资源，从Endpoint资源中获取关联的业务Pod&nbsp;资源，读取上面的Labels数据并作为该节点的元数据信息。所以，我们<strong>只要在业务应用描述资源Deployment中的Pod模板中为节点添加标签即可</strong>。</li><li><strong>Nacos</strong>：一般是需要业务根据其使用的微服务框架来决定打标方式。如果Java应用使用的Spring&nbsp;Cloud微服务开发框架，我们可以为业务容器添加对应的环境变量来完成标签的添加操作。比如我们希望为节点添加版本灰度标，那么为业务容器添加<code>spring.cloud.nacos.discovery.metadata.version=gray</code>，这样框架向Nacos注册该节点时会为其添加一个标签<code>verison=gray</code>。</li></ul><h2 id="流量染色">流量染色</h2><p>为请求流量添加不同灰度标识来方便区分。我们可以在请求的源头上对流量进行染色，前端在发起请求时根据用户信息或者平台信息的不同对流量进行打标。如果前端无法做到，我们也可以在微服务网关上对匹配特定路由规则的请求动态添加流量标识。此外，流量在链路中流经灰度节点时，如果请求信息中不含有灰度标识，需要自动为其染色，接下来流量就可以在后续的流转过程中优先访问服务的灰度版本。<strong>保证请求链路上的各个组件能够识别出不同的灰度流量</strong>。</p><h2 id="分布式链路追踪">分布式链路追踪</h2><p>借助于分布式链路追踪思想，我们也可以传递一些自定义信息，比如灰度标识。<strong>保证灰度标识能够在链路中一直传递下去</strong>。</p><h1>框架</h1><ul><li><a href="https://github.com/Nepxion/Discovery">Discovery</a>：Spring</li><li><a href="https://help.aliyun.com/document_detail/359851.html">MSE</a>：阿里云平台</li></ul><h1>总结梳理</h1><h2 id="全链路灰度发布"><strong>全链路灰度发布</strong></h2><p><strong>标签路由、节点打标（K8S, &nbsp;Nacos）、流量染色、分布式链路追踪</strong></p><p>框架：</p><ul><li><p><strong>Discovery</strong>（免费）：网关配置权重，微服务配置版本号</p></li><li><p>MSE（阿里云平台）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;灰度发布&amp;nbsp;Gray&amp;nbsp;Release（又名金丝雀发布&amp;nbsp;Canary&amp;nbsp;Release）。不停机旧版本，部署新版本，高比例流量（例如：95%）走旧版本，低比例流量（例如：5%）切换到新版本，通过监控观察无问题，逐步扩大范围，最终把所有流量都</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="微服务灰度发布" scheme="https://jxch.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>03.微服务架构拆分</title>
    <link href="https://jxch.github.io/2023/07/08/architect/06.dian-shang-xi-tong/03-wei-fu-wu-jia-gou-chai-fen/"/>
    <id>https://jxch.github.io/2023/07/08/architect/06.dian-shang-xi-tong/03-wei-fu-wu-jia-gou-chai-fen/</id>
    <published>2023-07-08T04:48:20.000Z</published>
    <updated>2023-07-11T22:15:28.757Z</updated>
    
    <content type="html"><![CDATA[<h1>微服务拆分时机</h1><p>微服务不仅仅是技术的升级，更是开发方式、组织架构、开发观念的转变。</p><ul><li><strong>业务规模</strong>：业务模式得到市场的验证，需要进一步加快脚步快速占领市场，这时业务的规模变得越来越大，按产品生命周期来划分（导入期、成长期、成熟期、衰退期）这时一般在成长期阶段。<strong>如果是导入期，尽量采用单体架构</strong>。</li><li><strong>团队规模</strong>：一般是团队达到百人的时候，主要还是要结合业务复杂度</li><li><strong>技术储备</strong>：领域驱动设计、注册中心、配置中心、日志系统、持续交付、监控系统、分布式定时任务、CAP&nbsp;理论、分布式调用链、API&nbsp;网关等等。</li><li><strong>人才储备</strong>：精通微服务落地经验的架构师及相应开发人员。</li><li><strong>研发效率</strong>：研发效率大幅下降。</li></ul><h1>微服务拆分原则</h1><ul><li>单一服务内部功能<strong>高内聚低耦合</strong>：每个服务只完成自己职责内的任务，对于不是自己职责的功能交给其它服务来完成</li><li><strong>闭包原则</strong>（CCP）：微服务的闭包原则就是当我们需要改变一个微服务的时候，所有依赖都在这个微服务的组件内，不需要修改其他微服务</li><li><strong>服务自治、接口隔离</strong>原则：尽量消除对其他服务的强依赖，这样可以降低沟通成本，提升服务稳定性。服务通过标准的接口隔离，隐藏内部实现细节。这使得服务可以独立开发、测试、部署、运行，以服务为单位持续交付。</li><li><strong>持续演进</strong>原则：在服务拆分的初期，你其实很难确定服务究竟要拆成什么样。应逐步划分，持续演进，<strong>避免服务数量的爆炸性增长</strong>。</li><li>拆分的过程尽量<strong>避免影响产品的日常功能迭代</strong>：也就是说要一边做产品功能迭代，一边完成服务化拆分。比如<strong>优先剥离比较独立的边界服务</strong>（如短信服务等），从非核心的服务出发减少拆分对现有业务的影响，也给团队一个练习、试错的机会。同时<strong>当两个服务存在依赖关系时优先拆分被依赖的服务</strong>。</li><li><strong>服务接口的定义要具备可扩展性</strong>：比如微服务的接口因为升级把之前的三个参数改成了四个，上线后导致调用方大量报错，推荐做法服务接口的参数类型最好是封装类，这样如果增加参数就不必变更接口的签名</li><li><strong>避免环形依赖与双向依赖</strong>：尽量不要有服务之间的环形依赖或双向依赖，原因是存在这种情况说明我们的<strong>功能边界</strong>没有化分清楚或者有通用的功能没有下沉下来。</li><li><strong>阶段性合并</strong>：随着你对业务领域理解的逐渐深入或者业务本身逻辑发生了比较大的变化，亦或者之前的拆分没有考虑的很清楚，导致拆分后的服务边界变得越来越混乱，这时就要<strong>重新梳理领域边界，不断纠正拆分的合理性</strong>。</li><li><strong>自动化驱动</strong>：部署和运维的成本会随着服务的增多呈指数级增长，每个服务都需要部署、监控、日志分析等运维工作，成本会显著提升。因此，在服务划分之前，应该首先构建自动化的工具及环境。开发人员应该以自动化为驱动力，简化服务在创建、开发、测试、部署、运维上的重复性工作，通过工具实现更可靠的操作，避免微服务数量增多带来的开发、管理复杂度问题。</li></ul><h1>微服务拆分策略</h1><h2 id="功能维度拆分策略">功能维度拆分策略</h2><p>大的原则是基于业务复杂度拆分服务：<strong>业务复杂度足够高，应该基于领域驱动拆分服务。业务复杂度较低，选择基于数据驱动拆分服务</strong></p><ul><li><strong>基于数据驱动</strong>拆分服务：自下而上的架构设计方法，通过分析需求，确定整体数据结构，<strong>根据表之间的关系拆分服务</strong>。<ul><li>拆分步骤：需求分析，抽象数据结构，划分服务，确定调用关系和业务流程验证。</li></ul></li><li><strong>基于领域驱动</strong>拆分服务：自上而下的架构设计方法，通过和领域专家建立统一的语言，不断交流，<strong>确定关键业务场景，逐步确定边界上下文</strong>。领域驱动更强调业务实现效果，认为自下而上的设计可能会导致技术人员不能更好地理解业务方向，进而偏离业务目标。<ul><li>拆分步骤：通过模型和领域专家建立统一语言，业务分析，寻找聚合，确定服务调用关系，业务流程验证和持续优化。</li></ul></li><li><strong>从已有单体架构中逐步拆分服务</strong><ul><li>拆分步骤：前后端分离，提取公共基础服务（如授权服务，分布式ID服务），不断从老系统抽取服务，垂直划分优先，适当水平切分</li></ul></li></ul><p>以上几种拆分方式不是多选一，而是可以<strong>根据实际情况自由排列组合</strong>。<br><strong>拆分不仅仅是架构上的调整，也意味着要在组织结构上做出相应的适应性优化，以确保拆分后的服务由相对独立的团队负责维护。</strong></p><h2 id="非功能维度拆分策略">非功能维度拆分策略</h2><p>主要考虑六点：<strong>扩展性、复用性、高性能、高可用、安全性、异构性</strong></p><ul><li><strong>扩展性</strong>：<strong>区分系统中变与不变的部分</strong>，不变的部分一般是成熟的、通用的服务功能，变的部分一般是改动比较多、满足业务迭代扩展性需要的功能，我们可以将不变的部分拆分出来，作为共用的服务，将变的部分独立出来满足个性化扩展需要同时根据二八原则，系统中经常变动的部分大约只占&nbsp;20%，而剩下的&nbsp;80%&nbsp;基本不变或极少变化，这样的拆分也解决了发布频率过多而影响成熟服务稳定性的问题。</li><li><strong>复用性</strong>：不同的业务里或服务里经常会出现<strong>重复的功能</strong>，比如每个服务都有鉴权、限流、安全及日志监控等功能，可以将这些通过的功能拆分出来形成独立的服务。</li><li><strong>高性能</strong>：将性能要求高或者性能压力大的模块拆分出来，<strong>避免性能压力大的服务影响其它服务</strong>。<ul><li>我们也可以基于<strong>读写分离</strong>来拆分，比如电商的商品信息，在&nbsp;App&nbsp;端主要是商品详情有大量的读取操作，但是写入端商家中心访问量确很少。因此可以对流量较大或较为核心的服务做读写分离，拆分为两个服务发布，一个负责读，另外一个负责写。</li><li><strong>数据一致性</strong>是另一个基于性能维度拆分需要考虑的点，<strong>对于强一致的数据，属于强耦合，尽量放在同一个服务中</strong>（但是有时会因为各种原因需要进行拆分，那就需要有相应的机制进行保证），弱一致性通常可以拆分为不同的服务。</li></ul></li><li><strong>高可用</strong>：将可靠性要求高的核心服务和可靠性要求低的非核心服务拆分开来，然后<strong>重点保证核心服务的高可用</strong>。具体拆分的时候，核心服务可以是一个也可以是多个，只要最终的服务数量满足“三个火枪手”的原则就可以。</li><li><strong>安全性</strong>：不同的服务可能对信息安全有不同的要求，因此把需要<strong>高度安全的服务拆分出来</strong>，进行区别部署，比如设置特定的&nbsp;DMZ&nbsp;区域对服务进行分区部署，可以更有<strong>针对性地满足信息安全的要求</strong>，也可以降低对防火墙等安全设备吞吐量、并发性等方面的要求，降低成本，提高效率。</li><li><strong>异构性</strong>：对于对开发语言种类有要求的业务场景，可以用<strong>不同的语言</strong>将其功能独立出来实现一个独立服务。</li></ul><h1>拆分注意的风险</h1><ul><li>不打无准备之仗：开发团队是否具备足够的经验，<strong>能否驾驭微服务的技术栈</strong>，可能是第一个需要考虑的点。</li><li><strong>不断纠正</strong>：我们需要承认我们的认知是有限的，只能基于目前的业务状态和有限的对未来的预测来制定出一个相对合适的拆分方案，而不是所谓的最优方案，任何方案都只能保证在当下提供了相对合适的粒度和划分原则，要时刻做好在未来的末一个时刻会变得不和时宜、需要再次调整的准备。</li><li>要做行动派，而不是理论派：在具体怎么拆分上，也不要太纠结于是否合适，<strong>如果拆了之后发现真的不合适，在重新调整就好了</strong>。如果要灵活调整，可以针对服务化架构搭建起一套完整的能力体系，比如服务治理平台、数据迁移工具、数据双写等等</li><li>服务只拆不合：<ul><li><strong>拆相当于我们开发代码，合相当于重构代码</strong>。随着我们对应用程序领域的了解越来越深，它们需要随着时间的推移而变化。</li><li>人员和服务数量的不匹配，导致的<strong>维护成本</strong>增加，也是导致服务合并的一个重要原因。</li><li>如果<strong>微服务数量过多和资源不匹配</strong>，则可以考虑合并多个微服务到服务包，部署到一台服务器，这样可以节省服务运行时的基础资源消耗也降低了维护成本。需要注意的是，<strong>虽然服务包是运行在一个进程中，但是服务包内的服务依然要满足微服务定义</strong>，以便在未来某一天要重新拆开的时候可以很快就分离</li></ul></li></ul><h1>总结梳理</h1><h2 id="微服务拆分时机">微服务拆分时机</h2><p><strong>业务规模、团队规模、技术储备、人才储备、研发效率</strong></p><h2 id="微服务拆分原则">微服务拆分原则</h2><ul><li><p>单一服务内部功能<strong>高内聚低耦合</strong></p></li><li><p><strong>闭包原则</strong>（CCP）</p></li><li><p><strong>服务自治、接口隔离</strong>原则</p></li><li><p><strong>持续演进</strong>原则</p></li><li><p><strong>避免影响产品的日常功能迭代</strong></p></li><li><p><strong>服务接口的定义要具备可扩展性</strong></p></li><li><p><strong>避免环形依赖与双向依赖</strong></p></li><li><p><strong>阶段性合并</strong></p></li><li><p><strong>自动化驱动</strong></p></li></ul><h2 id="功能维度拆分策略：领域驱动、数据驱动、单体拆分">功能维度拆分策略：领域驱动、数据驱动、单体拆分</h2><ul><li><p><strong>业务复杂度足够高：基于领域驱动拆分服务</strong></p></li><li><p><strong>业务复杂度较低：基于数据驱动拆分服务</strong></p></li></ul><h2 id="非功能维度拆分策略：扩展性、复用性、高性能、高可用、安全性、异构性">非功能维度拆分策略：<strong>扩展性、复用性、高性能、高可用、安全性、异构性</strong></h2><h2 id="拆分注意的风险">拆分注意的风险</h2><ul><li><p><strong>能否驾驭微服务的技术栈</strong></p></li><li><p><strong>不断纠正</strong></p></li><li><p><strong>不要纠结怎么拆，先拆了再说，发现不合适再重新调整</strong></p></li><li><p><strong>如果拆了之后发现真的不合适，在重新调整就好了</strong>：合并后的包内服务也要满足微服务定义（DDD），以便日后拆分</p></li></ul><p><strong>微服务架构注意事项</strong></p><ul><li><p>使用 RequestInterceptor 接口设置请求头传递 memberId</p></li><li><p>Skywalking + ELK</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;微服务拆分时机&lt;/h1&gt;
&lt;p&gt;微服务不仅仅是技术的升级，更是开发方式、组织架构、开发观念的转变。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;业务规模&lt;/strong&gt;：业务模式得到市场的验证，需要进一步加快脚步快速占领市场，这时业务的规模变得越来越大，按产品生命周期来划</summary>
      
    
    
    
    <category term="电商系统" scheme="https://jxch.github.io/categories/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="微服务拆分" scheme="https://jxch.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86/"/>
    
  </entry>
  
</feed>

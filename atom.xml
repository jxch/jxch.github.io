<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PA &amp; CODING</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="https://jxch.github.io/atom.xml" rel="self"/>
  
  <link href="https://jxch.github.io/"/>
  <updated>2023-05-11T02:38:13.933Z</updated>
  <id>https://jxch.github.io/</id>
  
  <author>
    <name>钱不寒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-14.最长公共前缀</title>
    <link href="https://jxch.github.io/2023/05/11/leetcode/leetcode-14-zui-chang-gong-gong-qian-zhui/"/>
    <id>https://jxch.github.io/2023/05/11/leetcode/leetcode-14-zui-chang-gong-gong-qian-zhui/</id>
    <published>2023-05-11T02:30:07.000Z</published>
    <updated>2023-05-11T02:38:13.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p><blockquote><p>示例 1：<br>输入：strs = [“flower”,“flow”,“flight”]<br>输出：“fl”</p></blockquote><blockquote><p>示例 2：<br>输入：strs = [“dog”,“racecar”,“car”]<br>输出：“”<br>解释：输入不存在公共前缀。</p></blockquote><blockquote><p>提示：<br>1 &lt;= strs.length &lt;= 200<br>0 &lt;= strs[i].length &lt;= 200<br>strs[i] 仅由小写英文字母组成</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                ans <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>commonprefix<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;br&gt;
如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1：&lt;br&gt;
输入：strs = [“flower”,“flow”,“flight”]&lt;b</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-13.罗马数字转整数</title>
    <link href="https://jxch.github.io/2023/05/11/leetcode/leetcode-13-luo-ma-shu-zi-zhuan-zheng-shu/"/>
    <id>https://jxch.github.io/2023/05/11/leetcode/leetcode-13-luo-ma-shu-zi-zhuan-zheng-shu/</id>
    <published>2023-05-11T02:23:31.000Z</published>
    <updated>2023-05-11T02:30:32.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><pre class="line-numbers language-none"><code class="language-none">字符          数值I             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><blockquote><p>示例 1:<br>输入: s = “III”<br>输出: 3</p></blockquote><blockquote><p>示例 2:<br>输入: s = “IV”<br>输出: 4</p></blockquote><blockquote><p>示例 3:<br>输入: s = “IX”<br>输出: 9</p></blockquote><blockquote><p>示例 4:<br>输入: s = “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.</p></blockquote><blockquote><p>示例 5:<br>输入: s = “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p></blockquote><blockquote><p>提示：<br>1 &lt;= s.length &lt;= 15<br>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)<br>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内<br>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<br>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。<br>关于罗马数字的详尽书写规则，可以参考<a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics</a> 。</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'I'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'IV'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'IX'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'XL'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'XC'</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'CD'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'CM'</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> n <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;字符         </summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-12.整数转罗马数字</title>
    <link href="https://jxch.github.io/2023/05/11/leetcode/leetcode-12-zheng-shu-zhuan-luo-ma-shu-zi/"/>
    <id>https://jxch.github.io/2023/05/11/leetcode/leetcode-12-zheng-shu-zhuan-luo-ma-shu-zi/</id>
    <published>2023-05-11T02:17:09.000Z</published>
    <updated>2023-05-11T02:30:35.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><pre class="line-numbers language-none"><code class="language-none">字符          数值I             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><blockquote><p>示例 1:<br>输入: num = 3<br>输出: “III”</p></blockquote><blockquote><p>示例 2:<br>输入: num = 4<br>输出: “IV”</p></blockquote><blockquote><p>示例 3:<br>输入: num = 9<br>输出: “IX”</p></blockquote><blockquote><p>示例 4:<br>输入: num = 58<br>输出: “LVIII”<br>解释: L = 50, V = 5, III = 3.</p></blockquote><blockquote><p>示例 5:<br>输入: num = 1994<br>输出: “MCMXCIV”<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p></blockquote><blockquote><p>提示：<br>1 &lt;= num &lt;= 3999</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 使用哈希表，按照从大到小顺序排列</span>        hashmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">:</span><span class="token string">'CM'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">:</span><span class="token string">'CD'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">:</span><span class="token string">'XC'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token string">'XL'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token string">'IX'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token string">'IV'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token string">'I'</span><span class="token punctuation">}</span>        res <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> hashmap<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">//</span> key <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> num <span class="token operator">//</span> key  <span class="token comment"># 比如输入4000，count 为 4</span>                res <span class="token operator">+=</span> hashmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">*</span> count                 num <span class="token operator">%=</span> key        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;字符         </summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-11.盛最多水的容器</title>
    <link href="https://jxch.github.io/2023/05/11/leetcode/leetcode-11-sheng-zui-duo-shui-de-rong-qi/"/>
    <id>https://jxch.github.io/2023/05/11/leetcode/leetcode-11-sheng-zui-duo-shui-de-rong-qi/</id>
    <published>2023-05-11T02:10:55.000Z</published>
    <updated>2023-05-11T02:15:23.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>返回容器可以储存的最大水量。<br>说明：你不能倾斜容器。</p><blockquote><p>示例 1：<br>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：容器能够容纳水的最大值为 49 (8和7, 7*7=49)。</p></blockquote><blockquote><p>示例 2：<br>输入：height = [1,1]<br>输出：1</p></blockquote><blockquote><p>提示：<br>$n == height.length$<br>$2 &lt;= n &lt;= 10^5$<br>$0 &lt;= height[i] &lt;= 10^4$</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            area <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> area<span class="token punctuation">)</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。&lt;br&gt;
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;br&gt;
返回容</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>powershell-导出壁纸缓存图片</title>
    <link href="https://jxch.github.io/2023/05/11/coding/powershell-dao-chu-bi-zhi-huan-cun-tu-pian/"/>
    <id>https://jxch.github.io/2023/05/11/coding/powershell-dao-chu-bi-zhi-huan-cun-tu-pian/</id>
    <published>2023-05-11T01:43:37.000Z</published>
    <updated>2023-05-11T01:56:51.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="export-wallper-ps1">export_wallper.ps1</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[CmdletBinding()]</span><span class="token keyword">Param</span><span class="token punctuation">(</span>    <span class="token namespace">[bool]</span> <span class="token variable">$init</span><span class="token punctuation">)</span><span class="token variable">$link_target</span> = <span class="token string">'C:\Users\xiche\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets'</span><span class="token variable">$link_dir</span> = <span class="token string">'D:\xiche\Pictures\wallper'</span><span class="token variable">$link_files</span> = <span class="token string">'D:\xiche\Pictures\wallper\*'</span><span class="token variable">$export_dir</span> = <span class="token string">'D:\xiche\Pictures\wallper_export'</span><span class="token variable">$export_files</span> = <span class="token string">'D:\xiche\Pictures\wallper_export\*'</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$link_dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Remove-Item</span> <span class="token variable">$link_dir</span> <span class="token operator">-</span>Recurse    <span class="token punctuation">}</span>    <span class="token function">New-Item</span> <span class="token operator">-</span>ItemType Junction <span class="token operator">-</span>Target <span class="token variable">$link_target</span> <span class="token operator">-</span>Path <span class="token variable">$link_dir</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$export_dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Remove-Item</span> <span class="token variable">$export_dir</span> <span class="token operator">-</span>Recurse    <span class="token punctuation">}</span>    <span class="token function">New-Item</span> <span class="token variable">$export_dir</span> <span class="token operator">-</span><span class="token function">Type</span> Directory<span class="token punctuation">}</span><span class="token function">Copy-Item</span> <span class="token variable">$link_files</span> <span class="token operator">-</span>Destination <span class="token variable">$export_dir</span><span class="token function">Get-ChildItem</span> <span class="token variable">$export_files</span> <span class="token punctuation">|</span> <span class="token function">Rename-Item</span> <span class="token operator">-</span>NewName <span class="token punctuation">{</span> <span class="token variable">$_</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用法">用法</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">export_wallper<span class="token punctuation">.</span>ps1 <span class="token operator">-</span>init <span class="token boolean">$True</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;export-wallper-ps1&quot;&gt;export_wallper.ps1&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-powershell&quot; data-language=&quot;powershell&quot;&gt;&lt;code class=&quot;la</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="powershell" scheme="https://jxch.github.io/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>WIN-命令行模式使用天翼云盘</title>
    <link href="https://jxch.github.io/2023/05/10/yun-wei/win-ming-ling-xing-mo-shi-shi-yong-tian-yi-yun-pan/"/>
    <id>https://jxch.github.io/2023/05/10/yun-wei/win-ming-ling-xing-mo-shi-shi-yong-tian-yi-yun-pan/</id>
    <published>2023-05-10T14:12:43.000Z</published>
    <updated>2023-05-10T14:19:14.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">winget <span class="token function">install</span> tickstep.cloudpan189-go <span class="token parameter variable">-l</span> D:<span class="token punctuation">\</span>Programs<span class="token punctuation">\</span>cloudpan189-go --accept-package-agreements<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用">使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">help</span><span class="token comment"># 登录</span>login<span class="token comment"># 修改下载目录</span>config <span class="token builtin class-name">set</span> <span class="token parameter variable">-savedir</span> D:<span class="token punctuation">\</span>xiche<span class="token punctuation">\</span>下载<span class="token function">ls</span><span class="token builtin class-name">cd</span><span class="token comment"># 下载文件</span>d xxx.xx<span class="token comment"># 上传文件</span>u xxx.xx<span class="token comment"># 秒传文件</span>ru xxx.xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;winget &lt;span class=&quot;token funct</summary>
      
    
    
    
    <category term="运维手册" scheme="https://jxch.github.io/categories/%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="WIN" scheme="https://jxch.github.io/tags/WIN/"/>
    
    <category term="cloudpan189-go" scheme="https://jxch.github.io/tags/cloudpan189-go/"/>
    
  </entry>
  
  <entry>
    <title>python-线程池</title>
    <link href="https://jxch.github.io/2023/05/10/coding/python-xian-cheng-chi/"/>
    <id>https://jxch.github.io/2023/05/10/coding/python-xian-cheng-chi/</id>
    <published>2023-05-10T07:28:32.000Z</published>
    <updated>2023-05-10T07:31:51.117Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> ALL_COMPLETEDpool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>the_function<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token keyword">for</span> the_task <span class="token keyword">in</span> all_tasks<span class="token punctuation">]</span><span class="token comment"># 阻塞等待所有任务执行完</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> return_when<span class="token operator">=</span>ALL_COMPLETED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; concu</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="python" scheme="https://jxch.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-partially initialized module &#39;charset_normalizer&#39; has no attribute &#39;md__mypyc&#39;</title>
    <link href="https://jxch.github.io/2023/05/10/coding/tensorflow-partially-initialized-module-charset-normalizer-has-no-attribute-md-mypyc/"/>
    <id>https://jxch.github.io/2023/05/10/coding/tensorflow-partially-initialized-module-charset-normalizer-has-no-attribute-md-mypyc/</id>
    <published>2023-05-09T18:06:06.000Z</published>
    <updated>2023-05-09T18:07:10.737Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-U</span> --force-reinstall charset-normalizer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;sp</summary>
      
    
    
    
    <category term="排错笔记" scheme="https://jxch.github.io/categories/%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="tensorflow" scheme="https://jxch.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>vue3-打包静态页面后显示空白页且页面没有挂载任何元素</title>
    <link href="https://jxch.github.io/2023/05/08/coding/vue3-da-bao-jing-tai-ye-mian-hou-xian-shi-kong-bai-ye-qie-ye-mian-mei-you-gua-zai-ren-he-yuan-su/"/>
    <id>https://jxch.github.io/2023/05/08/coding/vue3-da-bao-jing-tai-ye-mian-hou-xian-shi-kong-bai-ye-qie-ye-mian-mei-you-gua-zai-ren-he-yuan-su/</id>
    <published>2023-05-08T01:20:50.000Z</published>
    <updated>2023-05-08T01:22:55.641Z</updated>
    
    <content type="html"><![CDATA[<p>将 <code>vue</code> 文件中 <code>&lt;script setup&gt;</code> 里的 <code>setup</code> 删除，只保留 <code>&lt;script&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将 &lt;code&gt;vue&lt;/code&gt; 文件中 &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; 里的 &lt;code&gt;setup&lt;/code&gt; 删除，只保留 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="排错笔记" scheme="https://jxch.github.io/categories/%E6%8E%92%E9%94%99%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="vue" scheme="https://jxch.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>python-日期迭代器</title>
    <link href="https://jxch.github.io/2023/05/06/coding/python-ri-qi-die-dai-qi/"/>
    <id>https://jxch.github.io/2023/05/06/coding/python-ri-qi-die-dai-qi/</id>
    <published>2023-05-06T01:19:41.000Z</published>
    <updated>2023-05-06T01:38:31.254Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">date_range</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    range_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    d <span class="token operator">=</span> begin    delta <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> d <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>        range_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        d <span class="token operator">+=</span> delta    <span class="token keyword">return</span> range_listbegin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span>date_range<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; dat</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="python" scheme="https://jxch.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cufflinks-绘制K线图</title>
    <link href="https://jxch.github.io/2023/05/06/coding/cufflinks-hui-zhi-k-xian-tu/"/>
    <id>https://jxch.github.io/2023/05/06/coding/cufflinks-hui-zhi-k-xian-tu/</id>
    <published>2023-05-06T00:28:42.000Z</published>
    <updated>2023-05-06T01:35:43.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-cufflinks">安装 cufflinks</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> cufflinks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="绘制K线图">绘制K线图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> yfinance <span class="token keyword">as</span> yf<span class="token keyword">import</span> cufflinks <span class="token keyword">as</span> cfcf<span class="token punctuation">.</span>set_config_file<span class="token punctuation">(</span>offline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> world_readable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> yf<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">'QQQ'</span><span class="token punctuation">,</span> <span class="token string">'2022-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-05-06'</span><span class="token punctuation">)</span>qf <span class="token operator">=</span> cf<span class="token punctuation">.</span>QuantFig<span class="token punctuation">(</span>data<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'QQQ'</span><span class="token punctuation">,</span> legend<span class="token operator">=</span><span class="token string">'top'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'QQQ'</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>add_volume<span class="token punctuation">(</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>add_ema<span class="token punctuation">(</span>periods<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token string">'Close'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>add_trendline<span class="token punctuation">(</span><span class="token string">'2023-01-06'</span><span class="token punctuation">,</span><span class="token string">'2023-03-13'</span><span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'low'</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>add_resistance<span class="token punctuation">(</span><span class="token string">'2022-08-16'</span><span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'high'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'toend'</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>add_support<span class="token punctuation">(</span><span class="token string">'2022-10-13'</span><span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'low'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'toend'</span><span class="token punctuation">)</span>qf<span class="token punctuation">.</span>iplot<span class="token punctuation">(</span>up_color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>down_color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剔除周六周日">剔除周六周日</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">fig <span class="token operator">=</span> qf<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>up_color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>down_color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>update_xaxes<span class="token punctuation">(</span>rangebreaks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">(</span>bounds<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"sat"</span><span class="token punctuation">,</span> <span class="token string">"mon"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="剔除所有非交易日">剔除所有非交易日</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">date_range</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    range_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    d <span class="token operator">=</span> begin    delta <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> d <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>        range_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        d <span class="token operator">+=</span> delta    <span class="token keyword">return</span> range_listbegin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取所有日期</span>dr <span class="token operator">=</span> date_range<span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span>dr_str <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 获取所有交易日</span>data_str <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 获取所有非交易日</span>s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> data_str<span class="token punctuation">,</span>dr_str<span class="token punctuation">)</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> qf<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>up_color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span>down_color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>update_xaxes<span class="token punctuation">(</span>    rangebreaks<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token builtin">dict</span><span class="token punctuation">(</span>values<span class="token operator">=</span>s<span class="token punctuation">)</span>  <span class="token comment"># 剔除所有非交易日</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装-cufflinks&quot;&gt;安装 cufflinks&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;pip &lt;span c</summary>
      
    
    
    
    <category term="使用手册" scheme="https://jxch.github.io/categories/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="cufflinks" scheme="https://jxch.github.io/tags/cufflinks/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-10.正则表达式匹配</title>
    <link href="https://jxch.github.io/2023/05/05/leetcode/leetcode-10-zheng-ze-biao-da-shi-pi-pei/"/>
    <id>https://jxch.github.io/2023/05/05/leetcode/leetcode-10-zheng-ze-biao-da-shi-pi-pei/</id>
    <published>2023-05-05T10:58:02.000Z</published>
    <updated>2023-05-05T11:03:38.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干">题干</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p><ul><li>‘.’ 匹配任意单个字符</li><li>‘*’ 匹配零个或多个前面的那一个元素</li></ul><p>所谓匹配，是要涵盖整个字符串 s 的，而不是部分字符串。</p><blockquote><p>示例 1：<br>输入：s = “aa”, p = “a”<br>输出：false<br>解释：“a” 无法匹配 “aa” 整个字符串。</p></blockquote><blockquote><p>示例 2:<br>输入：s = “aa”, p = “a*”<br>输出：true<br>解释：因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。</p></blockquote><blockquote><p>示例 3：<br>输入：s = “ab”, p = “.<em>"<br>输出：true<br>解释：".</em>” 表示可匹配零个或多个（‘*’）任意字符（‘.’）。</p></blockquote><blockquote><p>提示：<br>1 &lt;= s.length &lt;= 20<br>1 &lt;= p.length &lt;= 20<br>s 只包含从 a-z 的小写字母。<br>p 只包含从 a-z 的小写字母，以及字符 . 和 *。<br>保证每次出现字符 * 时，前面都匹配到有效的字符</p></blockquote><h2 id="python">python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment"># 状态更新</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment"># 滚动数组</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    dp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">elif</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">and</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                        dp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            dp <span class="token operator">=</span> dp2                        <span class="token comment"># 滚动数组</span>            <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment"># 提前结束</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干&quot;&gt;题干&lt;/h2&gt;
&lt;p&gt;给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘.’ 匹配任意单个字符&lt;/li&gt;
&lt;li&gt;‘*’ 匹配零个或多个前面的那一个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://jxch.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://jxch.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-Cohen-Sutherland直线裁剪算法</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-cohen-sutherland-zhi-xian-cai-jian-suan-fa/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-cohen-sutherland-zhi-xian-cai-jian-suan-fa/</id>
    <published>2023-05-05T10:36:40.000Z</published>
    <updated>2023-05-05T10:40:19.532Z</updated>
    
    <content type="html"><![CDATA[<p>在二维观察中，需要在观察坐标系下根据窗口大小对二维图形进行裁剪（clipping），只将位于窗口内的图形变换到视区输出。直线段裁剪是二维图形裁剪的基础，<strong>裁剪的实质是判断直线段是否与窗口相交，如相交则进一步确定直线段上位于窗口内的部分。</strong></p><h2 id="编码原理">编码原理</h2><p>Cohen-Sutherland直线段裁剪算法是最早流行的编码算法。<strong>每段直线的端点都被赋予一组四位二进制代码</strong>，称为区域编码(region code，RC)，用来<strong>标识直线段端点相对于窗口边界及其延长线的位置。</strong><br>假设窗口是标准矩形，由上、下、左、右4条边界组成，延长窗口的4条边界形成9个区域。这样根据直线段的任一端点P(x，y)所处的窗口区域位置，可以赋予一组4位二进制编码，称为区域码RC=C3C2C1C0。C0代表左边界， C1代表右边界， C2代表下边界， C3代表上边界。<br><img src="/static/IT/Graphics/Cohen-Sutherland-1.png" alt=""><br>为了保证窗口内及窗口边界上直线段端点的编码为零，定义规则如下：<br>C0：若端点的 x &lt; wxl，则C0=1，否则C0=0。<br>C1：若端点的x &gt; wxr，则C1=1，否则C1=0。<br>C2：若端点的y &lt; wyb，则C2=1，否则C2=0。<br>C3：若端点的y &gt; wyt，则C3=1，否则C3=0。</p><h2 id="裁剪步骤">裁剪步骤</h2><ol><li>若直线段的两个端点的区域编码都为0，有<strong>RC0|RC1=0</strong>（二者按位相或的结果为零，即<strong>RC0=0且RC1=0</strong>），说明直线段的两个端点都在窗口内，应“<strong>简取</strong>”之（trivally accepted）。</li><li>若直线段的两个端点的区域编码都不为0，且<strong>RC0&amp;RC1≠0</strong>（二者按位相与的结果不为零，即<strong>RC0≠0且RC1≠0</strong>），说明直线段位于窗外的同一侧，或左方、或右方、或上方、或下方，应“<strong>简弃</strong>”之（trivally rejected） 。</li><li>若直线段既不满足“简取”也不满足“简弃”的条件，则需要与窗口进行“<strong>求交</strong>”判断。这时，<strong>直线段必然与窗口边界或窗口边界的延长线相交</strong>，<strong>分两种情况处理</strong>。</li></ol><p><img src="/static/IT/Graphics/Cohen-Sutherland-2.png" alt=""><br>P0点的编码为0010。P1点编码为0000。交点P在窗口边界上，编码为0000。 根据编码判断PP1被简取。<br>Cohen-sutherland算法的关键技术：在于<strong>总是要让直线段的一个顶点处于窗口之外</strong>，例如P0点。这样P0点到交点P的直线段必然不可见，故可以直接抛弃。<br><img src="/static/IT/Graphics/Cohen-Sutherland-3.png" alt=""><br>直线段必然与窗口边界或窗口边界的延长线相交，分两种情况处理。<br><img src="/static/IT/Graphics/Cohen-Sutherland-4.png" alt=""><br>裁剪直线段时，一般按固定顺序**左（x=wxl），右（x=wxr）、下（y=wyb）、上（y=wyt）**求解窗口边界与直线段的交点。</p><h2 id="交点计算公式">交点计算公式</h2><p>对于端点坐标为 $P0(x0，y0)$ 和 $P1(x1，y1)$ 的直线段，<br>与窗口左边界（x＝wxl）或右边界（x＝wxr）交点的y坐标的计算公式为<br>$y = k(x-x_0)+y_0$<br>与窗口上边界（y＝wyt）或下边界（y＝wyb）交点的x坐标的计算公式为<br>$x = \frac{y-y_0}{k} + x_0$<br>其中，$k = \frac{y_1-y_0}{x_1-x_0}$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在二维观察中，需要在观察坐标系下根据窗口大小对二维图形进行裁剪（clipping），只将位于窗口内的图形变换到视区输出。直线段裁剪是二维图形裁剪的基础，&lt;strong&gt;裁剪的实质是判断直线段是否与窗口相交，如相交则进一步确定直线段上位于窗口内的部分。&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-Liang-Barsky直线段裁剪算法</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-liang-barsky-zhi-xian-duan-cai-jian-suan-fa/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-liang-barsky-zhi-xian-duan-cai-jian-suan-fa/</id>
    <published>2023-05-05T10:19:30.000Z</published>
    <updated>2023-05-05T10:35:17.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数化算法-Cyrus-Beck">参数化算法(Cyrus-Beck)</h2><p>考虑凸多边形区域R和直线段 $P1P2：P(t)=(P2-P1)*t+P1$<br>设A是区域R的边界上一点，N是区域边界在A点的内法线向量<br><img src="/static/IT/Graphics/Liang-Barsky-1.png" alt=""><br>则对于线段P1P2上任一点P(t)<br>$N ·(P(t)-A)&lt; 0 \to 外侧$<br>$N ·(P(t)-A)&gt;0 \to 内侧$<br>$N ·(P(t)-A)=0 \to 边界或其延长线上$<br>凸多边形的性质：点P(t)在凸多边形内的<strong>充要条件</strong>是，对于凸多边形边界上任意一点A和该点处内法向N，都有N·(P(t)-A)&gt;0</p><p>k条边的多边形，可见线段参数区间的解:<br>$Ni· (p(t)-Ai)&gt;=0, i=0,…,k, 0≤t ≤1.$<br>即：$Ni· (P1-Ai)+ Ni· (P2-P1) t&gt;=0 $<br><img src="/static/IT/Graphics/Liang-Barsky-2.png" alt=""><br>令$ti= Ni· (P1-Ai)/[Ni· (P2-P1) ]$<br>$Ni· (P2-P1) =0-&gt;$ 平行于对应边。<br>此时判断$Ni· (P1-Ai)$<br><strong>若$Ni· (P1-Ai) &lt;0 \to P1 P2在多边形外侧-&gt;不可见$，</strong><br><strong>若$Ni· (P1-Ai) &gt;0 \to  P1 P2在多边形内侧-&gt;继续其它边的判断$</strong><br>对于t值的选择：首先，要符合0≤t≤1；其次，对于凸窗口来说，每一个线段与其至多有两个交点，即有两个相应的t值。所以我们可以把计算出的t值分成两组：一组为下限组，是分布在线段起点一侧的；一组为上限组，是分布在线段终点一侧的。这样，只要找出下限组中的最大值及上限组中的最小值，就可确定线段了。<br>分组的依据是：<br><strong>如果$Ni· (P2-P1) ＜0$，则计算出的值属于上限组</strong><br><strong>如果$Ni· (P2-P1) ＞0$，则计算出的值属于下限组</strong></p><h2 id="参数化算法的几何意义">参数化算法的几何意义</h2><p>上限组以$Ni· (P2-P1) &lt;0$为特征，表示在该处沿P1P2方向前进将越来越远地离开多边形区域。<br>下限组以$Ni· (P2-P1) &gt;0$为特征，表示在该处沿P1P2方向前进将接近或进入多边形内侧。<br><img src="/static/IT/Graphics/Liang-Barsky-3.png" alt=""></p><p>因此，线段可见的交点参数：<br><strong>tl=max{0,max{ti:  Ni· (P2-P1) &gt;0}}</strong><br><strong>tu=min{1,min{ti:  Ni· (P2-P1)&lt;0}}</strong><br>若 $tl &lt;= tu$, <strong>[tl ， tu]是可见线段的交点参数区间</strong>，否则，线段不可见。</p><p>当凸多边形是矩形窗口且矩形的边与坐标轴平行时，该算法退化为Liang-Barsky算法。<br><img src="/static/IT/Graphics/Liang-Barsky-4.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参数化算法-Cyrus-Beck&quot;&gt;参数化算法(Cyrus-Beck)&lt;/h2&gt;
&lt;p&gt;考虑凸多边形区域R和直线段 $P1P2：P(t)=(P2-P1)*t+P1$&lt;br&gt;
设A是区域R的边界上一点，N是区域边界在A点的内法线向量&lt;br&gt;
&lt;img src=&quot;/s</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-三维图形几何变换</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-san-wei-tu-xing-ji-he-bian-huan/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-san-wei-tu-xing-ji-he-bian-huan/</id>
    <published>2023-05-05T10:11:37.000Z</published>
    <updated>2023-05-05T10:18:12.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三维几何变换">三维几何变换</h2><p>同二维变换类似，三维变换同样引入了齐次坐标技术，在四维空间 $(x,y,z,w)$ 内进行讨论。定义了规范化齐次坐标以后，三维图形几何变换就可以表示为物体顶点集合的规范化齐次坐标矩阵与某一变换矩阵相乘的形式。用规范化齐次坐标表示的三维图形几何变换矩阵是一个4×4方阵，简称为三维几何变换矩阵。<br>$$<br>T=\left[<br>\begin{matrix}<br>a &amp; b &amp; c &amp; p\\<br>d &amp; e &amp; f  &amp; q\\<br>g &amp; h &amp; i  &amp; r\\<br>l  &amp; m &amp; n &amp; s<br>\end{matrix}<br>\right]<br>$$</p><p>$P’ = P \cdot T$</p><h3 id="平移变换">平移变换</h3><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>T_x  &amp; T_y &amp; T_z &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h3 id="比例变换">比例变换</h3><p>$$<br>T=\left[<br>\begin{matrix}<br>S_x &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; S_y &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; S_z &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h3 id="旋转变换">旋转变换</h3><h4 id="绕x轴旋转">绕x轴旋转</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; \cos \beta &amp; \sin \beta &amp; 0\\<br>0 &amp; -\sin \beta &amp; \cos \beta &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="绕y轴旋转">绕y轴旋转</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>\cos \beta &amp; 0 &amp; -\sin \beta  &amp; 0\\<br>0 &amp; 1 &amp; 0 &amp; 0\\<br>\sin \beta &amp; 0 &amp; \cos \beta &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="绕z轴旋转">绕z轴旋转</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>\cos \beta &amp; \sin \beta &amp; 0 &amp; 0\\<br>-\sin \beta &amp; \cos \beta &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$<br><strong>β为正向旋转角</strong></p><h3 id="反射变换">反射变换</h3><h4 id="关于x轴的反射">关于x轴的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; -1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; -1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="关于y轴的反射">关于y轴的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>-1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; -1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="关于z轴的反射">关于z轴的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>-1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; -1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="关于xoy面的反射">关于xoy面的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; -1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="关于yoz面的反射">关于yoz面的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>-1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="关于xoz面的反射">关于xoz面的反射</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; -1 &amp; 0  &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h3 id="错切变换">错切变换</h3><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; b &amp; c &amp; 0\\<br>d &amp; 1 &amp; f  &amp; 0\\<br>g &amp; h &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="沿x方向错切">沿x方向错切</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0&amp; 0 &amp; 0\\<br>d &amp; 1 &amp; 0  &amp; 0\\<br>g &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="沿y方向错切">沿y方向错切</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; b &amp; 0 &amp; 0\\<br>0 &amp; 1 &amp; 0  &amp; 0\\<br>0 &amp; h &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p><h4 id="沿z方向错切">沿z方向错切</h4><p>$$<br>T=\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; c &amp; 0\\<br>0 &amp; 1 &amp; f  &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0  &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三维几何变换&quot;&gt;三维几何变换&lt;/h2&gt;
&lt;p&gt;同二维变换类似，三维变换同样引入了齐次坐标技术，在四维空间 $(x,y,z,w)$ 内进行讨论。定义了规范化齐次坐标以后，三维图形几何变换就可以表示为物体顶点集合的规范化齐次坐标矩阵与某一变换矩阵相乘的形式。用规范化齐</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-三维复合变换</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-san-wei-fu-he-bian-huan/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-san-wei-fu-he-bian-huan/</id>
    <published>2023-05-05T10:09:12.000Z</published>
    <updated>2023-05-05T10:09:46.468Z</updated>
    
    <content type="html"><![CDATA[<p>$P’ = P\cdot T = P\cdot T_1\cdot T_2 \ldots T_n$<br>其中，T为复合变换矩阵，$T_1, T_2 \ldots T_n$为<strong>单次基本几何变换矩阵</strong>。</p><h2 id="相对于任一参考点的三维几何变换">相对于任一参考点的三维几何变换</h2><p>在三维基本几何变换中，比例变换和旋转变换是与参考点相关的。相对于任一参考点Q（x,y,z）的比例变换和旋转变换应表达为复合变换形式。变换方法是<strong>首先将参考点平移到坐标原点，相对于坐标原点作比例变换或旋转变换，然后再进行反平移将参考点平移回原位置。</strong></p><h2 id="相对于任意方向的三维几何变换">相对于任意方向的三维几何变换</h2><p>相对于任意方向的变换方法是首先对任意方向做旋转变换，使变换方向与某个坐标轴重合，然后对该坐标轴进行三维基本几何变换，最后做反向旋转变换，将任意方向还原到原来的方向。三维几何变换中需要进行<strong>两次旋转变换</strong>，才能使任意方向与某个坐标轴重合。一般做法是<strong>先将任意方向旋转到某个坐标平面内，然后再旋转到与该坐标平面内的某个坐标轴重合。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;$P’ = P\cdot T = P\cdot T_1\cdot T_2 \ldots T_n$&lt;br&gt;
其中，T为复合变换矩阵，$T_1, T_2 \ldots T_n$为&lt;strong&gt;单次基本几何变换矩阵&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;相对于任一参考点的</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-直线的扫描转换</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-zhi-xian-de-sao-miao-zhuan-huan/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-zhi-xian-de-sao-miao-zhuan-huan/</id>
    <published>2023-05-05T09:58:48.000Z</published>
    <updated>2023-05-05T10:07:49.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直接计算法">直接计算法</h2><p>假定直线的起点、终点分别为：$(x1,y1), (x2,y2)$, 且都为整数。<br>计算出斜率 $k=(y2-y1)/(x2-x1)$ ,<br>在Y轴的截距 $b=y1-k*x1$　<br><img src="/static/IT/Graphics/StraightLine-1.png" alt="直接计算法"></p><p>这样一来，只要给定 x的值，根据解析式立即可以计算出对应的y值，然后输出 $(x,round(y))$。这种方法直观，但<strong>效率太低</strong>，因为每一步需要一次浮点乘法、一次浮点加法和一次舍入运算。</p><h2 id="数值微分法-DDA">数值微分法 (DDA)</h2><p>假定直线的起点、终点分别为：$(x1,y1), (x2,y2)$, 且都为整数。　<br><img src="/static/IT/Graphics/StraightLine-2.png" alt="数值微分法"></p><p>已知过端点 $P0(x1, y1), P1(x2, y2)$ 的直线段L：$y=kx+b$<br>直线斜率为：$k=(y2-y1)/(x2-x1)$<br>考虑当 x 从 $xi \to xi+1$ 时 y 的变化规律：<br>设：<br>$\Delta x = x_{i+1}- x_i$<br>$x_{i+1} = x_i+ \Delta x$</p><p>计算：<br>$y_{i + 1} = kx_{i+1} + b = k(x_i + \Delta x) +b $<br>$= kx_i+b+k\Delta x$<br>$= y_i+k\Delta x$<br>当 $\Delta x =1;y_{i+1} = y_i+k $<br>即：当 x 每递增 1 y 递增 k(即直线斜率)；<br>注意上述分析的算法仅适用于 $|k|≤1$ 的情形。在这种情况下，x每增加1,y最多增加1。<br>当 $|k|&gt;1$ 时，必须把x，y地位互换。</p><p>DDA算法就是一个<strong>增量算法</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DDALine</span><span class="token punctuation">(</span><span class="token keyword">int</span> x0<span class="token punctuation">,</span><span class="token keyword">int</span> y0<span class="token punctuation">,</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x；<span class="token keyword">float</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">;</span>dx<span class="token operator">=</span> x1<span class="token operator">-</span>x0<span class="token punctuation">,</span> dy<span class="token operator">=</span>y1<span class="token operator">-</span>y0<span class="token punctuation">;</span>   k<span class="token operator">=</span>dy<span class="token operator">/</span>dx<span class="token punctuation">,</span> y<span class="token operator">=</span>y0<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token operator">=</span>x0<span class="token punctuation">;</span> x<span class="token operator">&lt;=</span>x1<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">drawpixel</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    y<span class="token operator">=</span>y<span class="token operator">+</span>k<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中点Bresenham算法">中点Bresenham算法</h2><p>原理：每次在主位移方向上走一步，另一个方向上走不走步取决于中点误差项的值。给定理想直线的起点坐标为P0(x0,y0)，终点坐标为P1(x1,y1),则直线的隐函数方程为：<br>$F(x,y) = y - kx - b = 0$<br>其中，直线的斜率：$k = \frac{\Delta y}{\Delta x} = \frac{y_1 - y_0}{x_1 - x_0}$<br>直线水平方向位移：$\Delta x = x_1 - x_0$<br>直线垂直方向位移：$\Delta y = y_1 - y_0$</p><p>理想直线将平面划分成三个区域：对于直线上的点，F(x，y)＝0；对于直线上方的点，F（x，y）＞0；对于直线下方的点，F（x，y）＜0。<br>假设直线的斜率为<strong>0≤k≤1</strong>，则Δx≥Δy，所以确定x方向为主位移方向。按照Bresenham原理，<strong>x方向上每次加1，y方向上加不加1取决于中点误差项的值。</strong><br><img src="/static/IT/Graphics/StraightLine-3.png" alt="中点Bresenham算法"></p><p>假定直线的当前点是P，沿主位移x方向走一步，下一点只能在Pu和Pd两点中选取，Pu和Pd的中点为M。显然，若中点M在理想直线的下方，则Pu点距离直线近，否则选取Pd。（u代表up，上面的像素；d代表down，下面的像素）</p><h3 id="构造中点误差项：">构造中点误差项：</h3><p>$从P_i(x_i,y_i)点出发选取下一像素时，需将P_u和P_d的中点M(x_i＋1,y_i＋0.5)代入隐函数方程，构造中点误差项d_i 。$<br>$d_i = F(x_i+1, y_i+0.5) = y_i+0.5 - k(x_i + 1) - b$</p><ul><li>$y_{i+1} =  y_i + 1 ,   d_i &lt; 0 $</li><li>$y_{i+1} =  y_i ,  d_i \ge 0$</li></ul><h3 id="中点误差项的递推公式">中点误差项的递推公式</h3><ol><li>$当d_i&lt;0时，下一步的中点坐标为M(x_i+2，y_i+1.5)，下一步中点误差项为$<br>$d_{i+1} = F(x_i+2, y_i + 1.5) = y_i+1.5 - k(x_i+2) - b$<br>$ = y_i + 0.5 - k(x_i+1) - b + 1 - k$<br>$ = d_i + 1 - k$</li><li>$当d_i≥0，时下一步的中点坐标为M(x_i+2，y_i+0.5)，下一步中点误差项为$<br>$d_{i+1} = F(x_i+2, y_i + 0.5) = y_i+0.5 - k(x_i+2) - b$<br>$ = y_i + 0.5 - k(x_i+1) - b - k$<br>$ = d_i - k$</li></ol><h3 id="中点误差项的初始值">中点误差项的初始值</h3><p>$直线的起点坐标为P_0(x_0,y_0)，x为主位移方向。因此，第一个中点是M (x_0+1,y_0+0.5)，相应的d_i的初始值为：  $<br>$d_0 = F(x_0+1, y_0 + 0.5) = y_0+0.5 - k(x_0+1) - b$<br>$ = y_0 -kx_0 - b - k + 0.5$<br>$其中，因为（x_0，y_0）在直线上，所以  y_0 -kx_0 - b = 0$<br>$所以 d_0 = 0.5 - k$</p><p>由于使用的是di的符号，可以用$2d_i\Delta x$代替$d_i$来摆脱小数，使得算法只涉及整数运算。现有的研究已经证明：<strong>端点采用整数坐标没有什么益处</strong>，因为现在的CPU可以按照与处理整数同样的速度处理浮点数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;直接计算法&quot;&gt;直接计算法&lt;/h2&gt;
&lt;p&gt;假定直线的起点、终点分别为：$(x1,y1), (x2,y2)$, 且都为整数。&lt;br&gt;
计算出斜率 $k=(y2-y1)/(x2-x1)$ ,&lt;br&gt;
在Y轴的截距 $b=y1-k*x1$　&lt;br&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-圆的扫描转换-中点Bresenham算法</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-yuan-de-sao-miao-zhuan-huan-zhong-dian-bresenham-suan-fa/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-yuan-de-sao-miao-zhuan-huan-zhong-dian-bresenham-suan-fa/</id>
    <published>2023-05-05T09:49:08.000Z</published>
    <updated>2023-05-05T09:56:59.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圆的扫描转换">圆的扫描转换</h2><p>圆的扫描转换是在屏幕像素点阵中确定最佳逼近于理想圆的像素点集的过程。圆的绘制可以使用简单方程画圆算法或极坐标画圆算法，但这些算法涉及开方运算或三角运算，效率很低。<br><strong>仅包含加减运算的顺时针绘制1/8圆的中点Bresenham算法，根据对称性可以绘制整圆 。</strong><br><img src="/static/IT/Graphics/Circle-1.png" alt="圆的扫描转换"></p><p>默认的圆是圆心位于坐标系原点，半径为R的圆。<br>屏幕设备坐标系的原点位于左上角，绘制结果为1/4圆，需要进行圆心平移或使用自定义坐系可以绘制整圆。圆是椭圆的特例，使用椭圆中点Bresenham算法也可绘制。<br><img src="/static/IT/Graphics/Circle-2.png" alt=""></p><h2 id="算法原理">算法原理</h2><p>圆心在原点、半径为R的圆方程的隐函数表达式为：$F(x, y) = x^2 + y^2 - R^2 = 0$<br>圆将平面划分成三个区域：对于圆上的点，F(x，y)＝0；对于圆外的点，F（x，y）＞0；对于圆内的点，F（x，y）＜0。<br>根据圆的对称性，可以用四条对称轴<strong>x＝0，y＝0，x＝y，x＝－y</strong>将圆分成8等份。只要绘制出第一象限内的1/8圆弧，根据对称性就可绘制出整圆，这称为<strong>八分法画圆算法</strong>。<br>假定第一象限内的任意点为P(x,y)，可以顺时针确定另外7个点：P(y,x)，P(y,-x)，P(x,-y)，P(-x,-y)，P(-y,-x)，P(-y, x)，P(-x,y)。<br><img src="/static/IT/Graphics/Circle-3.png" alt="圆的对称性"></p><p>中点Bresenham算法要<strong>从(0,R) 顺时针确定最佳逼近于该段圆弧的像素点集。<strong>此段圆弧的斜率k处处满足</strong>|k|＜1，即|Δx|＞|Δy|</strong>，所以x方向为主位移方向，因此中点Bresenham算法的原理简化如下：<strong>x方向上每次加1，y方向上减不减1取决于中点误差项的值。</strong><br>假定圆上当前点是$P_i(x_i,y_i)$，下一像素只能在$P_u(x_i+1,y_i)$和$P_d(x_i+1,y_i-1)$中选取。$P_u$和$P_d$的中点为$M(x_i+1,y_i-0.5)$显然，若M点在理想圆弧的下方，则$P_u$点离圆弧近，选取$P_u$；否则应选取$P_d$。<br><img src="/static/IT/Graphics/Circle-4.png" alt=""></p><h2 id="构造中点误差项">构造中点误差项</h2><p>从$P(x_i，y_i$）开始，为了进行下一像素点的选取，需将$P_u$和$P_d$的中点$M(x_i+1,y_i-0.5)$代入隐函数，构造中点误差项：<br>$d = F(x_i+1, y_i-0.5) = (x_i+1)^2 + (y_i-0.5)^2 - R^2$<br>当$d_i&lt;0$时，中点M在圆弧内，下一像素点应选取$P_u$，即y方向上不退步；当$d_i&gt;0$时，中点M在圆弧外，下一像素点应选取$P_d$，即y方向上退一步；当$d_i＝0$时，中点M在圆弧上，$P_u、P_d$和圆弧的距离相等，选取$P_u$或$P_d$均可，约定取$P_d$。因此，</p><ul><li>$y_{i+1} =  y_i , d &lt; 0  $</li><li>$y_{i+1} =  y_i - 1 , d \ge 0 $</li></ul><h2 id="中点误差项的递推公式">中点误差项的递推公式</h2><p>现在如果考虑主位移方向再走一步，应该选择哪个中点代入中点误差项以决定下一步应该选取的像素，分两种情况讨论。</p><ol><li>$当d_i&lt;0时，下一步的中点坐标为M(x_i+2，y_i-0.5)，下一步中点误差项为$<br>$d_{i+1} = F(x_i+2, y_i-0.5) = (x_i+2)^2 + (y_i-0.5)^2 - R^2$<br>$ = (x_i+1)^2 + (y_i-0.5)^2 - R^2 + 2x_i + 3$<br>$ = d_i + 2x_i + 3$</li><li>$当d_i≥0时，下一步的中点坐标为M(x_i+2，y_i-1.5)，下一步中点误差项为$<br>$d_{i+1} = F(x_i+2, y_i-1.5) = (x_i+2)^2 + (y_i-1.5)^2 - R^2$<br>$ = (x_i+1)^2 + (y_i-0.5)^2 - R^2 + 2x_i + 3 + (-2y_i + 2)$<br>$ = d_i + 2(x_i - y_i) + 5$</li></ol><h2 id="中点误差项的初始值">中点误差项的初始值</h2><p>圆的起点为$P_0（0，R）$，x为主位移方向。因此，第一个中点是（1，R-0.5），对应的$d_i$的初始值为：<br>$d_0 = F(1, R-0.5) = 1 + (R-0.5)^2 - R^2 = 1.25 - R$</p><h2 id="算法源码">算法源码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d<span class="token punctuation">;</span> d<span class="token operator">=</span><span class="token number">1.25</span><span class="token operator">-</span>R<span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">=</span>R<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">CirclePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用八分法画圆子函数</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>d<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token punctuation">{</span>d<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;圆的扫描转换&quot;&gt;圆的扫描转换&lt;/h2&gt;
&lt;p&gt;圆的扫描转换是在屏幕像素点阵中确定最佳逼近于理想圆的像素点集的过程。圆的绘制可以使用简单方程画圆算法或极坐标画圆算法，但这些算法涉及开方运算或三角运算，效率很低。&lt;br&gt;
&lt;strong&gt;仅包含加减运算的顺时针绘制1/</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-椭圆的扫描转换-中点Bresenham算法</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-tuo-yuan-de-sao-miao-zhuan-huan-zhong-dian-bresenham-suan-fa/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-tuo-yuan-de-sao-miao-zhuan-huan-zhong-dian-bresenham-suan-fa/</id>
    <published>2023-05-05T09:37:21.000Z</published>
    <updated>2023-05-05T09:46:05.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="椭圆的扫描转换">椭圆的扫描转换</h2><p>椭圆的扫描转换是在屏幕像素点阵中选取最佳逼近于理想椭圆像素点集的过程。椭圆是长半轴和短半轴不相等的圆，椭圆的扫描转换与圆的扫描转换有类似之处。本节主要讲解顺时针绘制1/4椭圆的中点Bresenham算法原理，根据对称性可以绘制完整椭圆。<br><img src="/static/IT/Graphics/Oval-1.png" alt="椭圆的扫描转换"><br>默认的椭圆是圆心位于坐标系原点，长半轴为a、短半轴为b的椭圆 。需要进行圆心平移或使用自定义坐标系可以绘制椭圆。<br>如果“x方向上每次加1，y方向上减不减1取决于中点误差项的值”。绘制结果是圆，如何能绘制为椭圆？</p><h2 id="算法原理">算法原理</h2><p>圆心在原点、长半轴为a、短半轴为b的椭圆方程的隐函数表达式为 ：<br>$F(x, y) = b^2x^2+a^2y^2-a^2b^2 = 0$<br>椭圆将平面划分成三个区域：对于椭圆上的点，F(x，y)＝0；对于椭圆外的点，F（x，y）＞0；对于椭圆内的点，F（x，y）＜0。</p><p>考虑到椭圆的对称性，可以用对称轴x＝0，y＝0，把椭圆分成4等份。只要绘制出第一象限内的1/4椭圆弧，根据对称性就可绘制出整个椭圆，这称为<strong>四分法绘制椭圆算法</strong>。已知第一象限内的点P(x,y)，可以顺时针得到另外3个对称点：P(x,-y)，P(-x,-y)和P(-x,y)。<br><img src="/static/IT/Graphics/Oval-2.png" alt="椭圆的对称性"></p><p><img src="/static/IT/Graphics/Oval-3.png" alt="椭圆的法矢量"><br>$N(x, y) = \frac{\partial{F}}{\partial{x}}i + \frac{\partial{F}}{\partial{y}}j = 2b^2xi + 2a^2yj$<br>部分Ⅰ的AC椭圆弧段，法矢量的x向分量小于y向分量，斜率k处处满足|k|＜1，|Δx|＞|Δy|，所以x方向为主位移方向；在C点，法矢量的x向分量等于y向分量，斜率k满足k＝－1，|Δx|＝|Δy|；在部分Ⅱ的CB椭圆弧段，法矢量的x向分量大于y向分量，斜率k处处满足|k|＞1，|Δy|＞|Δx|，所以y方向为主位移方向。<br><strong>在部分Ⅰ</strong>椭圆的中点Bresenham的原理:<strong>每次在主位移x方向上走一步，y方向上退不退步取决于中点误差项的值。在部分Ⅱ：每次在主位移方向y上退一步，x方向上走不走步取决于中点误差项的值。</strong><br><img src="/static/IT/Graphics/Oval-4.png" alt="算法原理"></p><h2 id="构造上半部分Ⅰ的中点误差项">构造上半部分Ⅰ的中点误差项</h2><p>在上半部分Ⅰ，x方向每次加1，y方向上减不减1取决于中点误差项的值。从$P_i(x_i,y_i)$点出发选取下一像素时，需将$P_u(x_i+1，y_i)$和$P_d(x_i+1,y_i-1)$的中点$M(x_i+1,y_i-0.5)$代入隐函数，构造中点误差项：<br>$d_{1i} = F(x_i+1, y_i-0.5) = b^2(x_i+1)^2 + a^2(y_i-0.5)^2 - a^2b^2$<br><img src="/static/IT/Graphics/Oval-5.png" alt="上半部分"><br>当$d_{1i}&lt;0$时，中点M在椭圆内，下一像素点应选取$P_u$，即y方向上不退步；当$d_{1i} &gt;0$时，中点M在椭圆外，下一像素点应选取$P_d$，即y方向上退一步；当$d_{1i}＝0$时，中点M在椭圆上，$P_u、P_d$和椭圆的距离相等，选取$P_u$或$P_d$均可，约定取$P_d$。<br>因此，<br>$$y_{i+1} = \begin{cases} y_i  ,&amp; d_{1i}&lt;0 \ y_i - 1 , &amp; d_{1i} \ge 0<br>\end{cases}<br>$$</p><h3 id="上半部分Ⅰ的递推公式">上半部分Ⅰ的递推公式</h3><p>如果考虑主位移方向再走一步，应该选择哪个中点代入中点误差项以决定下一步应该选取的像素，分两种情况讨论。</p><ol><li>$当d_{1i}&lt;0时，下一步的中点坐标为M(x_i+2，y_i-0.5)，下一步中点误差项为 $<br>$d_{1(i+1)} = F(x_i+2, y_i-0.5) = b^2(x_i+2)^2 + a^2(y_i-0.5)^2 - a^2b^2$<br>$ = b^2(x_i+1)^2 + a^2(y_i-0.5)^2 - a^2b^2 + b^2(2x_i+3)$<br>$ = d_{1i} + b^2(2x_i+3)$</li><li>$当d_{1i}≥0时，下一步的中点坐标为M(x_i+2，y_i-1.5)，下一步中点误差项为 $<br>$d_{1(i+1)} = F(x_i+2, y_i-1.5) = b^2(x_i+2)^2 + a^2(y_i-1.5)^2 - a^2b^2$<br>$ = b^2(x_i+1)^2 + a^2(y_i-0.5)^2 - a^2b^2 + b^2(2x_i+3) + a^2(-2y_i + 2)$</li></ol><h3 id="中点误差项的初始值">中点误差项的初始值</h3><p>上半部分椭圆的起点为A（0，b），因此，第一个中点是（1，b－0.5），对应的$d_{1i}$的初值为<br>$d_{10} = F(1, b-0.5) = b^2 + a^2(b-0.5) - a^2b^2 = b^2 + a^2(-b+0.25)$</p><h2 id="构造下半部分Ⅱ的中点误差项">构造下半部分Ⅱ的中点误差项</h2><p>在下半部分Ⅱ，主位移方向发生变化，中点Bresenham算法原理为：y方向上每次减1，x方向上加1不加1取决于中点误差项的值。从上半部分Ⅰ的终止点$P_i(x_i,y_i)$出发选取下一像素时，需将$P_l(x_i,y_i-1)$和$P_r(x_i+1,y_i-1)$的中点$M(x_i+0.5,y_i-1)$代入隐函数，构造中点误差项<br>$d_{2i} = F(x_i+0.5, y_i-1) = b^2(x_i+0.5)^2 + a^2(y_i-1)^2 - a^2b^2$<br><img src="/static/IT/Graphics/Oval-6.png" alt=""><br>当$d_{2i}&lt;0$时，中点M在椭圆内，下一像素点应选取$P_r$，即x方向上走一步；当$d_{2i}&gt;0$时，中点M在椭圆外，下一像素点应选取$P_l$，即x方向上不走步；当$d_{2i}＝0$时，中点M在椭圆上，$P_l、P_r$和椭圆的距离相等，选取$P_l$或$P_r$均可，约定取$P_l$。 （l代表left，左面的像素；r代表right，右面的像素）</p><h3 id="下半部分Ⅱ的递推公式">下半部分Ⅱ的递推公式</h3><p>现在如果考虑主位移方向再走一步，应该选择哪个中点代入中点误差项以决定应该选取的像素。分两种情况讨论。</p><ol><li>$当d_{2i}&lt;0时，下一步的中点坐标为M(x_i+1.5，y_i-2)，下一步中点误差项为$<br>$d_{2(i+1)} = F(x_i+1.5，y_i-2) = b^2(x_i+1.5)^2 + a^2(y_i-2)^2 - a^2b^2$<br>$ = b^2(x_i+0.5)^2 + a^2(y_i-1)^2 - a^2b^2 + b^2(2x_i+2) + a^2(-2y_i + 3)$<br>$ = d_{2i} + b^2(2x_i+2) + a^2(-2y_i + 3)$</li><li>$当d_{2i}≥0时，下一步的中点坐标为M(x_i+0.5，y_i-2)，下一步中点误差项为$<br>$d_{2(i+1)} = F(x_i+0.5，y_i-2) = b^2(x_i+0.5)^2 + a^2(y_i-2)^2 - a^2b^2$<br>$ = b^2(x_i+0.5)^2 + a^2(y_i-1)^2 - a^2b^2 + a^2(-2y_i + 3)$<br>$ = d_{2i} + a^2(-2y_i + 3)$</li></ol><h3 id="中点误差项的初始值-2">中点误差项的初始值</h3><p>在上半部分Ⅰ，法矢量的x向分量小于y向分量；在C点，法矢量的x向分量等于y向分量；在下半部分Ⅱ，法矢量的x向分量大于y向分量。则对于上半部分椭圆上一点$P(x_i，y_i)$，如果其当前中点$M(x_i+1,y_i-0.5)$，满足x向分量小于y向分量<br>$b^2(x_i+1)^2 &lt; a^2(y_i-0.5)^2$<br>而在下一个中点，不等号改变方向，则说明椭圆从上半部分Ⅰ转入了下半部分Ⅱ。<br><img src="/static/IT/Graphics/Oval-7.png" alt=""></p><p>假定$P_i(x_i,y_i)$点是椭圆上半部分Ⅰ的最后一个像素，$MⅠ(x_i+1,y_i-0.5)$是用于判断选取$P_u$和$P_d$像素的中点。由于下一像素转入了下半部分Ⅱ，其中点改为判断$P_l$和$P_r$的中点$MⅡ(x_i+0.5,y_i-1)$，所以下半部分的初值d<sub>20</sub>为: $d_{20} = b^2(x+0.5)^2 + a^2(y-1)^2 - a^2b^2$</p><hr><h2 id="算法源码">算法源码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">fabs</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token operator">-</span>p0<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token function">fabs</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token operator">-</span>p0<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">=</span>b<span class="token punctuation">;</span>d1<span class="token operator">=</span>b<span class="token operator">*</span>b<span class="token operator">+</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">+</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EllipsePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//椭圆AC弧段</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">*</span>b<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d1<span class="token operator">+=</span>b<span class="token operator">*</span>b<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>d1<span class="token operator">+=</span>b<span class="token operator">*</span>b<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">EllipsePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//椭圆CB弧段</span>d2<span class="token operator">=</span>b<span class="token operator">*</span>b<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token operator">*</span>a<span class="token operator">*</span>b<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d2<span class="token operator">+=</span>b<span class="token operator">*</span>b<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>d2<span class="token operator">+=</span>a<span class="token operator">*</span>a<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token function">EllipsePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;椭圆的扫描转换&quot;&gt;椭圆的扫描转换&lt;/h2&gt;
&lt;p&gt;椭圆的扫描转换是在屏幕像素点阵中选取最佳逼近于理想椭圆像素点集的过程。椭圆是长半轴和短半轴不相等的圆，椭圆的扫描转换与圆的扫描转换有类似之处。本节主要讲解顺时针绘制1/4椭圆的中点Bresenham算法原理，根据对</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学-反走样技术</title>
    <link href="https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-fan-zou-yang-ji-zhu/"/>
    <id>https://jxch.github.io/2023/05/05/ji-suan-ji-tu-xing-xue/ji-suan-ji-tu-xing-xue-fan-zou-yang-ji-zhu/</id>
    <published>2023-05-05T09:30:52.000Z</published>
    <updated>2023-05-05T09:47:05.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反走样">反走样</h2><p>直线扫描转换算法在处理非水平、非垂直且非45°的直线段时会出现锯齿，这是因为直线段在光栅扫描显示器上显示的图像是由一系列亮度相同而面积不为零的离散像素点构成的。这种由离散量表示连续量而引起的失真称为走样（aliasing）。用于减轻走样现象的技术称为反走样（anti-aliasing,AA）或者抗锯齿。走样是理想直线（理想直线宽度为零）扫描转换后（真实像素点面积不为零）的必然结果。走样是光栅扫描显示器的一种固有现象，<strong>不可避免，只能减轻。</strong><br>反走样技术主要分为两类：<strong>一类是硬件技术，通过提高显示器的分辨率来实现；另一类是软件技术，通过改进软件算法来实现</strong>。<br>从硬件角度把显示器的分辩率提高了一倍。由于每个锯齿在x方向和y方向都只有原先分辨率的一半，所以看上去走样现象有所改善。虽然如此，硬件反走样技术由于受到硬件条件和成本的限制，实现起来较为困难，很难达到理想的反走样效果。<br>软件反走样技术主要是加权区域采样。算法的实质是利用人眼视觉特性，通过加权平均的方法，调节像素的亮度和灰度，以产生模糊的边界，从而达到较好的视觉效果以消除 “锯齿”。加权参数可以选择距离、面积和体积等。下面主要讲解<strong>直线的距离加权反走样算法</strong>，关于面积加权和体积加权反走样算法请读者参考相关文献。</p><h2 id="Wu反走样算法">Wu反走样算法</h2><p><img src="/static/IT/Graphics/AntiAliasing-1.png" alt="Wu反走样算法"><br>Wu反走样算法是采用空间混色原理来对走样进行修正。<strong>空间混色原理指出，人眼对某一区域颜色的识别是取这个区域颜色的平均值</strong>。Wu反走样算法原理是对于理想直线上的任一点，同时以两个不同亮度级别的相邻像素来表示。理想直线段上的点Q1，扫描转换后可用像素点P1和像素点P4以不同的亮度级别共同显示，<strong>像素点离理想直线段越近，其亮度值越小，像素越暗；像素点离理想直线段越远，其亮度值就越大，像素越亮，但二者的亮度级别之和等于像素Q1的灰度值。</strong></p><h2 id="构造距离误差项">构造距离误差项</h2><p><img src="/static/IT/Graphics/AntiAliasing-2.png" alt="构造距离误差项"><br>斜率为k的理想直线段与$P_u$和$P_d$像素中心连线的交点为$Q_i(x_{i+1},e_i）$。$e_i$为$Q_i$与$P_d$的距离。</p><ul><li>$P_d(x_i+1,y_i)$像素的亮度级别为：$c_d=RGB(e_i ×255,e_i ×255,e_i ×255)$</li><li>$P_u(x_i+1,y_i+1)$像素的亮度级别为：$c_u=RGB((1-e_i )×255,(1-e_i )×255,(1-e_i)×255)$</li></ul><p>每右移一个像素，$e_{i+1}=e_i+k$。当$e_i≥1.0$时，$y_{i+1}=y_i+1，e_{i+1}=e_i-1$</p><h3 id="算法源码">算法源码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">CPoint <span class="token function">p0</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">,</span>dy<span class="token punctuation">;</span>dx<span class="token operator">=</span>p1<span class="token punctuation">.</span>x<span class="token operator">-</span>p0<span class="token punctuation">.</span>x<span class="token punctuation">;</span>dy<span class="token operator">=</span>p1<span class="token punctuation">.</span>y<span class="token operator">-</span>p0<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">double</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>dy<span class="token operator">/</span>dx<span class="token punctuation">,</span>e<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>p0<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">;</span>p<span class="token punctuation">.</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//不包括终点p1</span><span class="token punctuation">{</span>pDC<span class="token operator">-&gt;</span><span class="token function">SetPixelV</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token function">RGB</span><span class="token punctuation">(</span>e<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span>e<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span>e<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-&gt;</span><span class="token function">SetPixelV</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">RGB</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>e<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">+=</span>k<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">&gt;=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">.</span>y<span class="token operator">++</span><span class="token punctuation">;</span>        e<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="彩色直线段的反走样">彩色直线段的反走样</h2><p>因为Wu反走样算法是从前景色过渡到背景色，彩色直线段的反走样需要考虑背景色的影响。设直线段的前景色（foreground color）为cf，背景色（background color）为cb。彩色直线段的反走样是从前景色变化到背景色，出现模糊边界。绘制光滑过渡的彩色直线段时，需要使用以下公式进行前景色线性插值<br>$c=(1-t)c_0+tc_1  $<br>式中，$c$为颜色渐变直线段上任一点的颜色；$c_0$为直线段起点的颜色；$c_1$为直线段终点的颜色。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;反走样&quot;&gt;反走样&lt;/h2&gt;
&lt;p&gt;直线扫描转换算法在处理非水平、非垂直且非45°的直线段时会出现锯齿，这是因为直线段在光栅扫描显示器上显示的图像是由一系列亮度相同而面积不为零的离散像素点构成的。这种由离散量表示连续量而引起的失真称为走样（aliasing）。用于减</summary>
      
    
    
    
    <category term="IT学习笔记" scheme="https://jxch.github.io/categories/IT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://jxch.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
</feed>
